
ParallaxFeedback360ServoTesting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081dc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000524  08008380  08008380  00018380  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088a4  080088a4  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  080088a4  080088a4  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080088a4  080088a4  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088a4  080088a4  000188a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080088a8  080088a8  000188a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  080088ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d4  2**0
                  CONTENTS
 10 .bss          000001ec  200001d4  200001d4  000201d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003c0  200003c0  000201d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 14 .debug_info   00007d00  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001a48  00000000  00000000  00027f47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000610  00000000  00000000  00029990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000454  00000000  00000000  00029fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002155f  00000000  00000000  0002a3f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00009e60  00000000  00000000  0004b953  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c2252  00000000  00000000  000557b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002b40  00000000  00000000  00117a08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000051  00000000  00000000  0011a548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008364 	.word	0x08008364

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08008364 	.word	0x08008364

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2lz>:
 8000c98:	b538      	push	{r3, r4, r5, lr}
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	460d      	mov	r5, r1
 8000ca2:	f7ff ff23 	bl	8000aec <__aeabi_dcmplt>
 8000ca6:	b928      	cbnz	r0, 8000cb4 <__aeabi_d2lz+0x1c>
 8000ca8:	4620      	mov	r0, r4
 8000caa:	4629      	mov	r1, r5
 8000cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cb0:	f000 b80a 	b.w	8000cc8 <__aeabi_d2ulz>
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cba:	f000 f805 	bl	8000cc8 <__aeabi_d2ulz>
 8000cbe:	4240      	negs	r0, r0
 8000cc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc4:	bd38      	pop	{r3, r4, r5, pc}
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_d2ulz>:
 8000cc8:	b5d0      	push	{r4, r6, r7, lr}
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <__aeabi_d2ulz+0x34>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	4606      	mov	r6, r0
 8000cd0:	460f      	mov	r7, r1
 8000cd2:	f7ff fc99 	bl	8000608 <__aeabi_dmul>
 8000cd6:	f7ff ff6f 	bl	8000bb8 <__aeabi_d2uiz>
 8000cda:	4604      	mov	r4, r0
 8000cdc:	f7ff fc1a 	bl	8000514 <__aeabi_ui2d>
 8000ce0:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <__aeabi_d2ulz+0x38>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f7ff fc90 	bl	8000608 <__aeabi_dmul>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	460b      	mov	r3, r1
 8000cec:	4630      	mov	r0, r6
 8000cee:	4639      	mov	r1, r7
 8000cf0:	f7ff fad2 	bl	8000298 <__aeabi_dsub>
 8000cf4:	f7ff ff60 	bl	8000bb8 <__aeabi_d2uiz>
 8000cf8:	4621      	mov	r1, r4
 8000cfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000cfc:	3df00000 	.word	0x3df00000
 8000d00:	41f00000 	.word	0x41f00000

08000d04 <map>:
 8000d04:	b480      	push	{r7}
 8000d06:	b087      	sub	sp, #28
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	ed87 0a05 	vstr	s0, [r7, #20]
 8000d0e:	edc7 0a04 	vstr	s1, [r7, #16]
 8000d12:	ed87 1a03 	vstr	s2, [r7, #12]
 8000d16:	edc7 1a02 	vstr	s3, [r7, #8]
 8000d1a:	ed87 2a01 	vstr	s4, [r7, #4]
 8000d1e:	ed97 7a05 	vldr	s14, [r7, #20]
 8000d22:	edd7 7a04 	vldr	s15, [r7, #16]
 8000d26:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000d2a:	edd7 6a01 	vldr	s13, [r7, #4]
 8000d2e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d32:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000d36:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000d3a:	ed97 7a03 	vldr	s14, [r7, #12]
 8000d3e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000d42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000d4a:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d52:	eeb0 0a67 	vmov.f32	s0, s15
 8000d56:	371c      	adds	r7, #28
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <create_servo>:
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	6039      	str	r1, [r7, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d101      	bne.n	8000d74 <create_servo+0x14>
 8000d70:	2300      	movs	r3, #0
 8000d72:	e00a      	b.n	8000d8a <create_servo+0x2a>
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	683a      	ldr	r2, [r7, #0]
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4a06      	ldr	r2, [pc, #24]	; (8000d98 <create_servo+0x38>)
 8000d7e:	605a      	str	r2, [r3, #4]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f04f 0200 	mov.w	r2, #0
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	2301      	movs	r3, #1
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	bf800000 	.word	0xbf800000

08000d9c <set_pwm_signal_servo>:
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	60f8      	str	r0, [r7, #12]
 8000da4:	ed87 0a02 	vstr	s0, [r7, #8]
 8000da8:	460b      	mov	r3, r1
 8000daa:	71fb      	strb	r3, [r7, #7]
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d101      	bne.n	8000db6 <set_pwm_signal_servo+0x1a>
 8000db2:	2300      	movs	r3, #0
 8000db4:	e02a      	b.n	8000e0c <set_pwm_signal_servo+0x70>
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d002      	beq.n	8000dc2 <set_pwm_signal_servo+0x26>
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d012      	beq.n	8000de6 <set_pwm_signal_servo+0x4a>
 8000dc0:	e023      	b.n	8000e0a <set_pwm_signal_servo+0x6e>
 8000dc2:	ed9f 2a14 	vldr	s4, [pc, #80]	; 8000e14 <set_pwm_signal_servo+0x78>
 8000dc6:	eddf 1a14 	vldr	s3, [pc, #80]	; 8000e18 <set_pwm_signal_servo+0x7c>
 8000dca:	ed9f 1a14 	vldr	s2, [pc, #80]	; 8000e1c <set_pwm_signal_servo+0x80>
 8000dce:	eddf 0a14 	vldr	s1, [pc, #80]	; 8000e20 <set_pwm_signal_servo+0x84>
 8000dd2:	ed97 0a02 	vldr	s0, [r7, #8]
 8000dd6:	f7ff ff95 	bl	8000d04 <map>
 8000dda:	eef0 7a40 	vmov.f32	s15, s0
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	edc3 7a00 	vstr	s15, [r3]
 8000de4:	e011      	b.n	8000e0a <set_pwm_signal_servo+0x6e>
 8000de6:	ed9f 2a0f 	vldr	s4, [pc, #60]	; 8000e24 <set_pwm_signal_servo+0x88>
 8000dea:	eddf 1a0f 	vldr	s3, [pc, #60]	; 8000e28 <set_pwm_signal_servo+0x8c>
 8000dee:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 8000e20 <set_pwm_signal_servo+0x84>
 8000df2:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8000e2c <set_pwm_signal_servo+0x90>
 8000df6:	ed97 0a02 	vldr	s0, [r7, #8]
 8000dfa:	f7ff ff83 	bl	8000d04 <map>
 8000dfe:	eef0 7a40 	vmov.f32	s15, s0
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	edc3 7a00 	vstr	s15, [r3]
 8000e08:	bf00      	nop
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3710      	adds	r7, #16
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	4109999a 	.word	0x4109999a
 8000e18:	40f33333 	.word	0x40f33333
 8000e1c:	43160000 	.word	0x43160000
 8000e20:	00000000 	.word	0x00000000
 8000e24:	40e66666 	.word	0x40e66666
 8000e28:	40c66666 	.word	0x40c66666
 8000e2c:	c3160000 	.word	0xc3160000

08000e30 <check_update_speed>:
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d101      	bne.n	8000e42 <check_update_speed+0x12>
 8000e3e:	2300      	movs	r3, #0
 8000e40:	e043      	b.n	8000eca <check_update_speed+0x9a>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	ed93 7a01 	vldr	s14, [r3, #4]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	edd3 7a02 	vldr	s15, [r3, #8]
 8000e4e:	eeb4 7a67 	vcmp.f32	s14, s15
 8000e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e56:	d101      	bne.n	8000e5c <check_update_speed+0x2c>
 8000e58:	2301      	movs	r3, #1
 8000e5a:	e036      	b.n	8000eca <check_update_speed+0x9a>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	689a      	ldr	r2, [r3, #8]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	605a      	str	r2, [r3, #4]
 8000e64:	4b1b      	ldr	r3, [pc, #108]	; (8000ed4 <check_update_speed+0xa4>)
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	edd3 7a02 	vldr	s15, [r3, #8]
 8000e6e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e76:	dd0b      	ble.n	8000e90 <check_update_speed+0x60>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	edd3 7a02 	vldr	s15, [r3, #8]
 8000e7e:	f107 030c 	add.w	r3, r7, #12
 8000e82:	2100      	movs	r1, #0
 8000e84:	eeb0 0a67 	vmov.f32	s0, s15
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff ff87 	bl	8000d9c <set_pwm_signal_servo>
 8000e8e:	e012      	b.n	8000eb6 <check_update_speed+0x86>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	edd3 7a02 	vldr	s15, [r3, #8]
 8000e96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e9e:	d50a      	bpl.n	8000eb6 <check_update_speed+0x86>
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	edd3 7a02 	vldr	s15, [r3, #8]
 8000ea6:	f107 030c 	add.w	r3, r7, #12
 8000eaa:	2101      	movs	r1, #1
 8000eac:	eeb0 0a67 	vmov.f32	s0, s15
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff ff73 	bl	8000d9c <set_pwm_signal_servo>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ebe:	eeb0 0a67 	vmov.f32	s0, s15
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f000 fae6 	bl	8001494 <set_pulse_width>
 8000ec8:	2301      	movs	r3, #1
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3710      	adds	r7, #16
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40eccccd 	.word	0x40eccccd

08000ed8 <PID_init>:
#include "PID_control.h"
#include "timer.h"
#include <stdio.h>
#include <stdlib.h>

uint8_t PID_init(PID *pid) {
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
	if (pid == NULL) {
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d101      	bne.n	8000eea <PID_init+0x12>
		return 0;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	e01c      	b.n	8000f24 <PID_init+0x4c>
	}

	//constant
	pid->kp = 0;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	f04f 0200 	mov.w	r2, #0
 8000ef0:	60da      	str	r2, [r3, #12]
	pid->ki = 0;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	f04f 0200 	mov.w	r2, #0
 8000ef8:	611a      	str	r2, [r3, #16]
	pid->kd = 0;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	f04f 0200 	mov.w	r2, #0
 8000f00:	615a      	str	r2, [r3, #20]

	//P - I - D value
	pid->derevative = 0;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	f04f 0200 	mov.w	r2, #0
 8000f08:	609a      	str	r2, [r3, #8]
	pid->integral = 0;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	f04f 0200 	mov.w	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
	pid->proportional = 0;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	f04f 0200 	mov.w	r2, #0
 8000f18:	605a      	str	r2, [r3, #4]

	pid->pre_error = 0;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	f04f 0200 	mov.w	r2, #0
 8000f20:	619a      	str	r2, [r3, #24]
	return 1;
 8000f22:	2301      	movs	r3, #1
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <tuning>:

uint8_t tuning(PID *pid, float kp, float ki, float kd) {
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f3c:	edc7 0a01 	vstr	s1, [r7, #4]
 8000f40:	ed87 1a00 	vstr	s2, [r7]
	if (pid == NULL) {
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d101      	bne.n	8000f4e <tuning+0x1e>
		return 0;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	e009      	b.n	8000f62 <tuning+0x32>
	}

	pid->kp = kp;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	68ba      	ldr	r2, [r7, #8]
 8000f52:	60da      	str	r2, [r3, #12]
	pid->ki = ki;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	611a      	str	r2, [r3, #16]
	pid->kd = kd;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	683a      	ldr	r2, [r7, #0]
 8000f5e:	615a      	str	r2, [r3, #20]

	return 1;
 8000f60:	2301      	movs	r3, #1
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3714      	adds	r7, #20
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
	...

08000f70 <PID_controller>:

uint8_t PID_controller(PID *pid, Timer *timer, float setpoint, float input,
		float *output) {
 8000f70:	b480      	push	{r7}
 8000f72:	b089      	sub	sp, #36	; 0x24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6178      	str	r0, [r7, #20]
 8000f78:	6139      	str	r1, [r7, #16]
 8000f7a:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f7e:	edc7 0a02 	vstr	s1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
	if (pid == NULL || timer == NULL || output == NULL) {
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d005      	beq.n	8000f96 <PID_controller+0x26>
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d002      	beq.n	8000f96 <PID_controller+0x26>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d101      	bne.n	8000f9a <PID_controller+0x2a>
		return 0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	e063      	b.n	8001062 <PID_controller+0xf2>
	}

	if (timer->timeout) {
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	7a1b      	ldrb	r3, [r3, #8]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d05e      	beq.n	8001060 <PID_controller+0xf0>

		//error term
		float error = input - setpoint;
 8000fa2:	ed97 7a02 	vldr	s14, [r7, #8]
 8000fa6:	edd7 7a03 	vldr	s15, [r7, #12]
 8000faa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fae:	edc7 7a07 	vstr	s15, [r7, #28]
		//printf("error: %f\n", error);
		//fflush(stdout);

		//proportional
		pid->proportional = pid->kp * error;
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	ed93 7a03 	vldr	s14, [r3, #12]
 8000fb8:	edd7 7a07 	vldr	s15, [r7, #28]
 8000fbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	edc3 7a01 	vstr	s15, [r3, #4]

		//integral
		//unwind - only turn on in steady-state error
		if (error < 5) {
 8000fc6:	edd7 7a07 	vldr	s15, [r7, #28]
 8000fca:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8000fce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fd6:	d50e      	bpl.n	8000ff6 <PID_controller+0x86>
			pid->integral += pid->ki * error;
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	ed93 7a00 	vldr	s14, [r3]
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	edd3 6a04 	vldr	s13, [r3, #16]
 8000fe4:	edd7 7a07 	vldr	s15, [r7, #28]
 8000fe8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	edc3 7a00 	vstr	s15, [r3]
		}

		//derevative
		pid->derevative = pid->kd * (pid->pre_error - error);
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	ed93 7a05 	vldr	s14, [r3, #20]
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	edd3 6a06 	vldr	s13, [r3, #24]
 8001002:	edd7 7a07 	vldr	s15, [r7, #28]
 8001006:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800100a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	edc3 7a02 	vstr	s15, [r3, #8]

		//unwind -simply turning off when get out of the zone
		if (error == 0 || pid->integral > 100) {
 8001014:	edd7 7a07 	vldr	s15, [r7, #28]
 8001018:	eef5 7a40 	vcmp.f32	s15, #0.0
 800101c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001020:	d009      	beq.n	8001036 <PID_controller+0xc6>
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	edd3 7a00 	vldr	s15, [r3]
 8001028:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001070 <PID_controller+0x100>
 800102c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001034:	dd03      	ble.n	800103e <PID_controller+0xce>
			pid->integral = 0;
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	f04f 0200 	mov.w	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
		}

		*output = pid->proportional + pid->derevative;// + pid->integral;
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	ed93 7a01 	vldr	s14, [r3, #4]
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	edd3 7a02 	vldr	s15, [r3, #8]
 800104a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	edc3 7a00 	vstr	s15, [r3]


	//	printf("output %f",*output);

		pid->pre_error = error;
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	69fa      	ldr	r2, [r7, #28]
 8001058:	619a      	str	r2, [r3, #24]

		timer->timeout = 0;
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	2200      	movs	r2, #0
 800105e:	721a      	strb	r2, [r3, #8]
	}
	return 1;
 8001060:	2301      	movs	r3, #1
}
 8001062:	4618      	mov	r0, r3
 8001064:	3724      	adds	r7, #36	; 0x24
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	42c80000 	.word	0x42c80000

08001074 <robot_init>:
#define LEFT 0

#define NORMAL_RPM 70

uint8_t robot_init(Robot *robot, Movement *movement, Servo *l_wheel,
		Servo *r_wheel, Distance *eye, uint8_t set_distance) {
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
 8001080:	603b      	str	r3, [r7, #0]
	if (robot == NULL || l_wheel == NULL || r_wheel == NULL || eye == NULL) {
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d008      	beq.n	800109a <robot_init+0x26>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d005      	beq.n	800109a <robot_init+0x26>
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d002      	beq.n	800109a <robot_init+0x26>
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d101      	bne.n	800109e <robot_init+0x2a>
		return 0;
 800109a:	2300      	movs	r3, #0
 800109c:	e016      	b.n	80010cc <robot_init+0x58>
	}
	//robot
	robot->l_wheel = l_wheel;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	601a      	str	r2, [r3, #0]
	robot->r_wheel = r_wheel;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	683a      	ldr	r2, [r7, #0]
 80010a8:	605a      	str	r2, [r3, #4]
	robot->eye = eye;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	609a      	str	r2, [r3, #8]

	movement->pre_mode = TURNING;
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	2202      	movs	r2, #2
 80010b4:	721a      	strb	r2, [r3, #8]
	movement->mode = FORWARD;
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	2200      	movs	r2, #0
 80010ba:	725a      	strb	r2, [r3, #9]

	movement->distance = set_distance;
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	7f3a      	ldrb	r2, [r7, #28]
 80010c0:	701a      	strb	r2, [r3, #0]

	movement->speed = 0;
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	f04f 0200 	mov.w	r2, #0
 80010c8:	605a      	str	r2, [r3, #4]

	return 1;
 80010ca:	2301      	movs	r3, #1
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3714      	adds	r7, #20
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <set_speed>:


uint8_t set_speed(Robot *robot, float speed_rpm) {
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	ed87 0a00 	vstr	s0, [r7]
	if (robot == NULL) {
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d101      	bne.n	80010ee <set_speed+0x16>
		return 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	e010      	b.n	8001110 <set_speed+0x38>
	}
	robot->l_wheel->speed = speed_rpm;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	683a      	ldr	r2, [r7, #0]
 80010f4:	609a      	str	r2, [r3, #8]
	robot->r_wheel->speed = -speed_rpm-35;
 80010f6:	edd7 7a00 	vldr	s15, [r7]
 80010fa:	eef1 7a67 	vneg.f32	s15, s15
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800111c <set_speed+0x44>
 8001106:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800110a:	edc3 7a02 	vstr	s15, [r3, #8]

	return 1;
 800110e:	2301      	movs	r3, #1
}
 8001110:	4618      	mov	r0, r3
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	420c0000 	.word	0x420c0000

08001120 <set_turn_speed_random_direction>:

uint8_t set_turn_speed_random_direction(Robot *robot, float speed_rpm) {
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	ed87 0a00 	vstr	s0, [r7]

	if (robot == NULL) {
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d101      	bne.n	8001136 <set_turn_speed_random_direction+0x16>
		return 0;
 8001132:	2300      	movs	r3, #0
 8001134:	e028      	b.n	8001188 <set_turn_speed_random_direction+0x68>
	}
	uint8_t sign = rand() % 2;
 8001136:	f002 fc93 	bl	8003a60 <rand>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	bfb8      	it	lt
 8001144:	425b      	neglt	r3, r3
 8001146:	73fb      	strb	r3, [r7, #15]

	switch (sign) {
 8001148:	7bfb      	ldrb	r3, [r7, #15]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d012      	beq.n	8001174 <set_turn_speed_random_direction+0x54>
 800114e:	2b01      	cmp	r3, #1
 8001150:	d119      	bne.n	8001186 <set_turn_speed_random_direction+0x66>
	case RIGHT:
		robot->l_wheel->speed = -speed_rpm;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	edd7 7a00 	vldr	s15, [r7]
 800115a:	eef1 7a67 	vneg.f32	s15, s15
 800115e:	edc3 7a02 	vstr	s15, [r3, #8]
		robot->r_wheel->speed = -speed_rpm;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	edd7 7a00 	vldr	s15, [r7]
 800116a:	eef1 7a67 	vneg.f32	s15, s15
 800116e:	edc3 7a02 	vstr	s15, [r3, #8]
		break;
 8001172:	e008      	b.n	8001186 <set_turn_speed_random_direction+0x66>
	case LEFT:
		robot->l_wheel->speed = speed_rpm;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	683a      	ldr	r2, [r7, #0]
 800117a:	609a      	str	r2, [r3, #8]
		robot->r_wheel->speed = speed_rpm;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	683a      	ldr	r2, [r7, #0]
 8001182:	609a      	str	r2, [r3, #8]
		break;
 8001184:	bf00      	nop
	}

	return 1;
 8001186:	2301      	movs	r3, #1
}
 8001188:	4618      	mov	r0, r3
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <drifting_robot>:


uint8_t drifting_robot(Robot *robot, Movement *movement,PID *pos_control,Timer *timer,Timer *pos_timer) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
 800119c:	603b      	str	r3, [r7, #0]
    //check robot struct
	if (robot == NULL || movement == NULL || timer == NULL) {
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d005      	beq.n	80011b0 <drifting_robot+0x20>
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d002      	beq.n	80011b0 <drifting_robot+0x20>
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d101      	bne.n	80011b4 <drifting_robot+0x24>
		return 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	e0c1      	b.n	8001338 <drifting_robot+0x1a8>
	}

	//check pid control struct
	if(pos_control == NULL || pos_timer == NULL)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d002      	beq.n	80011c0 <drifting_robot+0x30>
 80011ba:	69bb      	ldr	r3, [r7, #24]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d101      	bne.n	80011c4 <drifting_robot+0x34>
	{
		return 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	e0b9      	b.n	8001338 <drifting_robot+0x1a8>
	}

	switch (movement->mode) {
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	7a5b      	ldrb	r3, [r3, #9]
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d070      	beq.n	80012ae <drifting_robot+0x11e>
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	f300 80b2 	bgt.w	8001336 <drifting_robot+0x1a6>
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d002      	beq.n	80011dc <drifting_robot+0x4c>
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d02b      	beq.n	8001232 <drifting_robot+0xa2>
 80011da:	e0ac      	b.n	8001336 <drifting_robot+0x1a6>
	case AHEAD:
		if (movement->pre_mode != movement->mode) {
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	7a1a      	ldrb	r2, [r3, #8]
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	7a5b      	ldrb	r3, [r3, #9]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d017      	beq.n	8001218 <drifting_robot+0x88>
			//set speed
			movement->speed = NORMAL_RPM;
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	4a57      	ldr	r2, [pc, #348]	; (8001348 <drifting_robot+0x1b8>)
 80011ec:	605a      	str	r2, [r3, #4]
			set_speed(robot, movement->speed);
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	edd3 7a01 	vldr	s15, [r3, #4]
 80011f4:	eeb0 0a67 	vmov.f32	s0, s15
 80011f8:	68f8      	ldr	r0, [r7, #12]
 80011fa:	f7ff ff6d 	bl	80010d8 <set_speed>
			movement->pre_mode = movement->mode;
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	7a5a      	ldrb	r2, [r3, #9]
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	721a      	strb	r2, [r3, #8]

			printf("AHEAD!\n");fflush(stdout);
 8001206:	4851      	ldr	r0, [pc, #324]	; (800134c <drifting_robot+0x1bc>)
 8001208:	f003 fcb6 	bl	8004b78 <puts>
 800120c:	4b50      	ldr	r3, [pc, #320]	; (8001350 <drifting_robot+0x1c0>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	4618      	mov	r0, r3
 8001214:	f003 fb86 	bl	8004924 <fflush>
		}

		if (robot->eye->value <= movement->distance * 4) {
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	68ba      	ldr	r2, [r7, #8]
 8001220:	7812      	ldrb	r2, [r2, #0]
 8001222:	0092      	lsls	r2, r2, #2
 8001224:	4293      	cmp	r3, r2
 8001226:	f200 8081 	bhi.w	800132c <drifting_robot+0x19c>
			movement->mode = SMOOTH_BREAK;
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	2201      	movs	r2, #1
 800122e:	725a      	strb	r2, [r3, #9]
		}
		break;
 8001230:	e07c      	b.n	800132c <drifting_robot+0x19c>
	case SMOOTH_BREAK:
        if(movement->pre_mode != movement->mode)
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	7a1a      	ldrb	r2, [r3, #8]
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	7a5b      	ldrb	r3, [r3, #9]
 800123a:	429a      	cmp	r2, r3
 800123c:	d00c      	beq.n	8001258 <drifting_robot+0xc8>
        {
        	printf("SMOOTH BREAK!\n"); fflush(stdout);
 800123e:	4845      	ldr	r0, [pc, #276]	; (8001354 <drifting_robot+0x1c4>)
 8001240:	f003 fc9a 	bl	8004b78 <puts>
 8001244:	4b42      	ldr	r3, [pc, #264]	; (8001350 <drifting_robot+0x1c0>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	4618      	mov	r0, r3
 800124c:	f003 fb6a 	bl	8004924 <fflush>
        	movement->pre_mode = movement->mode;
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	7a5a      	ldrb	r2, [r3, #9]
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	721a      	strb	r2, [r3, #8]
        }

        //PID control - take command and procces
        PID_controller(pos_control,pos_timer,(float)movement->distance,robot->eye->value,&movement->speed);
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	ee07 3a90 	vmov	s15, r3
 8001260:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	ee07 3a10 	vmov	s14, r3
 800126e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	3304      	adds	r3, #4
 8001276:	461a      	mov	r2, r3
 8001278:	eef0 0a47 	vmov.f32	s1, s14
 800127c:	eeb0 0a67 	vmov.f32	s0, s15
 8001280:	69b9      	ldr	r1, [r7, #24]
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f7ff fe74 	bl	8000f70 <PID_controller>
		 set_speed(robot, movement->speed);
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	edd3 7a01 	vldr	s15, [r3, #4]
 800128e:	eeb0 0a67 	vmov.f32	s0, s15
 8001292:	68f8      	ldr	r0, [r7, #12]
 8001294:	f7ff ff20 	bl	80010d8 <set_speed>


         if(robot->eye->value <= movement->distance)
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	68ba      	ldr	r2, [r7, #8]
 80012a0:	7812      	ldrb	r2, [r2, #0]
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d844      	bhi.n	8001330 <drifting_robot+0x1a0>
		{
			movement->mode = TURNING;
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	2202      	movs	r2, #2
 80012aa:	725a      	strb	r2, [r3, #9]
		}

		break;
 80012ac:	e040      	b.n	8001330 <drifting_robot+0x1a0>
	case TURNING:
		if (movement->pre_mode != movement->mode) {
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	7a1a      	ldrb	r2, [r3, #8]
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	7a5b      	ldrb	r3, [r3, #9]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d025      	beq.n	8001306 <drifting_robot+0x176>
			//set speed
			movement->speed = NORMAL_RPM;
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	4a22      	ldr	r2, [pc, #136]	; (8001348 <drifting_robot+0x1b8>)
 80012be:	605a      	str	r2, [r3, #4]
			set_turn_speed_random_direction(robot, movement->speed*0.7);
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff f947 	bl	8000558 <__aeabi_f2d>
 80012ca:	a31d      	add	r3, pc, #116	; (adr r3, 8001340 <drifting_robot+0x1b0>)
 80012cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d0:	f7ff f99a 	bl	8000608 <__aeabi_dmul>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	4610      	mov	r0, r2
 80012da:	4619      	mov	r1, r3
 80012dc:	f7ff fc8c 	bl	8000bf8 <__aeabi_d2f>
 80012e0:	4603      	mov	r3, r0
 80012e2:	ee00 3a10 	vmov	s0, r3
 80012e6:	68f8      	ldr	r0, [r7, #12]
 80012e8:	f7ff ff1a 	bl	8001120 <set_turn_speed_random_direction>
			movement->pre_mode = movement->mode;
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	7a5a      	ldrb	r2, [r3, #9]
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	721a      	strb	r2, [r3, #8]

			printf("turning!\n");fflush(stdout);
 80012f4:	4818      	ldr	r0, [pc, #96]	; (8001358 <drifting_robot+0x1c8>)
 80012f6:	f003 fc3f 	bl	8004b78 <puts>
 80012fa:	4b15      	ldr	r3, [pc, #84]	; (8001350 <drifting_robot+0x1c0>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	4618      	mov	r0, r3
 8001302:	f003 fb0f 	bl	8004924 <fflush>

		}

		if (robot->eye->value > movement->distance *2 && timer->timeout) {
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	68ba      	ldr	r2, [r7, #8]
 800130e:	7812      	ldrb	r2, [r2, #0]
 8001310:	0052      	lsls	r2, r2, #1
 8001312:	4293      	cmp	r3, r2
 8001314:	d90e      	bls.n	8001334 <drifting_robot+0x1a4>
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	7a1b      	ldrb	r3, [r3, #8]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d00a      	beq.n	8001334 <drifting_robot+0x1a4>
			movement->mode = AHEAD;
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	2200      	movs	r2, #0
 8001322:	725a      	strb	r2, [r3, #9]
			timer->timeout = 0;
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	2200      	movs	r2, #0
 8001328:	721a      	strb	r2, [r3, #8]
		}

		break;
 800132a:	e003      	b.n	8001334 <drifting_robot+0x1a4>
		break;
 800132c:	bf00      	nop
 800132e:	e002      	b.n	8001336 <drifting_robot+0x1a6>
		break;
 8001330:	bf00      	nop
 8001332:	e000      	b.n	8001336 <drifting_robot+0x1a6>
		break;
 8001334:	bf00      	nop
	}

	return 1;
 8001336:	2301      	movs	r3, #1
}
 8001338:	4618      	mov	r0, r3
 800133a:	3710      	adds	r7, #16
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	66666666 	.word	0x66666666
 8001344:	3fe66666 	.word	0x3fe66666
 8001348:	428c0000 	.word	0x428c0000
 800134c:	08008380 	.word	0x08008380
 8001350:	20000064 	.word	0x20000064
 8001354:	08008388 	.word	0x08008388
 8001358:	08008398 	.word	0x08008398

0800135c <__NVIC_EnableIRQ>:
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	71fb      	strb	r3, [r7, #7]
 8001366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136a:	2b00      	cmp	r3, #0
 800136c:	db0b      	blt.n	8001386 <__NVIC_EnableIRQ+0x2a>
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	f003 021f 	and.w	r2, r3, #31
 8001374:	4907      	ldr	r1, [pc, #28]	; (8001394 <__NVIC_EnableIRQ+0x38>)
 8001376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137a:	095b      	lsrs	r3, r3, #5
 800137c:	2001      	movs	r0, #1
 800137e:	fa00 f202 	lsl.w	r2, r0, r2
 8001382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001386:	bf00      	nop
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	e000e100 	.word	0xe000e100

08001398 <__NVIC_SetPriority>:
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	6039      	str	r1, [r7, #0]
 80013a2:	71fb      	strb	r3, [r7, #7]
 80013a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	db0a      	blt.n	80013c2 <__NVIC_SetPriority+0x2a>
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	b2da      	uxtb	r2, r3
 80013b0:	490c      	ldr	r1, [pc, #48]	; (80013e4 <__NVIC_SetPriority+0x4c>)
 80013b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b6:	0112      	lsls	r2, r2, #4
 80013b8:	b2d2      	uxtb	r2, r2
 80013ba:	440b      	add	r3, r1
 80013bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80013c0:	e00a      	b.n	80013d8 <__NVIC_SetPriority+0x40>
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	b2da      	uxtb	r2, r3
 80013c6:	4908      	ldr	r1, [pc, #32]	; (80013e8 <__NVIC_SetPriority+0x50>)
 80013c8:	79fb      	ldrb	r3, [r7, #7]
 80013ca:	f003 030f 	and.w	r3, r3, #15
 80013ce:	3b04      	subs	r3, #4
 80013d0:	0112      	lsls	r2, r2, #4
 80013d2:	b2d2      	uxtb	r2, r2
 80013d4:	440b      	add	r3, r1
 80013d6:	761a      	strb	r2, [r3, #24]
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	e000e100 	.word	0xe000e100
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <create_timer>:
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d101      	bne.n	8001400 <create_timer+0x14>
 80013fc:	2300      	movs	r3, #0
 80013fe:	e009      	b.n	8001414 <create_timer+0x28>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	683a      	ldr	r2, [r7, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2200      	movs	r2, #0
 8001410:	721a      	strb	r2, [r3, #8]
 8001412:	2301      	movs	r3, #1
 8001414:	4618      	mov	r0, r3
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <timing>:
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d101      	bne.n	8001432 <timing+0x12>
 800142e:	2300      	movs	r3, #0
 8001430:	e012      	b.n	8001458 <timing+0x38>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	429a      	cmp	r2, r3
 800143c:	d306      	bcc.n	800144c <timing+0x2c>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2201      	movs	r2, #1
 8001442:	721a      	strb	r2, [r3, #8]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	e004      	b.n	8001456 <timing+0x36>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	1c5a      	adds	r2, r3, #1
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	2301      	movs	r3, #1
 8001458:	4618      	mov	r0, r3
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <SysTick_init>:
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
 8001468:	4b09      	ldr	r3, [pc, #36]	; (8001490 <SysTick_init+0x2c>)
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	4b08      	ldr	r3, [pc, #32]	; (8001490 <SysTick_init+0x2c>)
 8001470:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	210f      	movs	r1, #15
 8001478:	f04f 30ff 	mov.w	r0, #4294967295
 800147c:	f7ff ff8c 	bl	8001398 <__NVIC_SetPriority>
 8001480:	4b03      	ldr	r3, [pc, #12]	; (8001490 <SysTick_init+0x2c>)
 8001482:	2200      	movs	r2, #0
 8001484:	609a      	str	r2, [r3, #8]
 8001486:	4b02      	ldr	r3, [pc, #8]	; (8001490 <SysTick_init+0x2c>)
 8001488:	2207      	movs	r2, #7
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	bf00      	nop
 800148e:	bd80      	pop	{r7, pc}
 8001490:	e000e010 	.word	0xe000e010

08001494 <set_pulse_width>:
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	ed87 0a00 	vstr	s0, [r7]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d101      	bne.n	80014aa <set_pulse_width+0x16>
 80014a6:	2300      	movs	r3, #0
 80014a8:	e022      	b.n	80014f0 <set_pulse_width+0x5c>
 80014aa:	edd7 7a00 	vldr	s15, [r7]
 80014ae:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80014fc <set_pulse_width+0x68>
 80014b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ba:	dc06      	bgt.n	80014ca <set_pulse_width+0x36>
 80014bc:	edd7 7a00 	vldr	s15, [r7]
 80014c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c8:	d501      	bpl.n	80014ce <set_pulse_width+0x3a>
 80014ca:	2300      	movs	r3, #0
 80014cc:	e010      	b.n	80014f0 <set_pulse_width+0x5c>
 80014ce:	edd7 7a00 	vldr	s15, [r7]
 80014d2:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001500 <set_pulse_width+0x6c>
 80014d6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014da:	eddf 6a08 	vldr	s13, [pc, #32]	; 80014fc <set_pulse_width+0x68>
 80014de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014e6:	ee17 2a90 	vmov	r2, s15
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	2301      	movs	r3, #1
 80014f0:	4618      	mov	r0, r3
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	42c80000 	.word	0x42c80000
 8001500:	477fff00 	.word	0x477fff00

08001504 <Timer_2_init>:
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
 8001508:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800150c:	2204      	movs	r2, #4
 800150e:	629a      	str	r2, [r3, #40]	; 0x28
 8001510:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001514:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001518:	62da      	str	r2, [r3, #44]	; 0x2c
 800151a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800151e:	2200      	movs	r2, #0
 8001520:	625a      	str	r2, [r3, #36]	; 0x24
 8001522:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800152c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001530:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001534:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001538:	6193      	str	r3, [r2, #24]
 800153a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800153e:	f241 3233 	movw	r2, #4915	; 0x1333
 8001542:	635a      	str	r2, [r3, #52]	; 0x34
 8001544:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001548:	6a1b      	ldr	r3, [r3, #32]
 800154a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800154e:	f043 0301 	orr.w	r3, r3, #1
 8001552:	6213      	str	r3, [r2, #32]
 8001554:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001558:	699b      	ldr	r3, [r3, #24]
 800155a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800155e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001562:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001566:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 800156a:	6193      	str	r3, [r2, #24]
 800156c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001570:	f241 3233 	movw	r2, #4915	; 0x1333
 8001574:	639a      	str	r2, [r3, #56]	; 0x38
 8001576:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800157a:	6a1b      	ldr	r3, [r3, #32]
 800157c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001580:	f043 0310 	orr.w	r3, r3, #16
 8001584:	6213      	str	r3, [r2, #32]
 8001586:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001590:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001594:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001598:	6013      	str	r3, [r2, #0]
 800159a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f023 030c 	bic.w	r3, r3, #12
 80015a4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80015a8:	f043 0308 	orr.w	r3, r3, #8
 80015ac:	6013      	str	r3, [r2, #0]
 80015ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80015b2:	6a1b      	ldr	r3, [r3, #32]
 80015b4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80015b8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80015bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80015c0:	6213      	str	r3, [r2, #32]
 80015c2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80015c6:	6a1b      	ldr	r3, [r3, #32]
 80015c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80015cc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80015d0:	f043 0310 	orr.w	r3, r3, #16
 80015d4:	6213      	str	r3, [r2, #32]
 80015d6:	201c      	movs	r0, #28
 80015d8:	f7ff fec0 	bl	800135c <__NVIC_EnableIRQ>
 80015dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015e0:	68db      	ldr	r3, [r3, #12]
 80015e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015e6:	f043 0307 	orr.w	r3, r3, #7
 80015ea:	60d3      	str	r3, [r2, #12]
 80015ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015f6:	f043 0301 	orr.w	r3, r3, #1
 80015fa:	6013      	str	r3, [r2, #0]
 80015fc:	bf00      	nop
 80015fe:	bd80      	pop	{r7, pc}

08001600 <Timer_3_init>:
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
 8001604:	4b1e      	ldr	r3, [pc, #120]	; (8001680 <Timer_3_init+0x80>)
 8001606:	220f      	movs	r2, #15
 8001608:	629a      	str	r2, [r3, #40]	; 0x28
 800160a:	4b1d      	ldr	r3, [pc, #116]	; (8001680 <Timer_3_init+0x80>)
 800160c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001610:	62da      	str	r2, [r3, #44]	; 0x2c
 8001612:	4b1b      	ldr	r3, [pc, #108]	; (8001680 <Timer_3_init+0x80>)
 8001614:	2200      	movs	r2, #0
 8001616:	625a      	str	r2, [r3, #36]	; 0x24
 8001618:	4b19      	ldr	r3, [pc, #100]	; (8001680 <Timer_3_init+0x80>)
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001620:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001624:	4a16      	ldr	r2, [pc, #88]	; (8001680 <Timer_3_init+0x80>)
 8001626:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 800162a:	6193      	str	r3, [r2, #24]
 800162c:	4b14      	ldr	r3, [pc, #80]	; (8001680 <Timer_3_init+0x80>)
 800162e:	220a      	movs	r2, #10
 8001630:	639a      	str	r2, [r3, #56]	; 0x38
 8001632:	4b13      	ldr	r3, [pc, #76]	; (8001680 <Timer_3_init+0x80>)
 8001634:	6a1b      	ldr	r3, [r3, #32]
 8001636:	4a12      	ldr	r2, [pc, #72]	; (8001680 <Timer_3_init+0x80>)
 8001638:	f043 0310 	orr.w	r3, r3, #16
 800163c:	6213      	str	r3, [r2, #32]
 800163e:	4b11      	ldr	r3, [pc, #68]	; (8001684 <Timer_3_init+0x84>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001646:	4a0f      	ldr	r2, [pc, #60]	; (8001684 <Timer_3_init+0x84>)
 8001648:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800164c:	6013      	str	r3, [r2, #0]
 800164e:	4b0d      	ldr	r3, [pc, #52]	; (8001684 <Timer_3_init+0x84>)
 8001650:	6a1b      	ldr	r3, [r3, #32]
 8001652:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001656:	4a0b      	ldr	r2, [pc, #44]	; (8001684 <Timer_3_init+0x84>)
 8001658:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800165c:	6213      	str	r3, [r2, #32]
 800165e:	201d      	movs	r0, #29
 8001660:	f7ff fe7c 	bl	800135c <__NVIC_EnableIRQ>
 8001664:	4b06      	ldr	r3, [pc, #24]	; (8001680 <Timer_3_init+0x80>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	4a05      	ldr	r2, [pc, #20]	; (8001680 <Timer_3_init+0x80>)
 800166a:	f043 0305 	orr.w	r3, r3, #5
 800166e:	60d3      	str	r3, [r2, #12]
 8001670:	4b03      	ldr	r3, [pc, #12]	; (8001680 <Timer_3_init+0x80>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a02      	ldr	r2, [pc, #8]	; (8001680 <Timer_3_init+0x80>)
 8001676:	f043 0301 	orr.w	r3, r3, #1
 800167a:	6013      	str	r3, [r2, #0]
 800167c:	bf00      	nop
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40000400 	.word	0x40000400
 8001684:	48000400 	.word	0x48000400

08001688 <Timer_4_init>:
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
 800168c:	4b29      	ldr	r3, [pc, #164]	; (8001734 <Timer_4_init+0xac>)
 800168e:	220f      	movs	r2, #15
 8001690:	629a      	str	r2, [r3, #40]	; 0x28
 8001692:	4b28      	ldr	r3, [pc, #160]	; (8001734 <Timer_4_init+0xac>)
 8001694:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001698:	62da      	str	r2, [r3, #44]	; 0x2c
 800169a:	4b26      	ldr	r3, [pc, #152]	; (8001734 <Timer_4_init+0xac>)
 800169c:	2200      	movs	r2, #0
 800169e:	625a      	str	r2, [r3, #36]	; 0x24
 80016a0:	4b24      	ldr	r3, [pc, #144]	; (8001734 <Timer_4_init+0xac>)
 80016a2:	69db      	ldr	r3, [r3, #28]
 80016a4:	f023 0303 	bic.w	r3, r3, #3
 80016a8:	4a22      	ldr	r2, [pc, #136]	; (8001734 <Timer_4_init+0xac>)
 80016aa:	f043 0301 	orr.w	r3, r3, #1
 80016ae:	61d3      	str	r3, [r2, #28]
 80016b0:	4b20      	ldr	r3, [pc, #128]	; (8001734 <Timer_4_init+0xac>)
 80016b2:	69db      	ldr	r3, [r3, #28]
 80016b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80016b8:	4a1e      	ldr	r2, [pc, #120]	; (8001734 <Timer_4_init+0xac>)
 80016ba:	f043 0310 	orr.w	r3, r3, #16
 80016be:	61d3      	str	r3, [r2, #28]
 80016c0:	4b1c      	ldr	r3, [pc, #112]	; (8001734 <Timer_4_init+0xac>)
 80016c2:	69db      	ldr	r3, [r3, #28]
 80016c4:	4a1b      	ldr	r2, [pc, #108]	; (8001734 <Timer_4_init+0xac>)
 80016c6:	f023 030c 	bic.w	r3, r3, #12
 80016ca:	61d3      	str	r3, [r2, #28]
 80016cc:	4b19      	ldr	r3, [pc, #100]	; (8001734 <Timer_4_init+0xac>)
 80016ce:	6a1b      	ldr	r3, [r3, #32]
 80016d0:	4a18      	ldr	r2, [pc, #96]	; (8001734 <Timer_4_init+0xac>)
 80016d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016d6:	6213      	str	r3, [r2, #32]
 80016d8:	4b16      	ldr	r3, [pc, #88]	; (8001734 <Timer_4_init+0xac>)
 80016da:	6a1b      	ldr	r3, [r3, #32]
 80016dc:	4a15      	ldr	r2, [pc, #84]	; (8001734 <Timer_4_init+0xac>)
 80016de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016e2:	6213      	str	r3, [r2, #32]
 80016e4:	4b13      	ldr	r3, [pc, #76]	; (8001734 <Timer_4_init+0xac>)
 80016e6:	6a1b      	ldr	r3, [r3, #32]
 80016e8:	4a12      	ldr	r2, [pc, #72]	; (8001734 <Timer_4_init+0xac>)
 80016ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ee:	6213      	str	r3, [r2, #32]
 80016f0:	4b11      	ldr	r3, [pc, #68]	; (8001738 <Timer_4_init+0xb0>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80016f8:	4a0f      	ldr	r2, [pc, #60]	; (8001738 <Timer_4_init+0xb0>)
 80016fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016fe:	6013      	str	r3, [r2, #0]
 8001700:	4b0d      	ldr	r3, [pc, #52]	; (8001738 <Timer_4_init+0xb0>)
 8001702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001704:	f023 030f 	bic.w	r3, r3, #15
 8001708:	4a0b      	ldr	r2, [pc, #44]	; (8001738 <Timer_4_init+0xb0>)
 800170a:	f043 0302 	orr.w	r3, r3, #2
 800170e:	6253      	str	r3, [r2, #36]	; 0x24
 8001710:	201e      	movs	r0, #30
 8001712:	f7ff fe23 	bl	800135c <__NVIC_EnableIRQ>
 8001716:	4b07      	ldr	r3, [pc, #28]	; (8001734 <Timer_4_init+0xac>)
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	4a06      	ldr	r2, [pc, #24]	; (8001734 <Timer_4_init+0xac>)
 800171c:	f043 0309 	orr.w	r3, r3, #9
 8001720:	60d3      	str	r3, [r2, #12]
 8001722:	4b04      	ldr	r3, [pc, #16]	; (8001734 <Timer_4_init+0xac>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a03      	ldr	r2, [pc, #12]	; (8001734 <Timer_4_init+0xac>)
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	6013      	str	r3, [r2, #0]
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40000800 	.word	0x40000800
 8001738:	48000400 	.word	0x48000400

0800173c <create_ultrasonic_datas>:
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d005      	beq.n	800175a <create_ultrasonic_datas+0x1e>
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d002      	beq.n	800175a <create_ultrasonic_datas+0x1e>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <create_ultrasonic_datas+0x22>
 800175a:	2300      	movs	r3, #0
 800175c:	e015      	b.n	800178a <create_ultrasonic_datas+0x4e>
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2201      	movs	r2, #1
 8001768:	711a      	strb	r2, [r3, #4]
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	2200      	movs	r2, #0
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2200      	movs	r2, #0
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	2200      	movs	r2, #0
 8001780:	711a      	strb	r2, [r3, #4]
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	2200      	movs	r2, #0
 8001786:	715a      	strb	r2, [r3, #5]
 8001788:	2301      	movs	r3, #1
 800178a:	4618      	mov	r0, r3
 800178c:	3714      	adds	r7, #20
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr

08001796 <check_detect_echo_rise>:
 8001796:	b490      	push	{r4, r7}
 8001798:	b084      	sub	sp, #16
 800179a:	af00      	add	r7, sp, #0
 800179c:	463c      	mov	r4, r7
 800179e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80017aa:	d906      	bls.n	80017ba <check_detect_echo_rise+0x24>
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80017b4:	d201      	bcs.n	80017ba <check_detect_echo_rise+0x24>
 80017b6:	2301      	movs	r3, #1
 80017b8:	e000      	b.n	80017bc <check_detect_echo_rise+0x26>
 80017ba:	2300      	movs	r3, #0
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	4618      	mov	r0, r3
 80017c0:	3710      	adds	r7, #16
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bc90      	pop	{r4, r7}
 80017c6:	4770      	bx	lr

080017c8 <check_detecting_status>:
 80017c8:	b490      	push	{r4, r7}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	463c      	mov	r4, r7
 80017d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f503 4314 	add.w	r3, r3, #37888	; 0x9400
 80017de:	3370      	adds	r3, #112	; 0x70
 80017e0:	429a      	cmp	r2, r3
 80017e2:	bf34      	ite	cc
 80017e4:	2301      	movcc	r3, #1
 80017e6:	2300      	movcs	r3, #0
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	4618      	mov	r0, r3
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bc90      	pop	{r4, r7}
 80017f2:	4770      	bx	lr

080017f4 <calculate_distance>:
 80017f4:	b490      	push	{r4, r7}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	463c      	mov	r4, r7
 80017fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <calculate_distance+0x16>
 8001806:	2300      	movs	r3, #0
 8001808:	e009      	b.n	800181e <calculate_distance+0x2a>
 800180a:	68fa      	ldr	r2, [r7, #12]
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	4a05      	ldr	r2, [pc, #20]	; (8001828 <calculate_distance+0x34>)
 8001812:	fba2 2303 	umull	r2, r3, r2, r3
 8001816:	095a      	lsrs	r2, r3, #5
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	2301      	movs	r3, #1
 800181e:	4618      	mov	r0, r3
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bc90      	pop	{r4, r7}
 8001826:	4770      	bx	lr
 8001828:	8d3dcb09 	.word	0x8d3dcb09

0800182c <check_ultra_sonic_info>:
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af02      	add	r7, sp, #8
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d002      	beq.n	8001842 <check_ultra_sonic_info+0x16>
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d101      	bne.n	8001846 <check_ultra_sonic_info+0x1a>
 8001842:	2300      	movs	r3, #0
 8001844:	e02e      	b.n	80018a4 <check_ultra_sonic_info+0x78>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	791b      	ldrb	r3, [r3, #4]
 800184a:	b2db      	uxtb	r3, r3
 800184c:	2b00      	cmp	r3, #0
 800184e:	d011      	beq.n	8001874 <check_ultra_sonic_info+0x48>
 8001850:	2b01      	cmp	r3, #1
 8001852:	d126      	bne.n	80018a2 <check_ultra_sonic_info+0x76>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001858:	f7ff ff9d 	bl	8001796 <check_detect_echo_rise>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d01e      	beq.n	80018a0 <check_ultra_sonic_info+0x74>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	711a      	strb	r2, [r3, #4]
 8001872:	e015      	b.n	80018a0 <check_ultra_sonic_info+0x74>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	60da      	str	r2, [r3, #12]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001882:	f7ff ffa1 	bl	80017c8 <check_detecting_status>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d005      	beq.n	8001898 <check_ultra_sonic_info+0x6c>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	683a      	ldr	r2, [r7, #0]
 8001890:	9200      	str	r2, [sp, #0]
 8001892:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001894:	f7ff ffae 	bl	80017f4 <calculate_distance>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2201      	movs	r2, #1
 800189c:	711a      	strb	r2, [r3, #4]
 800189e:	e000      	b.n	80018a2 <check_ultra_sonic_info+0x76>
 80018a0:	bf00      	nop
 80018a2:	2301      	movs	r3, #1
 80018a4:	4618      	mov	r0, r3
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
Timer test_timer;
int main(void) {
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af02      	add	r7, sp, #8

	/* MCU Configuration*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80018b2:	f000 fb45 	bl	8001f40 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 80018b6:	f000 f977 	bl	8001ba8 <SystemClock_Config>
	printf("debug start!\n");
 80018ba:	4849      	ldr	r0, [pc, #292]	; (80019e0 <main+0x134>)
 80018bc:	f003 f95c 	bl	8004b78 <puts>
	fflush(stdout);
 80018c0:	4b48      	ldr	r3, [pc, #288]	; (80019e4 <main+0x138>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f003 f82c 	bl	8004924 <fflush>

	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN; // Enable clock timer 2
 80018cc:	4b46      	ldr	r3, [pc, #280]	; (80019e8 <main+0x13c>)
 80018ce:	69db      	ldr	r3, [r3, #28]
 80018d0:	4a45      	ldr	r2, [pc, #276]	; (80019e8 <main+0x13c>)
 80018d2:	f043 0301 	orr.w	r3, r3, #1
 80018d6:	61d3      	str	r3, [r2, #28]
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN; // Enable clock timer 3
 80018d8:	4b43      	ldr	r3, [pc, #268]	; (80019e8 <main+0x13c>)
 80018da:	69db      	ldr	r3, [r3, #28]
 80018dc:	4a42      	ldr	r2, [pc, #264]	; (80019e8 <main+0x13c>)
 80018de:	f043 0302 	orr.w	r3, r3, #2
 80018e2:	61d3      	str	r3, [r2, #28]
	RCC->APB1ENR |= RCC_APB1ENR_TIM4EN; // Enable clock timer 4
 80018e4:	4b40      	ldr	r3, [pc, #256]	; (80019e8 <main+0x13c>)
 80018e6:	69db      	ldr	r3, [r3, #28]
 80018e8:	4a3f      	ldr	r2, [pc, #252]	; (80019e8 <main+0x13c>)
 80018ea:	f043 0304 	orr.w	r3, r3, #4
 80018ee:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_TIM15EN; // Enable clock timer 15
 80018f0:	4b3d      	ldr	r3, [pc, #244]	; (80019e8 <main+0x13c>)
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	4a3c      	ldr	r2, [pc, #240]	; (80019e8 <main+0x13c>)
 80018f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018fa:	6193      	str	r3, [r2, #24]

	RCC->AHBENR |= RCC_AHBENR_GPIOAEN; //enable clock for portA
 80018fc:	4b3a      	ldr	r3, [pc, #232]	; (80019e8 <main+0x13c>)
 80018fe:	695b      	ldr	r3, [r3, #20]
 8001900:	4a39      	ldr	r2, [pc, #228]	; (80019e8 <main+0x13c>)
 8001902:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001906:	6153      	str	r3, [r2, #20]
	RCC->AHBENR |= RCC_AHBENR_GPIOBEN; //enable clock for portB
 8001908:	4b37      	ldr	r3, [pc, #220]	; (80019e8 <main+0x13c>)
 800190a:	695b      	ldr	r3, [r3, #20]
 800190c:	4a36      	ldr	r2, [pc, #216]	; (80019e8 <main+0x13c>)
 800190e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001912:	6153      	str	r3, [r2, #20]

	/* Initialize all configured peripherals */
	SysTick_init();
 8001914:	f7ff fda6 	bl	8001464 <SysTick_init>
	Timer_2_init();
 8001918:	f7ff fdf4 	bl	8001504 <Timer_2_init>
	Timer_3_init();
 800191c:	f7ff fe70 	bl	8001600 <Timer_3_init>
	Timer_4_init();
 8001920:	f7ff feb2 	bl	8001688 <Timer_4_init>
	/* debug purpose */
	printf("debug start!\n");
 8001924:	482e      	ldr	r0, [pc, #184]	; (80019e0 <main+0x134>)
 8001926:	f003 f927 	bl	8004b78 <puts>
	fflush(stdout);
 800192a:	4b2e      	ldr	r3, [pc, #184]	; (80019e4 <main+0x138>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	4618      	mov	r0, r3
 8001932:	f002 fff7 	bl	8004924 <fflush>

	//eyes
	create_ultrasonic_datas(&record, &distance, &TIM4->CCR3);
 8001936:	4a2d      	ldr	r2, [pc, #180]	; (80019ec <main+0x140>)
 8001938:	492d      	ldr	r1, [pc, #180]	; (80019f0 <main+0x144>)
 800193a:	482e      	ldr	r0, [pc, #184]	; (80019f4 <main+0x148>)
 800193c:	f7ff fefe 	bl	800173c <create_ultrasonic_datas>

	//wheels
	create_servo(&l_wheel, &TIM2->CCR2);  //left wheel
 8001940:	492d      	ldr	r1, [pc, #180]	; (80019f8 <main+0x14c>)
 8001942:	482e      	ldr	r0, [pc, #184]	; (80019fc <main+0x150>)
 8001944:	f7ff fa0c 	bl	8000d60 <create_servo>
	create_servo(&r_wheel, &TIM2->CCR1);  //right wheel
 8001948:	492d      	ldr	r1, [pc, #180]	; (8001a00 <main+0x154>)
 800194a:	482e      	ldr	r0, [pc, #184]	; (8001a04 <main+0x158>)
 800194c:	f7ff fa08 	bl	8000d60 <create_servo>

	//robot
	robot_init(&robot, &movement, &l_wheel, &r_wheel, &distance,
 8001950:	230a      	movs	r3, #10
 8001952:	9301      	str	r3, [sp, #4]
 8001954:	4b26      	ldr	r3, [pc, #152]	; (80019f0 <main+0x144>)
 8001956:	9300      	str	r3, [sp, #0]
 8001958:	4b2a      	ldr	r3, [pc, #168]	; (8001a04 <main+0x158>)
 800195a:	4a28      	ldr	r2, [pc, #160]	; (80019fc <main+0x150>)
 800195c:	492a      	ldr	r1, [pc, #168]	; (8001a08 <main+0x15c>)
 800195e:	482b      	ldr	r0, [pc, #172]	; (8001a0c <main+0x160>)
 8001960:	f7ff fb88 	bl	8001074 <robot_init>
			SETPOINT_DISTANCE);

	//timer
	create_timer(&robo_timer, ROBOT_TIME_INTERVAL);
 8001964:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001968:	4829      	ldr	r0, [pc, #164]	; (8001a10 <main+0x164>)
 800196a:	f7ff fd3f 	bl	80013ec <create_timer>
	create_timer(&pos_timer,PID_POS_INTERVAL);
 800196e:	2114      	movs	r1, #20
 8001970:	4828      	ldr	r0, [pc, #160]	; (8001a14 <main+0x168>)
 8001972:	f7ff fd3b 	bl	80013ec <create_timer>

	//PID init
	PID_init(&pos_control);
 8001976:	4828      	ldr	r0, [pc, #160]	; (8001a18 <main+0x16c>)
 8001978:	f7ff faae 	bl	8000ed8 <PID_init>

	//tunning
	tuning(&pos_control,1,0.3,0.7);
 800197c:	ed9f 1a27 	vldr	s2, [pc, #156]	; 8001a1c <main+0x170>
 8001980:	eddf 0a27 	vldr	s1, [pc, #156]	; 8001a20 <main+0x174>
 8001984:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001988:	4823      	ldr	r0, [pc, #140]	; (8001a18 <main+0x16c>)
 800198a:	f7ff fad1 	bl	8000f30 <tuning>

	//debugging
	//set_speed(&robot, -120);
    uint32_t preVal = 0;
 800198e:	2300      	movs	r3, #0
 8001990:	607b      	str	r3, [r7, #4]
	while (1) {

		//robot behaviour reaction
		drifting_robot(&robot, &movement,&pos_control,&robo_timer,&pos_timer);
 8001992:	4b20      	ldr	r3, [pc, #128]	; (8001a14 <main+0x168>)
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	4b1e      	ldr	r3, [pc, #120]	; (8001a10 <main+0x164>)
 8001998:	4a1f      	ldr	r2, [pc, #124]	; (8001a18 <main+0x16c>)
 800199a:	491b      	ldr	r1, [pc, #108]	; (8001a08 <main+0x15c>)
 800199c:	481b      	ldr	r0, [pc, #108]	; (8001a0c <main+0x160>)
 800199e:	f7ff fbf7 	bl	8001190 <drifting_robot>
		if(preVal != robot.eye->value)
 80019a2:	4b1a      	ldr	r3, [pc, #104]	; (8001a0c <main+0x160>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d010      	beq.n	80019d0 <main+0x124>
		{
       printf("eye value: %lu",robot.eye->value);fflush(stdout);
 80019ae:	4b17      	ldr	r3, [pc, #92]	; (8001a0c <main+0x160>)
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4619      	mov	r1, r3
 80019b6:	481b      	ldr	r0, [pc, #108]	; (8001a24 <main+0x178>)
 80019b8:	f003 f878 	bl	8004aac <iprintf>
 80019bc:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <main+0x138>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f002 ffae 	bl	8004924 <fflush>
       preVal = robot.eye->value;
 80019c8:	4b10      	ldr	r3, [pc, #64]	; (8001a0c <main+0x160>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	607b      	str	r3, [r7, #4]
		}		//update robot speed
		check_update_speed(&l_wheel);
 80019d0:	480a      	ldr	r0, [pc, #40]	; (80019fc <main+0x150>)
 80019d2:	f7ff fa2d 	bl	8000e30 <check_update_speed>
		check_update_speed(&r_wheel);
 80019d6:	480b      	ldr	r0, [pc, #44]	; (8001a04 <main+0x158>)
 80019d8:	f7ff fa2a 	bl	8000e30 <check_update_speed>
		drifting_robot(&robot, &movement,&pos_control,&robo_timer,&pos_timer);
 80019dc:	e7d9      	b.n	8001992 <main+0xe6>
 80019de:	bf00      	nop
 80019e0:	080083d0 	.word	0x080083d0
 80019e4:	20000064 	.word	0x20000064
 80019e8:	40021000 	.word	0x40021000
 80019ec:	4000083c 	.word	0x4000083c
 80019f0:	20000200 	.word	0x20000200
 80019f4:	200001f0 	.word	0x200001f0
 80019f8:	40000038 	.word	0x40000038
 80019fc:	20000208 	.word	0x20000208
 8001a00:	40000034 	.word	0x40000034
 8001a04:	20000214 	.word	0x20000214
 8001a08:	2000022c 	.word	0x2000022c
 8001a0c:	20000220 	.word	0x20000220
 8001a10:	20000254 	.word	0x20000254
 8001a14:	20000260 	.word	0x20000260
 8001a18:	20000238 	.word	0x20000238
 8001a1c:	3f333333 	.word	0x3f333333
 8001a20:	3e99999a 	.word	0x3e99999a
 8001a24:	080083e0 	.word	0x080083e0

08001a28 <SysTick_Handler>:
	}
}

void SysTick_Handler(void) {
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
	timing(&robo_timer);
 8001a2c:	4803      	ldr	r0, [pc, #12]	; (8001a3c <SysTick_Handler+0x14>)
 8001a2e:	f7ff fcf7 	bl	8001420 <timing>
	timing(&pos_timer);
 8001a32:	4803      	ldr	r0, [pc, #12]	; (8001a40 <SysTick_Handler+0x18>)
 8001a34:	f7ff fcf4 	bl	8001420 <timing>

}
 8001a38:	bf00      	nop
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	20000254 	.word	0x20000254
 8001a40:	20000260 	.word	0x20000260

08001a44 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void) {
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
	if (TIM2->SR & TIM_SR_UIF) {
 8001a48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a4c:	691b      	ldr	r3, [r3, #16]
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d007      	beq.n	8001a66 <TIM2_IRQHandler+0x22>
		TIM2->SR &= ~TIM_SR_UIF;
 8001a56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a5a:	691b      	ldr	r3, [r3, #16]
 8001a5c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a60:	f023 0301 	bic.w	r3, r3, #1
 8001a64:	6113      	str	r3, [r2, #16]
	}

	if (TIM2->SR & TIM_SR_CC1IF) {
 8001a66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a6a:	691b      	ldr	r3, [r3, #16]
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d007      	beq.n	8001a84 <TIM2_IRQHandler+0x40>
		TIM2->SR &= ~TIM_SR_CC1IF;
 8001a74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a78:	691b      	ldr	r3, [r3, #16]
 8001a7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a7e:	f023 0302 	bic.w	r3, r3, #2
 8001a82:	6113      	str	r3, [r2, #16]
	}

	if (TIM2->SR & TIM_SR_CC2IF) {
 8001a84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	f003 0304 	and.w	r3, r3, #4
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d007      	beq.n	8001aa2 <TIM2_IRQHandler+0x5e>
		TIM2->SR &= ~TIM_SR_CC2IF;
 8001a92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a96:	691b      	ldr	r3, [r3, #16]
 8001a98:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a9c:	f023 0304 	bic.w	r3, r3, #4
 8001aa0:	6113      	str	r3, [r2, #16]
	}
}
 8001aa2:	bf00      	nop
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <TIM3_IRQHandler>:

void TIM3_IRQHandler(void) {
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
	if (TIM3->SR & TIM_SR_UIF) {
 8001ab0:	4b0e      	ldr	r3, [pc, #56]	; (8001aec <TIM3_IRQHandler+0x40>)
 8001ab2:	691b      	ldr	r3, [r3, #16]
 8001ab4:	f003 0301 	and.w	r3, r3, #1
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d005      	beq.n	8001ac8 <TIM3_IRQHandler+0x1c>
		TIM3->SR &= ~TIM_SR_UIF;
 8001abc:	4b0b      	ldr	r3, [pc, #44]	; (8001aec <TIM3_IRQHandler+0x40>)
 8001abe:	691b      	ldr	r3, [r3, #16]
 8001ac0:	4a0a      	ldr	r2, [pc, #40]	; (8001aec <TIM3_IRQHandler+0x40>)
 8001ac2:	f023 0301 	bic.w	r3, r3, #1
 8001ac6:	6113      	str	r3, [r2, #16]
	}

	if (TIM3->SR & TIM_SR_CC2IF) {
 8001ac8:	4b08      	ldr	r3, [pc, #32]	; (8001aec <TIM3_IRQHandler+0x40>)
 8001aca:	691b      	ldr	r3, [r3, #16]
 8001acc:	f003 0304 	and.w	r3, r3, #4
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d005      	beq.n	8001ae0 <TIM3_IRQHandler+0x34>
		TIM3->SR &= ~TIM_SR_CC2IF;
 8001ad4:	4b05      	ldr	r3, [pc, #20]	; (8001aec <TIM3_IRQHandler+0x40>)
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	4a04      	ldr	r2, [pc, #16]	; (8001aec <TIM3_IRQHandler+0x40>)
 8001ada:	f023 0304 	bic.w	r3, r3, #4
 8001ade:	6113      	str	r3, [r2, #16]
	}
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	40000400 	.word	0x40000400

08001af0 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void) {
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
	if (TIM4->SR & TIM_SR_UIF) {
 8001af4:	4b11      	ldr	r3, [pc, #68]	; (8001b3c <TIM4_IRQHandler+0x4c>)
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	f003 0301 	and.w	r3, r3, #1
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d00b      	beq.n	8001b18 <TIM4_IRQHandler+0x28>
		fflush(stdout);
 8001b00:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <TIM4_IRQHandler+0x50>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f002 ff0c 	bl	8004924 <fflush>
		TIM4->SR &= ~TIM_SR_UIF;
 8001b0c:	4b0b      	ldr	r3, [pc, #44]	; (8001b3c <TIM4_IRQHandler+0x4c>)
 8001b0e:	691b      	ldr	r3, [r3, #16]
 8001b10:	4a0a      	ldr	r2, [pc, #40]	; (8001b3c <TIM4_IRQHandler+0x4c>)
 8001b12:	f023 0301 	bic.w	r3, r3, #1
 8001b16:	6113      	str	r3, [r2, #16]
	}

	if (TIM4->SR & TIM_SR_CC3IF) {
 8001b18:	4b08      	ldr	r3, [pc, #32]	; (8001b3c <TIM4_IRQHandler+0x4c>)
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	f003 0308 	and.w	r3, r3, #8
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d009      	beq.n	8001b38 <TIM4_IRQHandler+0x48>
		check_ultra_sonic_info(&record, &distance);
 8001b24:	4907      	ldr	r1, [pc, #28]	; (8001b44 <TIM4_IRQHandler+0x54>)
 8001b26:	4808      	ldr	r0, [pc, #32]	; (8001b48 <TIM4_IRQHandler+0x58>)
 8001b28:	f7ff fe80 	bl	800182c <check_ultra_sonic_info>
		TIM4->SR &= ~TIM_SR_CC3IF;
 8001b2c:	4b03      	ldr	r3, [pc, #12]	; (8001b3c <TIM4_IRQHandler+0x4c>)
 8001b2e:	691b      	ldr	r3, [r3, #16]
 8001b30:	4a02      	ldr	r2, [pc, #8]	; (8001b3c <TIM4_IRQHandler+0x4c>)
 8001b32:	f023 0308 	bic.w	r3, r3, #8
 8001b36:	6113      	str	r3, [r2, #16]
	}
}
 8001b38:	bf00      	nop
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40000800 	.word	0x40000800
 8001b40:	20000064 	.word	0x20000064
 8001b44:	20000200 	.word	0x20000200
 8001b48:	200001f0 	.word	0x200001f0

08001b4c <TIM1_BRK_TIM15_IRQHandler>:

void TIM15_IRQHandler(void) {
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
	if (TIM15->SR & TIM_SR_UIF) {
 8001b50:	4b14      	ldr	r3, [pc, #80]	; (8001ba4 <TIM1_BRK_TIM15_IRQHandler+0x58>)
 8001b52:	691b      	ldr	r3, [r3, #16]
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d005      	beq.n	8001b68 <TIM1_BRK_TIM15_IRQHandler+0x1c>
		TIM15->SR &= ~TIM_SR_UIF;
 8001b5c:	4b11      	ldr	r3, [pc, #68]	; (8001ba4 <TIM1_BRK_TIM15_IRQHandler+0x58>)
 8001b5e:	691b      	ldr	r3, [r3, #16]
 8001b60:	4a10      	ldr	r2, [pc, #64]	; (8001ba4 <TIM1_BRK_TIM15_IRQHandler+0x58>)
 8001b62:	f023 0301 	bic.w	r3, r3, #1
 8001b66:	6113      	str	r3, [r2, #16]
	}

	if (TIM15->SR & TIM_SR_CC1IF) {
 8001b68:	4b0e      	ldr	r3, [pc, #56]	; (8001ba4 <TIM1_BRK_TIM15_IRQHandler+0x58>)
 8001b6a:	691b      	ldr	r3, [r3, #16]
 8001b6c:	f003 0302 	and.w	r3, r3, #2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d005      	beq.n	8001b80 <TIM1_BRK_TIM15_IRQHandler+0x34>
		TIM15->SR &= ~TIM_SR_CC1IF;
 8001b74:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <TIM1_BRK_TIM15_IRQHandler+0x58>)
 8001b76:	691b      	ldr	r3, [r3, #16]
 8001b78:	4a0a      	ldr	r2, [pc, #40]	; (8001ba4 <TIM1_BRK_TIM15_IRQHandler+0x58>)
 8001b7a:	f023 0302 	bic.w	r3, r3, #2
 8001b7e:	6113      	str	r3, [r2, #16]
	}

	if (TIM15->SR & TIM_SR_CC2IF) {
 8001b80:	4b08      	ldr	r3, [pc, #32]	; (8001ba4 <TIM1_BRK_TIM15_IRQHandler+0x58>)
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	f003 0304 	and.w	r3, r3, #4
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d005      	beq.n	8001b98 <TIM1_BRK_TIM15_IRQHandler+0x4c>

		TIM15->SR &= ~TIM_SR_CC2IF;
 8001b8c:	4b05      	ldr	r3, [pc, #20]	; (8001ba4 <TIM1_BRK_TIM15_IRQHandler+0x58>)
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	4a04      	ldr	r2, [pc, #16]	; (8001ba4 <TIM1_BRK_TIM15_IRQHandler+0x58>)
 8001b92:	f023 0304 	bic.w	r3, r3, #4
 8001b96:	6113      	str	r3, [r2, #16]
	}

}
 8001b98:	bf00      	nop
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	40014000 	.word	0x40014000

08001ba8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b0a6      	sub	sp, #152	; 0x98
 8001bac:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001bae:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001bb2:	2228      	movs	r2, #40	; 0x28
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f003 f8de 	bl	8004d78 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001bbc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	605a      	str	r2, [r3, #4]
 8001bc6:	609a      	str	r2, [r3, #8]
 8001bc8:	60da      	str	r2, [r3, #12]
 8001bca:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001bcc:	1d3b      	adds	r3, r7, #4
 8001bce:	2258      	movs	r2, #88	; 0x58
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f003 f8d0 	bl	8004d78 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001bd8:	2302      	movs	r3, #2
 8001bda:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	67fb      	str	r3, [r7, #124]	; 0x7c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001be0:	2310      	movs	r3, #16
 8001be2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001be6:	2302      	movs	r3, #2
 8001be8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001bec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bf0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001c00:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001c04:	4618      	mov	r0, r3
 8001c06:	f000 fad3 	bl	80021b0 <HAL_RCC_OscConfig>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <SystemClock_Config+0x6c>
		Error_Handler();
 8001c10:	f000 f827 	bl	8001c62 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001c14:	230f      	movs	r3, #15
 8001c16:	65fb      	str	r3, [r7, #92]	; 0x5c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c24:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c26:	2300      	movs	r3, #0
 8001c28:	66fb      	str	r3, [r7, #108]	; 0x6c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001c2a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c2e:	2100      	movs	r1, #0
 8001c30:	4618      	mov	r0, r3
 8001c32:	f001 fb11 	bl	8003258 <HAL_RCC_ClockConfig>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <SystemClock_Config+0x98>
		Error_Handler();
 8001c3c:	f000 f811 	bl	8001c62 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c40:	2302      	movs	r3, #2
 8001c42:	607b      	str	r3, [r7, #4]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c44:	2300      	movs	r3, #0
 8001c46:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001c48:	1d3b      	adds	r3, r7, #4
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f001 fcea 	bl	8003624 <HAL_RCCEx_PeriphCLKConfig>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <SystemClock_Config+0xb2>
		Error_Handler();
 8001c56:	f000 f804 	bl	8001c62 <Error_Handler>
	}
}
 8001c5a:	bf00      	nop
 8001c5c:	3798      	adds	r7, #152	; 0x98
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001c62:	b480      	push	{r7}
 8001c64:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c66:	b672      	cpsid	i
}
 8001c68:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001c6a:	e7fe      	b.n	8001c6a <Error_Handler+0x8>

08001c6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c72:	4b0f      	ldr	r3, [pc, #60]	; (8001cb0 <HAL_MspInit+0x44>)
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	4a0e      	ldr	r2, [pc, #56]	; (8001cb0 <HAL_MspInit+0x44>)
 8001c78:	f043 0301 	orr.w	r3, r3, #1
 8001c7c:	6193      	str	r3, [r2, #24]
 8001c7e:	4b0c      	ldr	r3, [pc, #48]	; (8001cb0 <HAL_MspInit+0x44>)
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	607b      	str	r3, [r7, #4]
 8001c88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c8a:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <HAL_MspInit+0x44>)
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	4a08      	ldr	r2, [pc, #32]	; (8001cb0 <HAL_MspInit+0x44>)
 8001c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c94:	61d3      	str	r3, [r2, #28]
 8001c96:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <HAL_MspInit+0x44>)
 8001c98:	69db      	ldr	r3, [r3, #28]
 8001c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c9e:	603b      	str	r3, [r7, #0]
 8001ca0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ca2:	2007      	movs	r0, #7
 8001ca4:	f000 fa50 	bl	8002148 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ca8:	bf00      	nop
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40021000 	.word	0x40021000

08001cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cb8:	e7fe      	b.n	8001cb8 <NMI_Handler+0x4>

08001cba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cbe:	e7fe      	b.n	8001cbe <HardFault_Handler+0x4>

08001cc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cc4:	e7fe      	b.n	8001cc4 <MemManage_Handler+0x4>

08001cc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cca:	e7fe      	b.n	8001cca <BusFault_Handler+0x4>

08001ccc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cd0:	e7fe      	b.n	8001cd0 <UsageFault_Handler+0x4>

08001cd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ce4:	bf00      	nop
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr

08001cee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <ITM_SendChar>:
//ITM register address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint23_t *)0xE0000E00)

void ITM_SendChar(uint8_t ch)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	71fb      	strb	r3, [r7, #7]
	//enable TRCENA
	DEMCR |= (1<<24);
 8001d06:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <ITM_SendChar+0x3c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a0b      	ldr	r2, [pc, #44]	; (8001d38 <ITM_SendChar+0x3c>)
 8001d0c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d10:	6013      	str	r3, [r2, #0]

	//enable FIFO status int bit[0]
	while (!(ITM_STIMULUS_PORT0 & 1));
 8001d12:	bf00      	nop
 8001d14:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d0f8      	beq.n	8001d14 <ITM_SendChar+0x18>

	ITM_STIMULUS_PORT0 = ch;
 8001d22:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8001d26:	79fb      	ldrb	r3, [r7, #7]
 8001d28:	6013      	str	r3, [r2, #0]
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	e000edfc 	.word	0xe000edfc

08001d3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  return 1;
 8001d40:	2301      	movs	r3, #1
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <_kill>:

int _kill(int pid, int sig)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d56:	f003 f861 	bl	8004e1c <__errno>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2216      	movs	r2, #22
 8001d5e:	601a      	str	r2, [r3, #0]
  return -1;
 8001d60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3708      	adds	r7, #8
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <_exit>:

void _exit (int status)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d74:	f04f 31ff 	mov.w	r1, #4294967295
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f7ff ffe7 	bl	8001d4c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d7e:	e7fe      	b.n	8001d7e <_exit+0x12>

08001d80 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]
 8001d90:	e00a      	b.n	8001da8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d92:	f3af 8000 	nop.w
 8001d96:	4601      	mov	r1, r0
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	1c5a      	adds	r2, r3, #1
 8001d9c:	60ba      	str	r2, [r7, #8]
 8001d9e:	b2ca      	uxtb	r2, r1
 8001da0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	3301      	adds	r3, #1
 8001da6:	617b      	str	r3, [r7, #20]
 8001da8:	697a      	ldr	r2, [r7, #20]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	dbf0      	blt.n	8001d92 <_read+0x12>
  }

  return len;
 8001db0:	687b      	ldr	r3, [r7, #4]
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3718      	adds	r7, #24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b086      	sub	sp, #24
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	60f8      	str	r0, [r7, #12]
 8001dc2:	60b9      	str	r1, [r7, #8]
 8001dc4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	617b      	str	r3, [r7, #20]
 8001dca:	e009      	b.n	8001de0 <_write+0x26>
  {
   // __io_putchar(*ptr++);
	ITM_SendChar(*ptr++);
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	1c5a      	adds	r2, r3, #1
 8001dd0:	60ba      	str	r2, [r7, #8]
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff ff91 	bl	8001cfc <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	617b      	str	r3, [r7, #20]
 8001de0:	697a      	ldr	r2, [r7, #20]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	dbf1      	blt.n	8001dcc <_write+0x12>

  }
  return len;
 8001de8:	687b      	ldr	r3, [r7, #4]
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <_close>:

int _close(int file)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b083      	sub	sp, #12
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001dfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b083      	sub	sp, #12
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
 8001e12:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e1a:	605a      	str	r2, [r3, #4]
  return 0;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr

08001e2a <_isatty>:

int _isatty(int file)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	b083      	sub	sp, #12
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e32:	2301      	movs	r3, #1
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3714      	adds	r7, #20
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
	...

08001e5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e64:	4a14      	ldr	r2, [pc, #80]	; (8001eb8 <_sbrk+0x5c>)
 8001e66:	4b15      	ldr	r3, [pc, #84]	; (8001ebc <_sbrk+0x60>)
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e70:	4b13      	ldr	r3, [pc, #76]	; (8001ec0 <_sbrk+0x64>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d102      	bne.n	8001e7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e78:	4b11      	ldr	r3, [pc, #68]	; (8001ec0 <_sbrk+0x64>)
 8001e7a:	4a12      	ldr	r2, [pc, #72]	; (8001ec4 <_sbrk+0x68>)
 8001e7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e7e:	4b10      	ldr	r3, [pc, #64]	; (8001ec0 <_sbrk+0x64>)
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4413      	add	r3, r2
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d207      	bcs.n	8001e9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e8c:	f002 ffc6 	bl	8004e1c <__errno>
 8001e90:	4603      	mov	r3, r0
 8001e92:	220c      	movs	r2, #12
 8001e94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e96:	f04f 33ff 	mov.w	r3, #4294967295
 8001e9a:	e009      	b.n	8001eb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e9c:	4b08      	ldr	r3, [pc, #32]	; (8001ec0 <_sbrk+0x64>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ea2:	4b07      	ldr	r3, [pc, #28]	; (8001ec0 <_sbrk+0x64>)
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	4a05      	ldr	r2, [pc, #20]	; (8001ec0 <_sbrk+0x64>)
 8001eac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eae:	68fb      	ldr	r3, [r7, #12]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3718      	adds	r7, #24
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	20010000 	.word	0x20010000
 8001ebc:	00000400 	.word	0x00000400
 8001ec0:	2000026c 	.word	0x2000026c
 8001ec4:	200003c0 	.word	0x200003c0

08001ec8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ecc:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <SystemInit+0x20>)
 8001ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ed2:	4a05      	ldr	r2, [pc, #20]	; (8001ee8 <SystemInit+0x20>)
 8001ed4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ed8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001edc:	bf00      	nop
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	e000ed00 	.word	0xe000ed00

08001eec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001eec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f24 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ef0:	f7ff ffea 	bl	8001ec8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ef4:	480c      	ldr	r0, [pc, #48]	; (8001f28 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ef6:	490d      	ldr	r1, [pc, #52]	; (8001f2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ef8:	4a0d      	ldr	r2, [pc, #52]	; (8001f30 <LoopForever+0xe>)
  movs r3, #0
 8001efa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001efc:	e002      	b.n	8001f04 <LoopCopyDataInit>

08001efe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001efe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f02:	3304      	adds	r3, #4

08001f04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f08:	d3f9      	bcc.n	8001efe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f0a:	4a0a      	ldr	r2, [pc, #40]	; (8001f34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f0c:	4c0a      	ldr	r4, [pc, #40]	; (8001f38 <LoopForever+0x16>)
  movs r3, #0
 8001f0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f10:	e001      	b.n	8001f16 <LoopFillZerobss>

08001f12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f14:	3204      	adds	r2, #4

08001f16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f18:	d3fb      	bcc.n	8001f12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f1a:	f002 ff85 	bl	8004e28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f1e:	f7ff fcc5 	bl	80018ac <main>

08001f22 <LoopForever>:

LoopForever:
    b LoopForever
 8001f22:	e7fe      	b.n	8001f22 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f24:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001f28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f2c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001f30:	080088ac 	.word	0x080088ac
  ldr r2, =_sbss
 8001f34:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001f38:	200003c0 	.word	0x200003c0

08001f3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f3c:	e7fe      	b.n	8001f3c <ADC1_2_IRQHandler>
	...

08001f40 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f44:	4b08      	ldr	r3, [pc, #32]	; (8001f68 <HAL_Init+0x28>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a07      	ldr	r2, [pc, #28]	; (8001f68 <HAL_Init+0x28>)
 8001f4a:	f043 0310 	orr.w	r3, r3, #16
 8001f4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f50:	2003      	movs	r0, #3
 8001f52:	f000 f8f9 	bl	8002148 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f56:	2000      	movs	r0, #0
 8001f58:	f000 f808 	bl	8001f6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f5c:	f7ff fe86 	bl	8001c6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	40022000 	.word	0x40022000

08001f6c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f74:	4b12      	ldr	r3, [pc, #72]	; (8001fc0 <HAL_InitTick+0x54>)
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	4b12      	ldr	r3, [pc, #72]	; (8001fc4 <HAL_InitTick+0x58>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f82:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f000 f903 	bl	8002196 <HAL_SYSTICK_Config>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e00e      	b.n	8001fb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2b0f      	cmp	r3, #15
 8001f9e:	d80a      	bhi.n	8001fb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	6879      	ldr	r1, [r7, #4]
 8001fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa8:	f000 f8d9 	bl	800215e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fac:	4a06      	ldr	r2, [pc, #24]	; (8001fc8 <HAL_InitTick+0x5c>)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	e000      	b.n	8001fb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	20000000 	.word	0x20000000
 8001fc4:	20000008 	.word	0x20000008
 8001fc8:	20000004 	.word	0x20000004

08001fcc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  return uwTick;  
 8001fd0:	4b03      	ldr	r3, [pc, #12]	; (8001fe0 <HAL_GetTick+0x14>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	20000270 	.word	0x20000270

08001fe4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ff4:	4b0c      	ldr	r3, [pc, #48]	; (8002028 <__NVIC_SetPriorityGrouping+0x44>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002000:	4013      	ands	r3, r2
 8002002:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800200c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002010:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002014:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002016:	4a04      	ldr	r2, [pc, #16]	; (8002028 <__NVIC_SetPriorityGrouping+0x44>)
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	60d3      	str	r3, [r2, #12]
}
 800201c:	bf00      	nop
 800201e:	3714      	adds	r7, #20
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	e000ed00 	.word	0xe000ed00

0800202c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002030:	4b04      	ldr	r3, [pc, #16]	; (8002044 <__NVIC_GetPriorityGrouping+0x18>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	0a1b      	lsrs	r3, r3, #8
 8002036:	f003 0307 	and.w	r3, r3, #7
}
 800203a:	4618      	mov	r0, r3
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	e000ed00 	.word	0xe000ed00

08002048 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	6039      	str	r1, [r7, #0]
 8002052:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002058:	2b00      	cmp	r3, #0
 800205a:	db0a      	blt.n	8002072 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	b2da      	uxtb	r2, r3
 8002060:	490c      	ldr	r1, [pc, #48]	; (8002094 <__NVIC_SetPriority+0x4c>)
 8002062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002066:	0112      	lsls	r2, r2, #4
 8002068:	b2d2      	uxtb	r2, r2
 800206a:	440b      	add	r3, r1
 800206c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002070:	e00a      	b.n	8002088 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	b2da      	uxtb	r2, r3
 8002076:	4908      	ldr	r1, [pc, #32]	; (8002098 <__NVIC_SetPriority+0x50>)
 8002078:	79fb      	ldrb	r3, [r7, #7]
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	3b04      	subs	r3, #4
 8002080:	0112      	lsls	r2, r2, #4
 8002082:	b2d2      	uxtb	r2, r2
 8002084:	440b      	add	r3, r1
 8002086:	761a      	strb	r2, [r3, #24]
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	e000e100 	.word	0xe000e100
 8002098:	e000ed00 	.word	0xe000ed00

0800209c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800209c:	b480      	push	{r7}
 800209e:	b089      	sub	sp, #36	; 0x24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	f1c3 0307 	rsb	r3, r3, #7
 80020b6:	2b04      	cmp	r3, #4
 80020b8:	bf28      	it	cs
 80020ba:	2304      	movcs	r3, #4
 80020bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	3304      	adds	r3, #4
 80020c2:	2b06      	cmp	r3, #6
 80020c4:	d902      	bls.n	80020cc <NVIC_EncodePriority+0x30>
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	3b03      	subs	r3, #3
 80020ca:	e000      	b.n	80020ce <NVIC_EncodePriority+0x32>
 80020cc:	2300      	movs	r3, #0
 80020ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d0:	f04f 32ff 	mov.w	r2, #4294967295
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	43da      	mvns	r2, r3
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	401a      	ands	r2, r3
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020e4:	f04f 31ff 	mov.w	r1, #4294967295
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	fa01 f303 	lsl.w	r3, r1, r3
 80020ee:	43d9      	mvns	r1, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f4:	4313      	orrs	r3, r2
         );
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3724      	adds	r7, #36	; 0x24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
	...

08002104 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3b01      	subs	r3, #1
 8002110:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002114:	d301      	bcc.n	800211a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002116:	2301      	movs	r3, #1
 8002118:	e00f      	b.n	800213a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800211a:	4a0a      	ldr	r2, [pc, #40]	; (8002144 <SysTick_Config+0x40>)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	3b01      	subs	r3, #1
 8002120:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002122:	210f      	movs	r1, #15
 8002124:	f04f 30ff 	mov.w	r0, #4294967295
 8002128:	f7ff ff8e 	bl	8002048 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800212c:	4b05      	ldr	r3, [pc, #20]	; (8002144 <SysTick_Config+0x40>)
 800212e:	2200      	movs	r2, #0
 8002130:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002132:	4b04      	ldr	r3, [pc, #16]	; (8002144 <SysTick_Config+0x40>)
 8002134:	2207      	movs	r2, #7
 8002136:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	e000e010 	.word	0xe000e010

08002148 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f7ff ff47 	bl	8001fe4 <__NVIC_SetPriorityGrouping>
}
 8002156:	bf00      	nop
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b086      	sub	sp, #24
 8002162:	af00      	add	r7, sp, #0
 8002164:	4603      	mov	r3, r0
 8002166:	60b9      	str	r1, [r7, #8]
 8002168:	607a      	str	r2, [r7, #4]
 800216a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800216c:	2300      	movs	r3, #0
 800216e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002170:	f7ff ff5c 	bl	800202c <__NVIC_GetPriorityGrouping>
 8002174:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	68b9      	ldr	r1, [r7, #8]
 800217a:	6978      	ldr	r0, [r7, #20]
 800217c:	f7ff ff8e 	bl	800209c <NVIC_EncodePriority>
 8002180:	4602      	mov	r2, r0
 8002182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002186:	4611      	mov	r1, r2
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff ff5d 	bl	8002048 <__NVIC_SetPriority>
}
 800218e:	bf00      	nop
 8002190:	3718      	adds	r7, #24
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b082      	sub	sp, #8
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7ff ffb0 	bl	8002104 <SysTick_Config>
 80021a4:	4603      	mov	r3, r0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
	...

080021b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021bc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80021c0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021c6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d102      	bne.n	80021d6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	f001 b83a 	b.w	800324a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021da:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f000 816f 	beq.w	80024ca <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80021ec:	4bb5      	ldr	r3, [pc, #724]	; (80024c4 <HAL_RCC_OscConfig+0x314>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f003 030c 	and.w	r3, r3, #12
 80021f4:	2b04      	cmp	r3, #4
 80021f6:	d00c      	beq.n	8002212 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021f8:	4bb2      	ldr	r3, [pc, #712]	; (80024c4 <HAL_RCC_OscConfig+0x314>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f003 030c 	and.w	r3, r3, #12
 8002200:	2b08      	cmp	r3, #8
 8002202:	d15c      	bne.n	80022be <HAL_RCC_OscConfig+0x10e>
 8002204:	4baf      	ldr	r3, [pc, #700]	; (80024c4 <HAL_RCC_OscConfig+0x314>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800220c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002210:	d155      	bne.n	80022be <HAL_RCC_OscConfig+0x10e>
 8002212:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002216:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800221e:	fa93 f3a3 	rbit	r3, r3
 8002222:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002226:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800222a:	fab3 f383 	clz	r3, r3
 800222e:	b2db      	uxtb	r3, r3
 8002230:	095b      	lsrs	r3, r3, #5
 8002232:	b2db      	uxtb	r3, r3
 8002234:	f043 0301 	orr.w	r3, r3, #1
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b01      	cmp	r3, #1
 800223c:	d102      	bne.n	8002244 <HAL_RCC_OscConfig+0x94>
 800223e:	4ba1      	ldr	r3, [pc, #644]	; (80024c4 <HAL_RCC_OscConfig+0x314>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	e015      	b.n	8002270 <HAL_RCC_OscConfig+0xc0>
 8002244:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002248:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002250:	fa93 f3a3 	rbit	r3, r3
 8002254:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002258:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800225c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002260:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002264:	fa93 f3a3 	rbit	r3, r3
 8002268:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800226c:	4b95      	ldr	r3, [pc, #596]	; (80024c4 <HAL_RCC_OscConfig+0x314>)
 800226e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002270:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002274:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002278:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800227c:	fa92 f2a2 	rbit	r2, r2
 8002280:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8002284:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002288:	fab2 f282 	clz	r2, r2
 800228c:	b2d2      	uxtb	r2, r2
 800228e:	f042 0220 	orr.w	r2, r2, #32
 8002292:	b2d2      	uxtb	r2, r2
 8002294:	f002 021f 	and.w	r2, r2, #31
 8002298:	2101      	movs	r1, #1
 800229a:	fa01 f202 	lsl.w	r2, r1, r2
 800229e:	4013      	ands	r3, r2
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	f000 8111 	beq.w	80024c8 <HAL_RCC_OscConfig+0x318>
 80022a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022aa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f040 8108 	bne.w	80024c8 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	f000 bfc6 	b.w	800324a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022c2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022ce:	d106      	bne.n	80022de <HAL_RCC_OscConfig+0x12e>
 80022d0:	4b7c      	ldr	r3, [pc, #496]	; (80024c4 <HAL_RCC_OscConfig+0x314>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a7b      	ldr	r2, [pc, #492]	; (80024c4 <HAL_RCC_OscConfig+0x314>)
 80022d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022da:	6013      	str	r3, [r2, #0]
 80022dc:	e036      	b.n	800234c <HAL_RCC_OscConfig+0x19c>
 80022de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022e2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d10c      	bne.n	8002308 <HAL_RCC_OscConfig+0x158>
 80022ee:	4b75      	ldr	r3, [pc, #468]	; (80024c4 <HAL_RCC_OscConfig+0x314>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a74      	ldr	r2, [pc, #464]	; (80024c4 <HAL_RCC_OscConfig+0x314>)
 80022f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022f8:	6013      	str	r3, [r2, #0]
 80022fa:	4b72      	ldr	r3, [pc, #456]	; (80024c4 <HAL_RCC_OscConfig+0x314>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a71      	ldr	r2, [pc, #452]	; (80024c4 <HAL_RCC_OscConfig+0x314>)
 8002300:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002304:	6013      	str	r3, [r2, #0]
 8002306:	e021      	b.n	800234c <HAL_RCC_OscConfig+0x19c>
 8002308:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800230c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002318:	d10c      	bne.n	8002334 <HAL_RCC_OscConfig+0x184>
 800231a:	4b6a      	ldr	r3, [pc, #424]	; (80024c4 <HAL_RCC_OscConfig+0x314>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a69      	ldr	r2, [pc, #420]	; (80024c4 <HAL_RCC_OscConfig+0x314>)
 8002320:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002324:	6013      	str	r3, [r2, #0]
 8002326:	4b67      	ldr	r3, [pc, #412]	; (80024c4 <HAL_RCC_OscConfig+0x314>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a66      	ldr	r2, [pc, #408]	; (80024c4 <HAL_RCC_OscConfig+0x314>)
 800232c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002330:	6013      	str	r3, [r2, #0]
 8002332:	e00b      	b.n	800234c <HAL_RCC_OscConfig+0x19c>
 8002334:	4b63      	ldr	r3, [pc, #396]	; (80024c4 <HAL_RCC_OscConfig+0x314>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a62      	ldr	r2, [pc, #392]	; (80024c4 <HAL_RCC_OscConfig+0x314>)
 800233a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800233e:	6013      	str	r3, [r2, #0]
 8002340:	4b60      	ldr	r3, [pc, #384]	; (80024c4 <HAL_RCC_OscConfig+0x314>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a5f      	ldr	r2, [pc, #380]	; (80024c4 <HAL_RCC_OscConfig+0x314>)
 8002346:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800234a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800234c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002350:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d059      	beq.n	8002410 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800235c:	f7ff fe36 	bl	8001fcc <HAL_GetTick>
 8002360:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002364:	e00a      	b.n	800237c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002366:	f7ff fe31 	bl	8001fcc <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b64      	cmp	r3, #100	; 0x64
 8002374:	d902      	bls.n	800237c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	f000 bf67 	b.w	800324a <HAL_RCC_OscConfig+0x109a>
 800237c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002380:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002384:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002388:	fa93 f3a3 	rbit	r3, r3
 800238c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002390:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002394:	fab3 f383 	clz	r3, r3
 8002398:	b2db      	uxtb	r3, r3
 800239a:	095b      	lsrs	r3, r3, #5
 800239c:	b2db      	uxtb	r3, r3
 800239e:	f043 0301 	orr.w	r3, r3, #1
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d102      	bne.n	80023ae <HAL_RCC_OscConfig+0x1fe>
 80023a8:	4b46      	ldr	r3, [pc, #280]	; (80024c4 <HAL_RCC_OscConfig+0x314>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	e015      	b.n	80023da <HAL_RCC_OscConfig+0x22a>
 80023ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023b2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80023ba:	fa93 f3a3 	rbit	r3, r3
 80023be:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80023c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023c6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80023ca:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80023ce:	fa93 f3a3 	rbit	r3, r3
 80023d2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80023d6:	4b3b      	ldr	r3, [pc, #236]	; (80024c4 <HAL_RCC_OscConfig+0x314>)
 80023d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023de:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80023e2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80023e6:	fa92 f2a2 	rbit	r2, r2
 80023ea:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80023ee:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80023f2:	fab2 f282 	clz	r2, r2
 80023f6:	b2d2      	uxtb	r2, r2
 80023f8:	f042 0220 	orr.w	r2, r2, #32
 80023fc:	b2d2      	uxtb	r2, r2
 80023fe:	f002 021f 	and.w	r2, r2, #31
 8002402:	2101      	movs	r1, #1
 8002404:	fa01 f202 	lsl.w	r2, r1, r2
 8002408:	4013      	ands	r3, r2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d0ab      	beq.n	8002366 <HAL_RCC_OscConfig+0x1b6>
 800240e:	e05c      	b.n	80024ca <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002410:	f7ff fddc 	bl	8001fcc <HAL_GetTick>
 8002414:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002418:	e00a      	b.n	8002430 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800241a:	f7ff fdd7 	bl	8001fcc <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b64      	cmp	r3, #100	; 0x64
 8002428:	d902      	bls.n	8002430 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	f000 bf0d 	b.w	800324a <HAL_RCC_OscConfig+0x109a>
 8002430:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002434:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002438:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800243c:	fa93 f3a3 	rbit	r3, r3
 8002440:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002444:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002448:	fab3 f383 	clz	r3, r3
 800244c:	b2db      	uxtb	r3, r3
 800244e:	095b      	lsrs	r3, r3, #5
 8002450:	b2db      	uxtb	r3, r3
 8002452:	f043 0301 	orr.w	r3, r3, #1
 8002456:	b2db      	uxtb	r3, r3
 8002458:	2b01      	cmp	r3, #1
 800245a:	d102      	bne.n	8002462 <HAL_RCC_OscConfig+0x2b2>
 800245c:	4b19      	ldr	r3, [pc, #100]	; (80024c4 <HAL_RCC_OscConfig+0x314>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	e015      	b.n	800248e <HAL_RCC_OscConfig+0x2de>
 8002462:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002466:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800246e:	fa93 f3a3 	rbit	r3, r3
 8002472:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002476:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800247a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800247e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002482:	fa93 f3a3 	rbit	r3, r3
 8002486:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800248a:	4b0e      	ldr	r3, [pc, #56]	; (80024c4 <HAL_RCC_OscConfig+0x314>)
 800248c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002492:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002496:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800249a:	fa92 f2a2 	rbit	r2, r2
 800249e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80024a2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80024a6:	fab2 f282 	clz	r2, r2
 80024aa:	b2d2      	uxtb	r2, r2
 80024ac:	f042 0220 	orr.w	r2, r2, #32
 80024b0:	b2d2      	uxtb	r2, r2
 80024b2:	f002 021f 	and.w	r2, r2, #31
 80024b6:	2101      	movs	r1, #1
 80024b8:	fa01 f202 	lsl.w	r2, r1, r2
 80024bc:	4013      	ands	r3, r2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1ab      	bne.n	800241a <HAL_RCC_OscConfig+0x26a>
 80024c2:	e002      	b.n	80024ca <HAL_RCC_OscConfig+0x31a>
 80024c4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024ce:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f000 817f 	beq.w	80027de <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80024e0:	4ba7      	ldr	r3, [pc, #668]	; (8002780 <HAL_RCC_OscConfig+0x5d0>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f003 030c 	and.w	r3, r3, #12
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d00c      	beq.n	8002506 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80024ec:	4ba4      	ldr	r3, [pc, #656]	; (8002780 <HAL_RCC_OscConfig+0x5d0>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f003 030c 	and.w	r3, r3, #12
 80024f4:	2b08      	cmp	r3, #8
 80024f6:	d173      	bne.n	80025e0 <HAL_RCC_OscConfig+0x430>
 80024f8:	4ba1      	ldr	r3, [pc, #644]	; (8002780 <HAL_RCC_OscConfig+0x5d0>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002500:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002504:	d16c      	bne.n	80025e0 <HAL_RCC_OscConfig+0x430>
 8002506:	2302      	movs	r3, #2
 8002508:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002510:	fa93 f3a3 	rbit	r3, r3
 8002514:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002518:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800251c:	fab3 f383 	clz	r3, r3
 8002520:	b2db      	uxtb	r3, r3
 8002522:	095b      	lsrs	r3, r3, #5
 8002524:	b2db      	uxtb	r3, r3
 8002526:	f043 0301 	orr.w	r3, r3, #1
 800252a:	b2db      	uxtb	r3, r3
 800252c:	2b01      	cmp	r3, #1
 800252e:	d102      	bne.n	8002536 <HAL_RCC_OscConfig+0x386>
 8002530:	4b93      	ldr	r3, [pc, #588]	; (8002780 <HAL_RCC_OscConfig+0x5d0>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	e013      	b.n	800255e <HAL_RCC_OscConfig+0x3ae>
 8002536:	2302      	movs	r3, #2
 8002538:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002540:	fa93 f3a3 	rbit	r3, r3
 8002544:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002548:	2302      	movs	r3, #2
 800254a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800254e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002552:	fa93 f3a3 	rbit	r3, r3
 8002556:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800255a:	4b89      	ldr	r3, [pc, #548]	; (8002780 <HAL_RCC_OscConfig+0x5d0>)
 800255c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255e:	2202      	movs	r2, #2
 8002560:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002564:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002568:	fa92 f2a2 	rbit	r2, r2
 800256c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002570:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002574:	fab2 f282 	clz	r2, r2
 8002578:	b2d2      	uxtb	r2, r2
 800257a:	f042 0220 	orr.w	r2, r2, #32
 800257e:	b2d2      	uxtb	r2, r2
 8002580:	f002 021f 	and.w	r2, r2, #31
 8002584:	2101      	movs	r1, #1
 8002586:	fa01 f202 	lsl.w	r2, r1, r2
 800258a:	4013      	ands	r3, r2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d00a      	beq.n	80025a6 <HAL_RCC_OscConfig+0x3f6>
 8002590:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002594:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d002      	beq.n	80025a6 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	f000 be52 	b.w	800324a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a6:	4b76      	ldr	r3, [pc, #472]	; (8002780 <HAL_RCC_OscConfig+0x5d0>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025b2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	21f8      	movs	r1, #248	; 0xf8
 80025bc:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c0:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80025c4:	fa91 f1a1 	rbit	r1, r1
 80025c8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80025cc:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80025d0:	fab1 f181 	clz	r1, r1
 80025d4:	b2c9      	uxtb	r1, r1
 80025d6:	408b      	lsls	r3, r1
 80025d8:	4969      	ldr	r1, [pc, #420]	; (8002780 <HAL_RCC_OscConfig+0x5d0>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025de:	e0fe      	b.n	80027de <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025e4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f000 8088 	beq.w	8002702 <HAL_RCC_OscConfig+0x552>
 80025f2:	2301      	movs	r3, #1
 80025f4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80025fc:	fa93 f3a3 	rbit	r3, r3
 8002600:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002604:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002608:	fab3 f383 	clz	r3, r3
 800260c:	b2db      	uxtb	r3, r3
 800260e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002612:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	461a      	mov	r2, r3
 800261a:	2301      	movs	r3, #1
 800261c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261e:	f7ff fcd5 	bl	8001fcc <HAL_GetTick>
 8002622:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002626:	e00a      	b.n	800263e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002628:	f7ff fcd0 	bl	8001fcc <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d902      	bls.n	800263e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	f000 be06 	b.w	800324a <HAL_RCC_OscConfig+0x109a>
 800263e:	2302      	movs	r3, #2
 8002640:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002644:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002648:	fa93 f3a3 	rbit	r3, r3
 800264c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002650:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002654:	fab3 f383 	clz	r3, r3
 8002658:	b2db      	uxtb	r3, r3
 800265a:	095b      	lsrs	r3, r3, #5
 800265c:	b2db      	uxtb	r3, r3
 800265e:	f043 0301 	orr.w	r3, r3, #1
 8002662:	b2db      	uxtb	r3, r3
 8002664:	2b01      	cmp	r3, #1
 8002666:	d102      	bne.n	800266e <HAL_RCC_OscConfig+0x4be>
 8002668:	4b45      	ldr	r3, [pc, #276]	; (8002780 <HAL_RCC_OscConfig+0x5d0>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	e013      	b.n	8002696 <HAL_RCC_OscConfig+0x4e6>
 800266e:	2302      	movs	r3, #2
 8002670:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002674:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002678:	fa93 f3a3 	rbit	r3, r3
 800267c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002680:	2302      	movs	r3, #2
 8002682:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002686:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800268a:	fa93 f3a3 	rbit	r3, r3
 800268e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002692:	4b3b      	ldr	r3, [pc, #236]	; (8002780 <HAL_RCC_OscConfig+0x5d0>)
 8002694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002696:	2202      	movs	r2, #2
 8002698:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800269c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80026a0:	fa92 f2a2 	rbit	r2, r2
 80026a4:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80026a8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80026ac:	fab2 f282 	clz	r2, r2
 80026b0:	b2d2      	uxtb	r2, r2
 80026b2:	f042 0220 	orr.w	r2, r2, #32
 80026b6:	b2d2      	uxtb	r2, r2
 80026b8:	f002 021f 	and.w	r2, r2, #31
 80026bc:	2101      	movs	r1, #1
 80026be:	fa01 f202 	lsl.w	r2, r1, r2
 80026c2:	4013      	ands	r3, r2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d0af      	beq.n	8002628 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026c8:	4b2d      	ldr	r3, [pc, #180]	; (8002780 <HAL_RCC_OscConfig+0x5d0>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026d4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	21f8      	movs	r1, #248	; 0xf8
 80026de:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e2:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80026e6:	fa91 f1a1 	rbit	r1, r1
 80026ea:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80026ee:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80026f2:	fab1 f181 	clz	r1, r1
 80026f6:	b2c9      	uxtb	r1, r1
 80026f8:	408b      	lsls	r3, r1
 80026fa:	4921      	ldr	r1, [pc, #132]	; (8002780 <HAL_RCC_OscConfig+0x5d0>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	600b      	str	r3, [r1, #0]
 8002700:	e06d      	b.n	80027de <HAL_RCC_OscConfig+0x62e>
 8002702:	2301      	movs	r3, #1
 8002704:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002708:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800270c:	fa93 f3a3 	rbit	r3, r3
 8002710:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002714:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002718:	fab3 f383 	clz	r3, r3
 800271c:	b2db      	uxtb	r3, r3
 800271e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002722:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	461a      	mov	r2, r3
 800272a:	2300      	movs	r3, #0
 800272c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800272e:	f7ff fc4d 	bl	8001fcc <HAL_GetTick>
 8002732:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002736:	e00a      	b.n	800274e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002738:	f7ff fc48 	bl	8001fcc <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d902      	bls.n	800274e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	f000 bd7e 	b.w	800324a <HAL_RCC_OscConfig+0x109a>
 800274e:	2302      	movs	r3, #2
 8002750:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002754:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002758:	fa93 f3a3 	rbit	r3, r3
 800275c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002760:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002764:	fab3 f383 	clz	r3, r3
 8002768:	b2db      	uxtb	r3, r3
 800276a:	095b      	lsrs	r3, r3, #5
 800276c:	b2db      	uxtb	r3, r3
 800276e:	f043 0301 	orr.w	r3, r3, #1
 8002772:	b2db      	uxtb	r3, r3
 8002774:	2b01      	cmp	r3, #1
 8002776:	d105      	bne.n	8002784 <HAL_RCC_OscConfig+0x5d4>
 8002778:	4b01      	ldr	r3, [pc, #4]	; (8002780 <HAL_RCC_OscConfig+0x5d0>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	e016      	b.n	80027ac <HAL_RCC_OscConfig+0x5fc>
 800277e:	bf00      	nop
 8002780:	40021000 	.word	0x40021000
 8002784:	2302      	movs	r3, #2
 8002786:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800278e:	fa93 f3a3 	rbit	r3, r3
 8002792:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002796:	2302      	movs	r3, #2
 8002798:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800279c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80027a0:	fa93 f3a3 	rbit	r3, r3
 80027a4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80027a8:	4bbf      	ldr	r3, [pc, #764]	; (8002aa8 <HAL_RCC_OscConfig+0x8f8>)
 80027aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ac:	2202      	movs	r2, #2
 80027ae:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80027b2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80027b6:	fa92 f2a2 	rbit	r2, r2
 80027ba:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80027be:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80027c2:	fab2 f282 	clz	r2, r2
 80027c6:	b2d2      	uxtb	r2, r2
 80027c8:	f042 0220 	orr.w	r2, r2, #32
 80027cc:	b2d2      	uxtb	r2, r2
 80027ce:	f002 021f 	and.w	r2, r2, #31
 80027d2:	2101      	movs	r1, #1
 80027d4:	fa01 f202 	lsl.w	r2, r1, r2
 80027d8:	4013      	ands	r3, r2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1ac      	bne.n	8002738 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027e2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0308 	and.w	r3, r3, #8
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	f000 8113 	beq.w	8002a1a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027f8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	695b      	ldr	r3, [r3, #20]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d07c      	beq.n	80028fe <HAL_RCC_OscConfig+0x74e>
 8002804:	2301      	movs	r3, #1
 8002806:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800280e:	fa93 f3a3 	rbit	r3, r3
 8002812:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002816:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800281a:	fab3 f383 	clz	r3, r3
 800281e:	b2db      	uxtb	r3, r3
 8002820:	461a      	mov	r2, r3
 8002822:	4ba2      	ldr	r3, [pc, #648]	; (8002aac <HAL_RCC_OscConfig+0x8fc>)
 8002824:	4413      	add	r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	461a      	mov	r2, r3
 800282a:	2301      	movs	r3, #1
 800282c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800282e:	f7ff fbcd 	bl	8001fcc <HAL_GetTick>
 8002832:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002836:	e00a      	b.n	800284e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002838:	f7ff fbc8 	bl	8001fcc <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d902      	bls.n	800284e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	f000 bcfe 	b.w	800324a <HAL_RCC_OscConfig+0x109a>
 800284e:	2302      	movs	r3, #2
 8002850:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002854:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002858:	fa93 f2a3 	rbit	r2, r3
 800285c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002860:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002864:	601a      	str	r2, [r3, #0]
 8002866:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800286a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800286e:	2202      	movs	r2, #2
 8002870:	601a      	str	r2, [r3, #0]
 8002872:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002876:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	fa93 f2a3 	rbit	r2, r3
 8002880:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002884:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002888:	601a      	str	r2, [r3, #0]
 800288a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800288e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002892:	2202      	movs	r2, #2
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800289a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	fa93 f2a3 	rbit	r2, r3
 80028a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028a8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80028ac:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ae:	4b7e      	ldr	r3, [pc, #504]	; (8002aa8 <HAL_RCC_OscConfig+0x8f8>)
 80028b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028b6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80028ba:	2102      	movs	r1, #2
 80028bc:	6019      	str	r1, [r3, #0]
 80028be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028c2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	fa93 f1a3 	rbit	r1, r3
 80028cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028d0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80028d4:	6019      	str	r1, [r3, #0]
  return result;
 80028d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028da:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	fab3 f383 	clz	r3, r3
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	f003 031f 	and.w	r3, r3, #31
 80028f0:	2101      	movs	r1, #1
 80028f2:	fa01 f303 	lsl.w	r3, r1, r3
 80028f6:	4013      	ands	r3, r2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d09d      	beq.n	8002838 <HAL_RCC_OscConfig+0x688>
 80028fc:	e08d      	b.n	8002a1a <HAL_RCC_OscConfig+0x86a>
 80028fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002902:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002906:	2201      	movs	r2, #1
 8002908:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800290e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	fa93 f2a3 	rbit	r2, r3
 8002918:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800291c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002920:	601a      	str	r2, [r3, #0]
  return result;
 8002922:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002926:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800292a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800292c:	fab3 f383 	clz	r3, r3
 8002930:	b2db      	uxtb	r3, r3
 8002932:	461a      	mov	r2, r3
 8002934:	4b5d      	ldr	r3, [pc, #372]	; (8002aac <HAL_RCC_OscConfig+0x8fc>)
 8002936:	4413      	add	r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	461a      	mov	r2, r3
 800293c:	2300      	movs	r3, #0
 800293e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002940:	f7ff fb44 	bl	8001fcc <HAL_GetTick>
 8002944:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002948:	e00a      	b.n	8002960 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800294a:	f7ff fb3f 	bl	8001fcc <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d902      	bls.n	8002960 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	f000 bc75 	b.w	800324a <HAL_RCC_OscConfig+0x109a>
 8002960:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002964:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002968:	2202      	movs	r2, #2
 800296a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002970:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	fa93 f2a3 	rbit	r2, r3
 800297a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800297e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002988:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800298c:	2202      	movs	r2, #2
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002994:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	fa93 f2a3 	rbit	r2, r3
 800299e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80029a6:	601a      	str	r2, [r3, #0]
 80029a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029ac:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80029b0:	2202      	movs	r2, #2
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029b8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	fa93 f2a3 	rbit	r2, r3
 80029c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029c6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80029ca:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029cc:	4b36      	ldr	r3, [pc, #216]	; (8002aa8 <HAL_RCC_OscConfig+0x8f8>)
 80029ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029d4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80029d8:	2102      	movs	r1, #2
 80029da:	6019      	str	r1, [r3, #0]
 80029dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029e0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	fa93 f1a3 	rbit	r1, r3
 80029ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029ee:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80029f2:	6019      	str	r1, [r3, #0]
  return result;
 80029f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029f8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	fab3 f383 	clz	r3, r3
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	f003 031f 	and.w	r3, r3, #31
 8002a0e:	2101      	movs	r1, #1
 8002a10:	fa01 f303 	lsl.w	r3, r1, r3
 8002a14:	4013      	ands	r3, r2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d197      	bne.n	800294a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a1e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0304 	and.w	r3, r3, #4
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f000 81a5 	beq.w	8002d7a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a30:	2300      	movs	r3, #0
 8002a32:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a36:	4b1c      	ldr	r3, [pc, #112]	; (8002aa8 <HAL_RCC_OscConfig+0x8f8>)
 8002a38:	69db      	ldr	r3, [r3, #28]
 8002a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d116      	bne.n	8002a70 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a42:	4b19      	ldr	r3, [pc, #100]	; (8002aa8 <HAL_RCC_OscConfig+0x8f8>)
 8002a44:	69db      	ldr	r3, [r3, #28]
 8002a46:	4a18      	ldr	r2, [pc, #96]	; (8002aa8 <HAL_RCC_OscConfig+0x8f8>)
 8002a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a4c:	61d3      	str	r3, [r2, #28]
 8002a4e:	4b16      	ldr	r3, [pc, #88]	; (8002aa8 <HAL_RCC_OscConfig+0x8f8>)
 8002a50:	69db      	ldr	r3, [r3, #28]
 8002a52:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002a56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a5e:	601a      	str	r2, [r3, #0]
 8002a60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a64:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a68:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a70:	4b0f      	ldr	r3, [pc, #60]	; (8002ab0 <HAL_RCC_OscConfig+0x900>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d121      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a7c:	4b0c      	ldr	r3, [pc, #48]	; (8002ab0 <HAL_RCC_OscConfig+0x900>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a0b      	ldr	r2, [pc, #44]	; (8002ab0 <HAL_RCC_OscConfig+0x900>)
 8002a82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a86:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a88:	f7ff faa0 	bl	8001fcc <HAL_GetTick>
 8002a8c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a90:	e010      	b.n	8002ab4 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a92:	f7ff fa9b 	bl	8001fcc <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b64      	cmp	r3, #100	; 0x64
 8002aa0:	d908      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e3d1      	b.n	800324a <HAL_RCC_OscConfig+0x109a>
 8002aa6:	bf00      	nop
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	10908120 	.word	0x10908120
 8002ab0:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab4:	4b8d      	ldr	r3, [pc, #564]	; (8002cec <HAL_RCC_OscConfig+0xb3c>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d0e8      	beq.n	8002a92 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ac0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ac4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d106      	bne.n	8002ade <HAL_RCC_OscConfig+0x92e>
 8002ad0:	4b87      	ldr	r3, [pc, #540]	; (8002cf0 <HAL_RCC_OscConfig+0xb40>)
 8002ad2:	6a1b      	ldr	r3, [r3, #32]
 8002ad4:	4a86      	ldr	r2, [pc, #536]	; (8002cf0 <HAL_RCC_OscConfig+0xb40>)
 8002ad6:	f043 0301 	orr.w	r3, r3, #1
 8002ada:	6213      	str	r3, [r2, #32]
 8002adc:	e035      	b.n	8002b4a <HAL_RCC_OscConfig+0x99a>
 8002ade:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ae2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d10c      	bne.n	8002b08 <HAL_RCC_OscConfig+0x958>
 8002aee:	4b80      	ldr	r3, [pc, #512]	; (8002cf0 <HAL_RCC_OscConfig+0xb40>)
 8002af0:	6a1b      	ldr	r3, [r3, #32]
 8002af2:	4a7f      	ldr	r2, [pc, #508]	; (8002cf0 <HAL_RCC_OscConfig+0xb40>)
 8002af4:	f023 0301 	bic.w	r3, r3, #1
 8002af8:	6213      	str	r3, [r2, #32]
 8002afa:	4b7d      	ldr	r3, [pc, #500]	; (8002cf0 <HAL_RCC_OscConfig+0xb40>)
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	4a7c      	ldr	r2, [pc, #496]	; (8002cf0 <HAL_RCC_OscConfig+0xb40>)
 8002b00:	f023 0304 	bic.w	r3, r3, #4
 8002b04:	6213      	str	r3, [r2, #32]
 8002b06:	e020      	b.n	8002b4a <HAL_RCC_OscConfig+0x99a>
 8002b08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b0c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	2b05      	cmp	r3, #5
 8002b16:	d10c      	bne.n	8002b32 <HAL_RCC_OscConfig+0x982>
 8002b18:	4b75      	ldr	r3, [pc, #468]	; (8002cf0 <HAL_RCC_OscConfig+0xb40>)
 8002b1a:	6a1b      	ldr	r3, [r3, #32]
 8002b1c:	4a74      	ldr	r2, [pc, #464]	; (8002cf0 <HAL_RCC_OscConfig+0xb40>)
 8002b1e:	f043 0304 	orr.w	r3, r3, #4
 8002b22:	6213      	str	r3, [r2, #32]
 8002b24:	4b72      	ldr	r3, [pc, #456]	; (8002cf0 <HAL_RCC_OscConfig+0xb40>)
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	4a71      	ldr	r2, [pc, #452]	; (8002cf0 <HAL_RCC_OscConfig+0xb40>)
 8002b2a:	f043 0301 	orr.w	r3, r3, #1
 8002b2e:	6213      	str	r3, [r2, #32]
 8002b30:	e00b      	b.n	8002b4a <HAL_RCC_OscConfig+0x99a>
 8002b32:	4b6f      	ldr	r3, [pc, #444]	; (8002cf0 <HAL_RCC_OscConfig+0xb40>)
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	4a6e      	ldr	r2, [pc, #440]	; (8002cf0 <HAL_RCC_OscConfig+0xb40>)
 8002b38:	f023 0301 	bic.w	r3, r3, #1
 8002b3c:	6213      	str	r3, [r2, #32]
 8002b3e:	4b6c      	ldr	r3, [pc, #432]	; (8002cf0 <HAL_RCC_OscConfig+0xb40>)
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	4a6b      	ldr	r2, [pc, #428]	; (8002cf0 <HAL_RCC_OscConfig+0xb40>)
 8002b44:	f023 0304 	bic.w	r3, r3, #4
 8002b48:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b4e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f000 8081 	beq.w	8002c5e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b5c:	f7ff fa36 	bl	8001fcc <HAL_GetTick>
 8002b60:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b64:	e00b      	b.n	8002b7e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b66:	f7ff fa31 	bl	8001fcc <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e365      	b.n	800324a <HAL_RCC_OscConfig+0x109a>
 8002b7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b82:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002b86:	2202      	movs	r2, #2
 8002b88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b8e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	fa93 f2a3 	rbit	r2, r3
 8002b98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b9c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002ba0:	601a      	str	r2, [r3, #0]
 8002ba2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ba6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002baa:	2202      	movs	r2, #2
 8002bac:	601a      	str	r2, [r3, #0]
 8002bae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bb2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	fa93 f2a3 	rbit	r2, r3
 8002bbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bc0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002bc4:	601a      	str	r2, [r3, #0]
  return result;
 8002bc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bca:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002bce:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bd0:	fab3 f383 	clz	r3, r3
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	095b      	lsrs	r3, r3, #5
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	f043 0302 	orr.w	r3, r3, #2
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d102      	bne.n	8002bea <HAL_RCC_OscConfig+0xa3a>
 8002be4:	4b42      	ldr	r3, [pc, #264]	; (8002cf0 <HAL_RCC_OscConfig+0xb40>)
 8002be6:	6a1b      	ldr	r3, [r3, #32]
 8002be8:	e013      	b.n	8002c12 <HAL_RCC_OscConfig+0xa62>
 8002bea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bee:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bfa:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	fa93 f2a3 	rbit	r2, r3
 8002c04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c08:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002c0c:	601a      	str	r2, [r3, #0]
 8002c0e:	4b38      	ldr	r3, [pc, #224]	; (8002cf0 <HAL_RCC_OscConfig+0xb40>)
 8002c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c12:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002c16:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002c1a:	2102      	movs	r1, #2
 8002c1c:	6011      	str	r1, [r2, #0]
 8002c1e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002c22:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002c26:	6812      	ldr	r2, [r2, #0]
 8002c28:	fa92 f1a2 	rbit	r1, r2
 8002c2c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002c30:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002c34:	6011      	str	r1, [r2, #0]
  return result;
 8002c36:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002c3a:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002c3e:	6812      	ldr	r2, [r2, #0]
 8002c40:	fab2 f282 	clz	r2, r2
 8002c44:	b2d2      	uxtb	r2, r2
 8002c46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c4a:	b2d2      	uxtb	r2, r2
 8002c4c:	f002 021f 	and.w	r2, r2, #31
 8002c50:	2101      	movs	r1, #1
 8002c52:	fa01 f202 	lsl.w	r2, r1, r2
 8002c56:	4013      	ands	r3, r2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d084      	beq.n	8002b66 <HAL_RCC_OscConfig+0x9b6>
 8002c5c:	e083      	b.n	8002d66 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c5e:	f7ff f9b5 	bl	8001fcc <HAL_GetTick>
 8002c62:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c66:	e00b      	b.n	8002c80 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c68:	f7ff f9b0 	bl	8001fcc <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d901      	bls.n	8002c80 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e2e4      	b.n	800324a <HAL_RCC_OscConfig+0x109a>
 8002c80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c84:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002c88:	2202      	movs	r2, #2
 8002c8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c90:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	fa93 f2a3 	rbit	r2, r3
 8002c9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c9e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002ca2:	601a      	str	r2, [r3, #0]
 8002ca4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ca8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002cac:	2202      	movs	r2, #2
 8002cae:	601a      	str	r2, [r3, #0]
 8002cb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cb4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	fa93 f2a3 	rbit	r2, r3
 8002cbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cc2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002cc6:	601a      	str	r2, [r3, #0]
  return result;
 8002cc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ccc:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002cd0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cd2:	fab3 f383 	clz	r3, r3
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	095b      	lsrs	r3, r3, #5
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	f043 0302 	orr.w	r3, r3, #2
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d106      	bne.n	8002cf4 <HAL_RCC_OscConfig+0xb44>
 8002ce6:	4b02      	ldr	r3, [pc, #8]	; (8002cf0 <HAL_RCC_OscConfig+0xb40>)
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
 8002cea:	e017      	b.n	8002d1c <HAL_RCC_OscConfig+0xb6c>
 8002cec:	40007000 	.word	0x40007000
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cf8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002cfc:	2202      	movs	r2, #2
 8002cfe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d04:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	fa93 f2a3 	rbit	r2, r3
 8002d0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d12:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002d16:	601a      	str	r2, [r3, #0]
 8002d18:	4bb3      	ldr	r3, [pc, #716]	; (8002fe8 <HAL_RCC_OscConfig+0xe38>)
 8002d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002d20:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002d24:	2102      	movs	r1, #2
 8002d26:	6011      	str	r1, [r2, #0]
 8002d28:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002d2c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002d30:	6812      	ldr	r2, [r2, #0]
 8002d32:	fa92 f1a2 	rbit	r1, r2
 8002d36:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002d3a:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002d3e:	6011      	str	r1, [r2, #0]
  return result;
 8002d40:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002d44:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002d48:	6812      	ldr	r2, [r2, #0]
 8002d4a:	fab2 f282 	clz	r2, r2
 8002d4e:	b2d2      	uxtb	r2, r2
 8002d50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d54:	b2d2      	uxtb	r2, r2
 8002d56:	f002 021f 	and.w	r2, r2, #31
 8002d5a:	2101      	movs	r1, #1
 8002d5c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d60:	4013      	ands	r3, r2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d180      	bne.n	8002c68 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d66:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d105      	bne.n	8002d7a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d6e:	4b9e      	ldr	r3, [pc, #632]	; (8002fe8 <HAL_RCC_OscConfig+0xe38>)
 8002d70:	69db      	ldr	r3, [r3, #28]
 8002d72:	4a9d      	ldr	r2, [pc, #628]	; (8002fe8 <HAL_RCC_OscConfig+0xe38>)
 8002d74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d78:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d7e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f000 825e 	beq.w	8003248 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d8c:	4b96      	ldr	r3, [pc, #600]	; (8002fe8 <HAL_RCC_OscConfig+0xe38>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f003 030c 	and.w	r3, r3, #12
 8002d94:	2b08      	cmp	r3, #8
 8002d96:	f000 821f 	beq.w	80031d8 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d9e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	f040 8170 	bne.w	800308c <HAL_RCC_OscConfig+0xedc>
 8002dac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002db0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002db4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002db8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dbe:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	fa93 f2a3 	rbit	r2, r3
 8002dc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dcc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002dd0:	601a      	str	r2, [r3, #0]
  return result;
 8002dd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dd6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002dda:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ddc:	fab3 f383 	clz	r3, r3
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002de6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	461a      	mov	r2, r3
 8002dee:	2300      	movs	r3, #0
 8002df0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df2:	f7ff f8eb 	bl	8001fcc <HAL_GetTick>
 8002df6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dfa:	e009      	b.n	8002e10 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dfc:	f7ff f8e6 	bl	8001fcc <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d901      	bls.n	8002e10 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e21c      	b.n	800324a <HAL_RCC_OscConfig+0x109a>
 8002e10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e14:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002e18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e22:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	fa93 f2a3 	rbit	r2, r3
 8002e2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e30:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002e34:	601a      	str	r2, [r3, #0]
  return result;
 8002e36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e3a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002e3e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e40:	fab3 f383 	clz	r3, r3
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	095b      	lsrs	r3, r3, #5
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	f043 0301 	orr.w	r3, r3, #1
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d102      	bne.n	8002e5a <HAL_RCC_OscConfig+0xcaa>
 8002e54:	4b64      	ldr	r3, [pc, #400]	; (8002fe8 <HAL_RCC_OscConfig+0xe38>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	e027      	b.n	8002eaa <HAL_RCC_OscConfig+0xcfa>
 8002e5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e5e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002e62:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e6c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	fa93 f2a3 	rbit	r2, r3
 8002e76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e7a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002e7e:	601a      	str	r2, [r3, #0]
 8002e80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e84:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002e88:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e8c:	601a      	str	r2, [r3, #0]
 8002e8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e92:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	fa93 f2a3 	rbit	r2, r3
 8002e9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ea0:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002ea4:	601a      	str	r2, [r3, #0]
 8002ea6:	4b50      	ldr	r3, [pc, #320]	; (8002fe8 <HAL_RCC_OscConfig+0xe38>)
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eaa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002eae:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002eb2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002eb6:	6011      	str	r1, [r2, #0]
 8002eb8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002ebc:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002ec0:	6812      	ldr	r2, [r2, #0]
 8002ec2:	fa92 f1a2 	rbit	r1, r2
 8002ec6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002eca:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002ece:	6011      	str	r1, [r2, #0]
  return result;
 8002ed0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002ed4:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002ed8:	6812      	ldr	r2, [r2, #0]
 8002eda:	fab2 f282 	clz	r2, r2
 8002ede:	b2d2      	uxtb	r2, r2
 8002ee0:	f042 0220 	orr.w	r2, r2, #32
 8002ee4:	b2d2      	uxtb	r2, r2
 8002ee6:	f002 021f 	and.w	r2, r2, #31
 8002eea:	2101      	movs	r1, #1
 8002eec:	fa01 f202 	lsl.w	r2, r1, r2
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d182      	bne.n	8002dfc <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ef6:	4b3c      	ldr	r3, [pc, #240]	; (8002fe8 <HAL_RCC_OscConfig+0xe38>)
 8002ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002efa:	f023 020f 	bic.w	r2, r3, #15
 8002efe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f02:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0a:	4937      	ldr	r1, [pc, #220]	; (8002fe8 <HAL_RCC_OscConfig+0xe38>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002f10:	4b35      	ldr	r3, [pc, #212]	; (8002fe8 <HAL_RCC_OscConfig+0xe38>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002f18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f1c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	6a19      	ldr	r1, [r3, #32]
 8002f24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f28:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	69db      	ldr	r3, [r3, #28]
 8002f30:	430b      	orrs	r3, r1
 8002f32:	492d      	ldr	r1, [pc, #180]	; (8002fe8 <HAL_RCC_OscConfig+0xe38>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	604b      	str	r3, [r1, #4]
 8002f38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f3c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002f40:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f4a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	fa93 f2a3 	rbit	r2, r3
 8002f54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f58:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002f5c:	601a      	str	r2, [r3, #0]
  return result;
 8002f5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f62:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002f66:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f68:	fab3 f383 	clz	r3, r3
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f72:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	461a      	mov	r2, r3
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f7e:	f7ff f825 	bl	8001fcc <HAL_GetTick>
 8002f82:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f86:	e009      	b.n	8002f9c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f88:	f7ff f820 	bl	8001fcc <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e156      	b.n	800324a <HAL_RCC_OscConfig+0x109a>
 8002f9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fa0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002fa4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fa8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002faa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fae:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	fa93 f2a3 	rbit	r2, r3
 8002fb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fbc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002fc0:	601a      	str	r2, [r3, #0]
  return result;
 8002fc2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fc6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002fca:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fcc:	fab3 f383 	clz	r3, r3
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	095b      	lsrs	r3, r3, #5
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	f043 0301 	orr.w	r3, r3, #1
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d105      	bne.n	8002fec <HAL_RCC_OscConfig+0xe3c>
 8002fe0:	4b01      	ldr	r3, [pc, #4]	; (8002fe8 <HAL_RCC_OscConfig+0xe38>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	e02a      	b.n	800303c <HAL_RCC_OscConfig+0xe8c>
 8002fe6:	bf00      	nop
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ff0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002ff4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ff8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ffe:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	fa93 f2a3 	rbit	r2, r3
 8003008:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800300c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003010:	601a      	str	r2, [r3, #0]
 8003012:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003016:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800301a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800301e:	601a      	str	r2, [r3, #0]
 8003020:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003024:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	fa93 f2a3 	rbit	r2, r3
 800302e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003032:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003036:	601a      	str	r2, [r3, #0]
 8003038:	4b86      	ldr	r3, [pc, #536]	; (8003254 <HAL_RCC_OscConfig+0x10a4>)
 800303a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003040:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003044:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003048:	6011      	str	r1, [r2, #0]
 800304a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800304e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003052:	6812      	ldr	r2, [r2, #0]
 8003054:	fa92 f1a2 	rbit	r1, r2
 8003058:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800305c:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003060:	6011      	str	r1, [r2, #0]
  return result;
 8003062:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003066:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800306a:	6812      	ldr	r2, [r2, #0]
 800306c:	fab2 f282 	clz	r2, r2
 8003070:	b2d2      	uxtb	r2, r2
 8003072:	f042 0220 	orr.w	r2, r2, #32
 8003076:	b2d2      	uxtb	r2, r2
 8003078:	f002 021f 	and.w	r2, r2, #31
 800307c:	2101      	movs	r1, #1
 800307e:	fa01 f202 	lsl.w	r2, r1, r2
 8003082:	4013      	ands	r3, r2
 8003084:	2b00      	cmp	r3, #0
 8003086:	f43f af7f 	beq.w	8002f88 <HAL_RCC_OscConfig+0xdd8>
 800308a:	e0dd      	b.n	8003248 <HAL_RCC_OscConfig+0x1098>
 800308c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003090:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003094:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003098:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800309e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	fa93 f2a3 	rbit	r2, r3
 80030a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030ac:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80030b0:	601a      	str	r2, [r3, #0]
  return result;
 80030b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030b6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80030ba:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030bc:	fab3 f383 	clz	r3, r3
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80030c6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	461a      	mov	r2, r3
 80030ce:	2300      	movs	r3, #0
 80030d0:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d2:	f7fe ff7b 	bl	8001fcc <HAL_GetTick>
 80030d6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030da:	e009      	b.n	80030f0 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030dc:	f7fe ff76 	bl	8001fcc <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d901      	bls.n	80030f0 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e0ac      	b.n	800324a <HAL_RCC_OscConfig+0x109a>
 80030f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030f4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80030f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003102:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	fa93 f2a3 	rbit	r2, r3
 800310c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003110:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003114:	601a      	str	r2, [r3, #0]
  return result;
 8003116:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800311a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800311e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003120:	fab3 f383 	clz	r3, r3
 8003124:	b2db      	uxtb	r3, r3
 8003126:	095b      	lsrs	r3, r3, #5
 8003128:	b2db      	uxtb	r3, r3
 800312a:	f043 0301 	orr.w	r3, r3, #1
 800312e:	b2db      	uxtb	r3, r3
 8003130:	2b01      	cmp	r3, #1
 8003132:	d102      	bne.n	800313a <HAL_RCC_OscConfig+0xf8a>
 8003134:	4b47      	ldr	r3, [pc, #284]	; (8003254 <HAL_RCC_OscConfig+0x10a4>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	e027      	b.n	800318a <HAL_RCC_OscConfig+0xfda>
 800313a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800313e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003142:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003146:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003148:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800314c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	fa93 f2a3 	rbit	r2, r3
 8003156:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800315a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800315e:	601a      	str	r2, [r3, #0]
 8003160:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003164:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003168:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800316c:	601a      	str	r2, [r3, #0]
 800316e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003172:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	fa93 f2a3 	rbit	r2, r3
 800317c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003180:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8003184:	601a      	str	r2, [r3, #0]
 8003186:	4b33      	ldr	r3, [pc, #204]	; (8003254 <HAL_RCC_OscConfig+0x10a4>)
 8003188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800318e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003192:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003196:	6011      	str	r1, [r2, #0]
 8003198:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800319c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80031a0:	6812      	ldr	r2, [r2, #0]
 80031a2:	fa92 f1a2 	rbit	r1, r2
 80031a6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80031aa:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80031ae:	6011      	str	r1, [r2, #0]
  return result;
 80031b0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80031b4:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80031b8:	6812      	ldr	r2, [r2, #0]
 80031ba:	fab2 f282 	clz	r2, r2
 80031be:	b2d2      	uxtb	r2, r2
 80031c0:	f042 0220 	orr.w	r2, r2, #32
 80031c4:	b2d2      	uxtb	r2, r2
 80031c6:	f002 021f 	and.w	r2, r2, #31
 80031ca:	2101      	movs	r1, #1
 80031cc:	fa01 f202 	lsl.w	r2, r1, r2
 80031d0:	4013      	ands	r3, r2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d182      	bne.n	80030dc <HAL_RCC_OscConfig+0xf2c>
 80031d6:	e037      	b.n	8003248 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031dc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d101      	bne.n	80031ec <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e02e      	b.n	800324a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031ec:	4b19      	ldr	r3, [pc, #100]	; (8003254 <HAL_RCC_OscConfig+0x10a4>)
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80031f4:	4b17      	ldr	r3, [pc, #92]	; (8003254 <HAL_RCC_OscConfig+0x10a4>)
 80031f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f8:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80031fc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003200:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003204:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003208:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	69db      	ldr	r3, [r3, #28]
 8003210:	429a      	cmp	r2, r3
 8003212:	d117      	bne.n	8003244 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003214:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003218:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800321c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003220:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003228:	429a      	cmp	r2, r3
 800322a:	d10b      	bne.n	8003244 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800322c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003230:	f003 020f 	and.w	r2, r3, #15
 8003234:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003238:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003240:	429a      	cmp	r2, r3
 8003242:	d001      	beq.n	8003248 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e000      	b.n	800324a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	40021000 	.word	0x40021000

08003258 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b09e      	sub	sp, #120	; 0x78
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003262:	2300      	movs	r3, #0
 8003264:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d101      	bne.n	8003270 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e162      	b.n	8003536 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003270:	4b90      	ldr	r3, [pc, #576]	; (80034b4 <HAL_RCC_ClockConfig+0x25c>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0307 	and.w	r3, r3, #7
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	429a      	cmp	r2, r3
 800327c:	d910      	bls.n	80032a0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800327e:	4b8d      	ldr	r3, [pc, #564]	; (80034b4 <HAL_RCC_ClockConfig+0x25c>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f023 0207 	bic.w	r2, r3, #7
 8003286:	498b      	ldr	r1, [pc, #556]	; (80034b4 <HAL_RCC_ClockConfig+0x25c>)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	4313      	orrs	r3, r2
 800328c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800328e:	4b89      	ldr	r3, [pc, #548]	; (80034b4 <HAL_RCC_ClockConfig+0x25c>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0307 	and.w	r3, r3, #7
 8003296:	683a      	ldr	r2, [r7, #0]
 8003298:	429a      	cmp	r2, r3
 800329a:	d001      	beq.n	80032a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e14a      	b.n	8003536 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0302 	and.w	r3, r3, #2
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d008      	beq.n	80032be <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032ac:	4b82      	ldr	r3, [pc, #520]	; (80034b8 <HAL_RCC_ClockConfig+0x260>)
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	497f      	ldr	r1, [pc, #508]	; (80034b8 <HAL_RCC_ClockConfig+0x260>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f000 80dc 	beq.w	8003484 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d13c      	bne.n	800334e <HAL_RCC_ClockConfig+0xf6>
 80032d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032d8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032dc:	fa93 f3a3 	rbit	r3, r3
 80032e0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80032e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032e4:	fab3 f383 	clz	r3, r3
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	095b      	lsrs	r3, r3, #5
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	f043 0301 	orr.w	r3, r3, #1
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d102      	bne.n	80032fe <HAL_RCC_ClockConfig+0xa6>
 80032f8:	4b6f      	ldr	r3, [pc, #444]	; (80034b8 <HAL_RCC_ClockConfig+0x260>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	e00f      	b.n	800331e <HAL_RCC_ClockConfig+0xc6>
 80032fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003302:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003304:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003306:	fa93 f3a3 	rbit	r3, r3
 800330a:	667b      	str	r3, [r7, #100]	; 0x64
 800330c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003310:	663b      	str	r3, [r7, #96]	; 0x60
 8003312:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003314:	fa93 f3a3 	rbit	r3, r3
 8003318:	65fb      	str	r3, [r7, #92]	; 0x5c
 800331a:	4b67      	ldr	r3, [pc, #412]	; (80034b8 <HAL_RCC_ClockConfig+0x260>)
 800331c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003322:	65ba      	str	r2, [r7, #88]	; 0x58
 8003324:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003326:	fa92 f2a2 	rbit	r2, r2
 800332a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800332c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800332e:	fab2 f282 	clz	r2, r2
 8003332:	b2d2      	uxtb	r2, r2
 8003334:	f042 0220 	orr.w	r2, r2, #32
 8003338:	b2d2      	uxtb	r2, r2
 800333a:	f002 021f 	and.w	r2, r2, #31
 800333e:	2101      	movs	r1, #1
 8003340:	fa01 f202 	lsl.w	r2, r1, r2
 8003344:	4013      	ands	r3, r2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d17b      	bne.n	8003442 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e0f3      	b.n	8003536 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	2b02      	cmp	r3, #2
 8003354:	d13c      	bne.n	80033d0 <HAL_RCC_ClockConfig+0x178>
 8003356:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800335a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800335c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800335e:	fa93 f3a3 	rbit	r3, r3
 8003362:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003364:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003366:	fab3 f383 	clz	r3, r3
 800336a:	b2db      	uxtb	r3, r3
 800336c:	095b      	lsrs	r3, r3, #5
 800336e:	b2db      	uxtb	r3, r3
 8003370:	f043 0301 	orr.w	r3, r3, #1
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b01      	cmp	r3, #1
 8003378:	d102      	bne.n	8003380 <HAL_RCC_ClockConfig+0x128>
 800337a:	4b4f      	ldr	r3, [pc, #316]	; (80034b8 <HAL_RCC_ClockConfig+0x260>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	e00f      	b.n	80033a0 <HAL_RCC_ClockConfig+0x148>
 8003380:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003384:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003386:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003388:	fa93 f3a3 	rbit	r3, r3
 800338c:	647b      	str	r3, [r7, #68]	; 0x44
 800338e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003392:	643b      	str	r3, [r7, #64]	; 0x40
 8003394:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003396:	fa93 f3a3 	rbit	r3, r3
 800339a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800339c:	4b46      	ldr	r3, [pc, #280]	; (80034b8 <HAL_RCC_ClockConfig+0x260>)
 800339e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033a4:	63ba      	str	r2, [r7, #56]	; 0x38
 80033a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033a8:	fa92 f2a2 	rbit	r2, r2
 80033ac:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80033ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033b0:	fab2 f282 	clz	r2, r2
 80033b4:	b2d2      	uxtb	r2, r2
 80033b6:	f042 0220 	orr.w	r2, r2, #32
 80033ba:	b2d2      	uxtb	r2, r2
 80033bc:	f002 021f 	and.w	r2, r2, #31
 80033c0:	2101      	movs	r1, #1
 80033c2:	fa01 f202 	lsl.w	r2, r1, r2
 80033c6:	4013      	ands	r3, r2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d13a      	bne.n	8003442 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e0b2      	b.n	8003536 <HAL_RCC_ClockConfig+0x2de>
 80033d0:	2302      	movs	r3, #2
 80033d2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d6:	fa93 f3a3 	rbit	r3, r3
 80033da:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80033dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033de:	fab3 f383 	clz	r3, r3
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	095b      	lsrs	r3, r3, #5
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	f043 0301 	orr.w	r3, r3, #1
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d102      	bne.n	80033f8 <HAL_RCC_ClockConfig+0x1a0>
 80033f2:	4b31      	ldr	r3, [pc, #196]	; (80034b8 <HAL_RCC_ClockConfig+0x260>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	e00d      	b.n	8003414 <HAL_RCC_ClockConfig+0x1bc>
 80033f8:	2302      	movs	r3, #2
 80033fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033fe:	fa93 f3a3 	rbit	r3, r3
 8003402:	627b      	str	r3, [r7, #36]	; 0x24
 8003404:	2302      	movs	r3, #2
 8003406:	623b      	str	r3, [r7, #32]
 8003408:	6a3b      	ldr	r3, [r7, #32]
 800340a:	fa93 f3a3 	rbit	r3, r3
 800340e:	61fb      	str	r3, [r7, #28]
 8003410:	4b29      	ldr	r3, [pc, #164]	; (80034b8 <HAL_RCC_ClockConfig+0x260>)
 8003412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003414:	2202      	movs	r2, #2
 8003416:	61ba      	str	r2, [r7, #24]
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	fa92 f2a2 	rbit	r2, r2
 800341e:	617a      	str	r2, [r7, #20]
  return result;
 8003420:	697a      	ldr	r2, [r7, #20]
 8003422:	fab2 f282 	clz	r2, r2
 8003426:	b2d2      	uxtb	r2, r2
 8003428:	f042 0220 	orr.w	r2, r2, #32
 800342c:	b2d2      	uxtb	r2, r2
 800342e:	f002 021f 	and.w	r2, r2, #31
 8003432:	2101      	movs	r1, #1
 8003434:	fa01 f202 	lsl.w	r2, r1, r2
 8003438:	4013      	ands	r3, r2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e079      	b.n	8003536 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003442:	4b1d      	ldr	r3, [pc, #116]	; (80034b8 <HAL_RCC_ClockConfig+0x260>)
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f023 0203 	bic.w	r2, r3, #3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	491a      	ldr	r1, [pc, #104]	; (80034b8 <HAL_RCC_ClockConfig+0x260>)
 8003450:	4313      	orrs	r3, r2
 8003452:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003454:	f7fe fdba 	bl	8001fcc <HAL_GetTick>
 8003458:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800345a:	e00a      	b.n	8003472 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800345c:	f7fe fdb6 	bl	8001fcc <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	f241 3288 	movw	r2, #5000	; 0x1388
 800346a:	4293      	cmp	r3, r2
 800346c:	d901      	bls.n	8003472 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e061      	b.n	8003536 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003472:	4b11      	ldr	r3, [pc, #68]	; (80034b8 <HAL_RCC_ClockConfig+0x260>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f003 020c 	and.w	r2, r3, #12
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	429a      	cmp	r2, r3
 8003482:	d1eb      	bne.n	800345c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003484:	4b0b      	ldr	r3, [pc, #44]	; (80034b4 <HAL_RCC_ClockConfig+0x25c>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0307 	and.w	r3, r3, #7
 800348c:	683a      	ldr	r2, [r7, #0]
 800348e:	429a      	cmp	r2, r3
 8003490:	d214      	bcs.n	80034bc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003492:	4b08      	ldr	r3, [pc, #32]	; (80034b4 <HAL_RCC_ClockConfig+0x25c>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f023 0207 	bic.w	r2, r3, #7
 800349a:	4906      	ldr	r1, [pc, #24]	; (80034b4 <HAL_RCC_ClockConfig+0x25c>)
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	4313      	orrs	r3, r2
 80034a0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034a2:	4b04      	ldr	r3, [pc, #16]	; (80034b4 <HAL_RCC_ClockConfig+0x25c>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0307 	and.w	r3, r3, #7
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d005      	beq.n	80034bc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e040      	b.n	8003536 <HAL_RCC_ClockConfig+0x2de>
 80034b4:	40022000 	.word	0x40022000
 80034b8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0304 	and.w	r3, r3, #4
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d008      	beq.n	80034da <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034c8:	4b1d      	ldr	r3, [pc, #116]	; (8003540 <HAL_RCC_ClockConfig+0x2e8>)
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	491a      	ldr	r1, [pc, #104]	; (8003540 <HAL_RCC_ClockConfig+0x2e8>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0308 	and.w	r3, r3, #8
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d009      	beq.n	80034fa <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034e6:	4b16      	ldr	r3, [pc, #88]	; (8003540 <HAL_RCC_ClockConfig+0x2e8>)
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	00db      	lsls	r3, r3, #3
 80034f4:	4912      	ldr	r1, [pc, #72]	; (8003540 <HAL_RCC_ClockConfig+0x2e8>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80034fa:	f000 f829 	bl	8003550 <HAL_RCC_GetSysClockFreq>
 80034fe:	4601      	mov	r1, r0
 8003500:	4b0f      	ldr	r3, [pc, #60]	; (8003540 <HAL_RCC_ClockConfig+0x2e8>)
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003508:	22f0      	movs	r2, #240	; 0xf0
 800350a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	fa92 f2a2 	rbit	r2, r2
 8003512:	60fa      	str	r2, [r7, #12]
  return result;
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	fab2 f282 	clz	r2, r2
 800351a:	b2d2      	uxtb	r2, r2
 800351c:	40d3      	lsrs	r3, r2
 800351e:	4a09      	ldr	r2, [pc, #36]	; (8003544 <HAL_RCC_ClockConfig+0x2ec>)
 8003520:	5cd3      	ldrb	r3, [r2, r3]
 8003522:	fa21 f303 	lsr.w	r3, r1, r3
 8003526:	4a08      	ldr	r2, [pc, #32]	; (8003548 <HAL_RCC_ClockConfig+0x2f0>)
 8003528:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800352a:	4b08      	ldr	r3, [pc, #32]	; (800354c <HAL_RCC_ClockConfig+0x2f4>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4618      	mov	r0, r3
 8003530:	f7fe fd1c 	bl	8001f6c <HAL_InitTick>
  
  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3778      	adds	r7, #120	; 0x78
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	40021000 	.word	0x40021000
 8003544:	080083f0 	.word	0x080083f0
 8003548:	20000000 	.word	0x20000000
 800354c:	20000004 	.word	0x20000004

08003550 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003550:	b480      	push	{r7}
 8003552:	b08b      	sub	sp, #44	; 0x2c
 8003554:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003556:	2300      	movs	r3, #0
 8003558:	61fb      	str	r3, [r7, #28]
 800355a:	2300      	movs	r3, #0
 800355c:	61bb      	str	r3, [r7, #24]
 800355e:	2300      	movs	r3, #0
 8003560:	627b      	str	r3, [r7, #36]	; 0x24
 8003562:	2300      	movs	r3, #0
 8003564:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003566:	2300      	movs	r3, #0
 8003568:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800356a:	4b2a      	ldr	r3, [pc, #168]	; (8003614 <HAL_RCC_GetSysClockFreq+0xc4>)
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	f003 030c 	and.w	r3, r3, #12
 8003576:	2b04      	cmp	r3, #4
 8003578:	d002      	beq.n	8003580 <HAL_RCC_GetSysClockFreq+0x30>
 800357a:	2b08      	cmp	r3, #8
 800357c:	d003      	beq.n	8003586 <HAL_RCC_GetSysClockFreq+0x36>
 800357e:	e03f      	b.n	8003600 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003580:	4b25      	ldr	r3, [pc, #148]	; (8003618 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003582:	623b      	str	r3, [r7, #32]
      break;
 8003584:	e03f      	b.n	8003606 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800358c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003590:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003592:	68ba      	ldr	r2, [r7, #8]
 8003594:	fa92 f2a2 	rbit	r2, r2
 8003598:	607a      	str	r2, [r7, #4]
  return result;
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	fab2 f282 	clz	r2, r2
 80035a0:	b2d2      	uxtb	r2, r2
 80035a2:	40d3      	lsrs	r3, r2
 80035a4:	4a1d      	ldr	r2, [pc, #116]	; (800361c <HAL_RCC_GetSysClockFreq+0xcc>)
 80035a6:	5cd3      	ldrb	r3, [r2, r3]
 80035a8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80035aa:	4b1a      	ldr	r3, [pc, #104]	; (8003614 <HAL_RCC_GetSysClockFreq+0xc4>)
 80035ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ae:	f003 030f 	and.w	r3, r3, #15
 80035b2:	220f      	movs	r2, #15
 80035b4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	fa92 f2a2 	rbit	r2, r2
 80035bc:	60fa      	str	r2, [r7, #12]
  return result;
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	fab2 f282 	clz	r2, r2
 80035c4:	b2d2      	uxtb	r2, r2
 80035c6:	40d3      	lsrs	r3, r2
 80035c8:	4a15      	ldr	r2, [pc, #84]	; (8003620 <HAL_RCC_GetSysClockFreq+0xd0>)
 80035ca:	5cd3      	ldrb	r3, [r2, r3]
 80035cc:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d008      	beq.n	80035ea <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80035d8:	4a0f      	ldr	r2, [pc, #60]	; (8003618 <HAL_RCC_GetSysClockFreq+0xc8>)
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	fb02 f303 	mul.w	r3, r2, r3
 80035e6:	627b      	str	r3, [r7, #36]	; 0x24
 80035e8:	e007      	b.n	80035fa <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80035ea:	4a0b      	ldr	r2, [pc, #44]	; (8003618 <HAL_RCC_GetSysClockFreq+0xc8>)
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	fb02 f303 	mul.w	r3, r2, r3
 80035f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80035fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fc:	623b      	str	r3, [r7, #32]
      break;
 80035fe:	e002      	b.n	8003606 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003600:	4b05      	ldr	r3, [pc, #20]	; (8003618 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003602:	623b      	str	r3, [r7, #32]
      break;
 8003604:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003606:	6a3b      	ldr	r3, [r7, #32]
}
 8003608:	4618      	mov	r0, r3
 800360a:	372c      	adds	r7, #44	; 0x2c
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr
 8003614:	40021000 	.word	0x40021000
 8003618:	007a1200 	.word	0x007a1200
 800361c:	08008400 	.word	0x08008400
 8003620:	08008410 	.word	0x08008410

08003624 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b092      	sub	sp, #72	; 0x48
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800362c:	2300      	movs	r3, #0
 800362e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003630:	2300      	movs	r3, #0
 8003632:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003634:	2300      	movs	r3, #0
 8003636:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003642:	2b00      	cmp	r3, #0
 8003644:	f000 80d4 	beq.w	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003648:	4b4e      	ldr	r3, [pc, #312]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800364a:	69db      	ldr	r3, [r3, #28]
 800364c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d10e      	bne.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003654:	4b4b      	ldr	r3, [pc, #300]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003656:	69db      	ldr	r3, [r3, #28]
 8003658:	4a4a      	ldr	r2, [pc, #296]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800365a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800365e:	61d3      	str	r3, [r2, #28]
 8003660:	4b48      	ldr	r3, [pc, #288]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003662:	69db      	ldr	r3, [r3, #28]
 8003664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003668:	60bb      	str	r3, [r7, #8]
 800366a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800366c:	2301      	movs	r3, #1
 800366e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003672:	4b45      	ldr	r3, [pc, #276]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800367a:	2b00      	cmp	r3, #0
 800367c:	d118      	bne.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800367e:	4b42      	ldr	r3, [pc, #264]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a41      	ldr	r2, [pc, #260]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003684:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003688:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800368a:	f7fe fc9f 	bl	8001fcc <HAL_GetTick>
 800368e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003690:	e008      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003692:	f7fe fc9b 	bl	8001fcc <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	2b64      	cmp	r3, #100	; 0x64
 800369e:	d901      	bls.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e1d6      	b.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036a4:	4b38      	ldr	r3, [pc, #224]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d0f0      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036b0:	4b34      	ldr	r3, [pc, #208]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036b2:	6a1b      	ldr	r3, [r3, #32]
 80036b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036bc:	2b00      	cmp	r3, #0
 80036be:	f000 8084 	beq.w	80037ca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d07c      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036d0:	4b2c      	ldr	r3, [pc, #176]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036d2:	6a1b      	ldr	r3, [r3, #32]
 80036d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e2:	fa93 f3a3 	rbit	r3, r3
 80036e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80036e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80036ea:	fab3 f383 	clz	r3, r3
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	461a      	mov	r2, r3
 80036f2:	4b26      	ldr	r3, [pc, #152]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036f4:	4413      	add	r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	461a      	mov	r2, r3
 80036fa:	2301      	movs	r3, #1
 80036fc:	6013      	str	r3, [r2, #0]
 80036fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003702:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003706:	fa93 f3a3 	rbit	r3, r3
 800370a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800370c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800370e:	fab3 f383 	clz	r3, r3
 8003712:	b2db      	uxtb	r3, r3
 8003714:	461a      	mov	r2, r3
 8003716:	4b1d      	ldr	r3, [pc, #116]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003718:	4413      	add	r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	461a      	mov	r2, r3
 800371e:	2300      	movs	r3, #0
 8003720:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003722:	4a18      	ldr	r2, [pc, #96]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003726:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	2b00      	cmp	r3, #0
 8003730:	d04b      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003732:	f7fe fc4b 	bl	8001fcc <HAL_GetTick>
 8003736:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003738:	e00a      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800373a:	f7fe fc47 	bl	8001fcc <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	f241 3288 	movw	r2, #5000	; 0x1388
 8003748:	4293      	cmp	r3, r2
 800374a:	d901      	bls.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e180      	b.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003750:	2302      	movs	r3, #2
 8003752:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003756:	fa93 f3a3 	rbit	r3, r3
 800375a:	627b      	str	r3, [r7, #36]	; 0x24
 800375c:	2302      	movs	r3, #2
 800375e:	623b      	str	r3, [r7, #32]
 8003760:	6a3b      	ldr	r3, [r7, #32]
 8003762:	fa93 f3a3 	rbit	r3, r3
 8003766:	61fb      	str	r3, [r7, #28]
  return result;
 8003768:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800376a:	fab3 f383 	clz	r3, r3
 800376e:	b2db      	uxtb	r3, r3
 8003770:	095b      	lsrs	r3, r3, #5
 8003772:	b2db      	uxtb	r3, r3
 8003774:	f043 0302 	orr.w	r3, r3, #2
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b02      	cmp	r3, #2
 800377c:	d108      	bne.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800377e:	4b01      	ldr	r3, [pc, #4]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	e00d      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003784:	40021000 	.word	0x40021000
 8003788:	40007000 	.word	0x40007000
 800378c:	10908100 	.word	0x10908100
 8003790:	2302      	movs	r3, #2
 8003792:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	fa93 f3a3 	rbit	r3, r3
 800379a:	617b      	str	r3, [r7, #20]
 800379c:	4b9a      	ldr	r3, [pc, #616]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800379e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a0:	2202      	movs	r2, #2
 80037a2:	613a      	str	r2, [r7, #16]
 80037a4:	693a      	ldr	r2, [r7, #16]
 80037a6:	fa92 f2a2 	rbit	r2, r2
 80037aa:	60fa      	str	r2, [r7, #12]
  return result;
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	fab2 f282 	clz	r2, r2
 80037b2:	b2d2      	uxtb	r2, r2
 80037b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037b8:	b2d2      	uxtb	r2, r2
 80037ba:	f002 021f 	and.w	r2, r2, #31
 80037be:	2101      	movs	r1, #1
 80037c0:	fa01 f202 	lsl.w	r2, r1, r2
 80037c4:	4013      	ands	r3, r2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d0b7      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80037ca:	4b8f      	ldr	r3, [pc, #572]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	498c      	ldr	r1, [pc, #560]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80037dc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d105      	bne.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037e4:	4b88      	ldr	r3, [pc, #544]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037e6:	69db      	ldr	r3, [r3, #28]
 80037e8:	4a87      	ldr	r2, [pc, #540]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037ee:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0301 	and.w	r3, r3, #1
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d008      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037fc:	4b82      	ldr	r3, [pc, #520]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003800:	f023 0203 	bic.w	r2, r3, #3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	497f      	ldr	r1, [pc, #508]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800380a:	4313      	orrs	r3, r2
 800380c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0302 	and.w	r3, r3, #2
 8003816:	2b00      	cmp	r3, #0
 8003818:	d008      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800381a:	4b7b      	ldr	r3, [pc, #492]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800381c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	4978      	ldr	r1, [pc, #480]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003828:	4313      	orrs	r3, r2
 800382a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0304 	and.w	r3, r3, #4
 8003834:	2b00      	cmp	r3, #0
 8003836:	d008      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003838:	4b73      	ldr	r3, [pc, #460]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800383a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	4970      	ldr	r1, [pc, #448]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003846:	4313      	orrs	r3, r2
 8003848:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0320 	and.w	r3, r3, #32
 8003852:	2b00      	cmp	r3, #0
 8003854:	d008      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003856:	4b6c      	ldr	r3, [pc, #432]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385a:	f023 0210 	bic.w	r2, r3, #16
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	69db      	ldr	r3, [r3, #28]
 8003862:	4969      	ldr	r1, [pc, #420]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003864:	4313      	orrs	r3, r2
 8003866:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d008      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003874:	4b64      	ldr	r3, [pc, #400]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003880:	4961      	ldr	r1, [pc, #388]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003882:	4313      	orrs	r3, r2
 8003884:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800388e:	2b00      	cmp	r3, #0
 8003890:	d008      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003892:	4b5d      	ldr	r3, [pc, #372]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003896:	f023 0220 	bic.w	r2, r3, #32
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	495a      	ldr	r1, [pc, #360]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d008      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038b0:	4b55      	ldr	r3, [pc, #340]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038bc:	4952      	ldr	r1, [pc, #328]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0308 	and.w	r3, r3, #8
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d008      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038ce:	4b4e      	ldr	r3, [pc, #312]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	494b      	ldr	r1, [pc, #300]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0310 	and.w	r3, r3, #16
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d008      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80038ec:	4b46      	ldr	r3, [pc, #280]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	4943      	ldr	r1, [pc, #268]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003906:	2b00      	cmp	r3, #0
 8003908:	d008      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800390a:	4b3f      	ldr	r3, [pc, #252]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003916:	493c      	ldr	r1, [pc, #240]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003918:	4313      	orrs	r3, r2
 800391a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003924:	2b00      	cmp	r3, #0
 8003926:	d008      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003928:	4b37      	ldr	r3, [pc, #220]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800392a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003934:	4934      	ldr	r1, [pc, #208]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003936:	4313      	orrs	r3, r2
 8003938:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003942:	2b00      	cmp	r3, #0
 8003944:	d008      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003946:	4b30      	ldr	r3, [pc, #192]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003952:	492d      	ldr	r1, [pc, #180]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003954:	4313      	orrs	r3, r2
 8003956:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d008      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003964:	4b28      	ldr	r3, [pc, #160]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003968:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003970:	4925      	ldr	r1, [pc, #148]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003972:	4313      	orrs	r3, r2
 8003974:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d008      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003982:	4b21      	ldr	r3, [pc, #132]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003986:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398e:	491e      	ldr	r1, [pc, #120]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003990:	4313      	orrs	r3, r2
 8003992:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d008      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80039a0:	4b19      	ldr	r3, [pc, #100]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80039a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ac:	4916      	ldr	r1, [pc, #88]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d008      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80039be:	4b12      	ldr	r3, [pc, #72]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80039c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ca:	490f      	ldr	r1, [pc, #60]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80039cc:	4313      	orrs	r3, r2
 80039ce:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d008      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80039dc:	4b0a      	ldr	r3, [pc, #40]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80039de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e8:	4907      	ldr	r1, [pc, #28]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00c      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80039fa:	4b03      	ldr	r3, [pc, #12]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80039fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fe:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	e002      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003a06:	bf00      	nop
 8003a08:	40021000 	.word	0x40021000
 8003a0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a0e:	4913      	ldr	r1, [pc, #76]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d008      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003a20:	4b0e      	ldr	r3, [pc, #56]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a24:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a2c:	490b      	ldr	r1, [pc, #44]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d008      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003a3e:	4b07      	ldr	r3, [pc, #28]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a42:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a4a:	4904      	ldr	r1, [pc, #16]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3748      	adds	r7, #72	; 0x48
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	40021000 	.word	0x40021000

08003a60 <rand>:
 8003a60:	4b16      	ldr	r3, [pc, #88]	; (8003abc <rand+0x5c>)
 8003a62:	b510      	push	{r4, lr}
 8003a64:	681c      	ldr	r4, [r3, #0]
 8003a66:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003a68:	b9b3      	cbnz	r3, 8003a98 <rand+0x38>
 8003a6a:	2018      	movs	r0, #24
 8003a6c:	f002 f8ee 	bl	8005c4c <malloc>
 8003a70:	4602      	mov	r2, r0
 8003a72:	6320      	str	r0, [r4, #48]	; 0x30
 8003a74:	b920      	cbnz	r0, 8003a80 <rand+0x20>
 8003a76:	4b12      	ldr	r3, [pc, #72]	; (8003ac0 <rand+0x60>)
 8003a78:	4812      	ldr	r0, [pc, #72]	; (8003ac4 <rand+0x64>)
 8003a7a:	2152      	movs	r1, #82	; 0x52
 8003a7c:	f001 fa00 	bl	8004e80 <__assert_func>
 8003a80:	4911      	ldr	r1, [pc, #68]	; (8003ac8 <rand+0x68>)
 8003a82:	4b12      	ldr	r3, [pc, #72]	; (8003acc <rand+0x6c>)
 8003a84:	e9c0 1300 	strd	r1, r3, [r0]
 8003a88:	4b11      	ldr	r3, [pc, #68]	; (8003ad0 <rand+0x70>)
 8003a8a:	6083      	str	r3, [r0, #8]
 8003a8c:	230b      	movs	r3, #11
 8003a8e:	8183      	strh	r3, [r0, #12]
 8003a90:	2100      	movs	r1, #0
 8003a92:	2001      	movs	r0, #1
 8003a94:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003a98:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003a9a:	480e      	ldr	r0, [pc, #56]	; (8003ad4 <rand+0x74>)
 8003a9c:	690b      	ldr	r3, [r1, #16]
 8003a9e:	694c      	ldr	r4, [r1, #20]
 8003aa0:	4a0d      	ldr	r2, [pc, #52]	; (8003ad8 <rand+0x78>)
 8003aa2:	4358      	muls	r0, r3
 8003aa4:	fb02 0004 	mla	r0, r2, r4, r0
 8003aa8:	fba3 3202 	umull	r3, r2, r3, r2
 8003aac:	3301      	adds	r3, #1
 8003aae:	eb40 0002 	adc.w	r0, r0, r2
 8003ab2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8003ab6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003aba:	bd10      	pop	{r4, pc}
 8003abc:	20000064 	.word	0x20000064
 8003ac0:	08008420 	.word	0x08008420
 8003ac4:	08008437 	.word	0x08008437
 8003ac8:	abcd330e 	.word	0xabcd330e
 8003acc:	e66d1234 	.word	0xe66d1234
 8003ad0:	0005deec 	.word	0x0005deec
 8003ad4:	5851f42d 	.word	0x5851f42d
 8003ad8:	4c957f2d 	.word	0x4c957f2d

08003adc <__cvt>:
 8003adc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ae0:	ec55 4b10 	vmov	r4, r5, d0
 8003ae4:	2d00      	cmp	r5, #0
 8003ae6:	460e      	mov	r6, r1
 8003ae8:	4619      	mov	r1, r3
 8003aea:	462b      	mov	r3, r5
 8003aec:	bfbb      	ittet	lt
 8003aee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003af2:	461d      	movlt	r5, r3
 8003af4:	2300      	movge	r3, #0
 8003af6:	232d      	movlt	r3, #45	; 0x2d
 8003af8:	700b      	strb	r3, [r1, #0]
 8003afa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003afc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003b00:	4691      	mov	r9, r2
 8003b02:	f023 0820 	bic.w	r8, r3, #32
 8003b06:	bfbc      	itt	lt
 8003b08:	4622      	movlt	r2, r4
 8003b0a:	4614      	movlt	r4, r2
 8003b0c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003b10:	d005      	beq.n	8003b1e <__cvt+0x42>
 8003b12:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003b16:	d100      	bne.n	8003b1a <__cvt+0x3e>
 8003b18:	3601      	adds	r6, #1
 8003b1a:	2102      	movs	r1, #2
 8003b1c:	e000      	b.n	8003b20 <__cvt+0x44>
 8003b1e:	2103      	movs	r1, #3
 8003b20:	ab03      	add	r3, sp, #12
 8003b22:	9301      	str	r3, [sp, #4]
 8003b24:	ab02      	add	r3, sp, #8
 8003b26:	9300      	str	r3, [sp, #0]
 8003b28:	ec45 4b10 	vmov	d0, r4, r5
 8003b2c:	4653      	mov	r3, sl
 8003b2e:	4632      	mov	r2, r6
 8003b30:	f001 fa4e 	bl	8004fd0 <_dtoa_r>
 8003b34:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003b38:	4607      	mov	r7, r0
 8003b3a:	d102      	bne.n	8003b42 <__cvt+0x66>
 8003b3c:	f019 0f01 	tst.w	r9, #1
 8003b40:	d022      	beq.n	8003b88 <__cvt+0xac>
 8003b42:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003b46:	eb07 0906 	add.w	r9, r7, r6
 8003b4a:	d110      	bne.n	8003b6e <__cvt+0x92>
 8003b4c:	783b      	ldrb	r3, [r7, #0]
 8003b4e:	2b30      	cmp	r3, #48	; 0x30
 8003b50:	d10a      	bne.n	8003b68 <__cvt+0x8c>
 8003b52:	2200      	movs	r2, #0
 8003b54:	2300      	movs	r3, #0
 8003b56:	4620      	mov	r0, r4
 8003b58:	4629      	mov	r1, r5
 8003b5a:	f7fc ffbd 	bl	8000ad8 <__aeabi_dcmpeq>
 8003b5e:	b918      	cbnz	r0, 8003b68 <__cvt+0x8c>
 8003b60:	f1c6 0601 	rsb	r6, r6, #1
 8003b64:	f8ca 6000 	str.w	r6, [sl]
 8003b68:	f8da 3000 	ldr.w	r3, [sl]
 8003b6c:	4499      	add	r9, r3
 8003b6e:	2200      	movs	r2, #0
 8003b70:	2300      	movs	r3, #0
 8003b72:	4620      	mov	r0, r4
 8003b74:	4629      	mov	r1, r5
 8003b76:	f7fc ffaf 	bl	8000ad8 <__aeabi_dcmpeq>
 8003b7a:	b108      	cbz	r0, 8003b80 <__cvt+0xa4>
 8003b7c:	f8cd 900c 	str.w	r9, [sp, #12]
 8003b80:	2230      	movs	r2, #48	; 0x30
 8003b82:	9b03      	ldr	r3, [sp, #12]
 8003b84:	454b      	cmp	r3, r9
 8003b86:	d307      	bcc.n	8003b98 <__cvt+0xbc>
 8003b88:	9b03      	ldr	r3, [sp, #12]
 8003b8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003b8c:	1bdb      	subs	r3, r3, r7
 8003b8e:	4638      	mov	r0, r7
 8003b90:	6013      	str	r3, [r2, #0]
 8003b92:	b004      	add	sp, #16
 8003b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b98:	1c59      	adds	r1, r3, #1
 8003b9a:	9103      	str	r1, [sp, #12]
 8003b9c:	701a      	strb	r2, [r3, #0]
 8003b9e:	e7f0      	b.n	8003b82 <__cvt+0xa6>

08003ba0 <__exponent>:
 8003ba0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2900      	cmp	r1, #0
 8003ba6:	bfb8      	it	lt
 8003ba8:	4249      	neglt	r1, r1
 8003baa:	f803 2b02 	strb.w	r2, [r3], #2
 8003bae:	bfb4      	ite	lt
 8003bb0:	222d      	movlt	r2, #45	; 0x2d
 8003bb2:	222b      	movge	r2, #43	; 0x2b
 8003bb4:	2909      	cmp	r1, #9
 8003bb6:	7042      	strb	r2, [r0, #1]
 8003bb8:	dd2a      	ble.n	8003c10 <__exponent+0x70>
 8003bba:	f10d 0207 	add.w	r2, sp, #7
 8003bbe:	4617      	mov	r7, r2
 8003bc0:	260a      	movs	r6, #10
 8003bc2:	4694      	mov	ip, r2
 8003bc4:	fb91 f5f6 	sdiv	r5, r1, r6
 8003bc8:	fb06 1415 	mls	r4, r6, r5, r1
 8003bcc:	3430      	adds	r4, #48	; 0x30
 8003bce:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8003bd2:	460c      	mov	r4, r1
 8003bd4:	2c63      	cmp	r4, #99	; 0x63
 8003bd6:	f102 32ff 	add.w	r2, r2, #4294967295
 8003bda:	4629      	mov	r1, r5
 8003bdc:	dcf1      	bgt.n	8003bc2 <__exponent+0x22>
 8003bde:	3130      	adds	r1, #48	; 0x30
 8003be0:	f1ac 0402 	sub.w	r4, ip, #2
 8003be4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003be8:	1c41      	adds	r1, r0, #1
 8003bea:	4622      	mov	r2, r4
 8003bec:	42ba      	cmp	r2, r7
 8003bee:	d30a      	bcc.n	8003c06 <__exponent+0x66>
 8003bf0:	f10d 0209 	add.w	r2, sp, #9
 8003bf4:	eba2 020c 	sub.w	r2, r2, ip
 8003bf8:	42bc      	cmp	r4, r7
 8003bfa:	bf88      	it	hi
 8003bfc:	2200      	movhi	r2, #0
 8003bfe:	4413      	add	r3, r2
 8003c00:	1a18      	subs	r0, r3, r0
 8003c02:	b003      	add	sp, #12
 8003c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c06:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003c0a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8003c0e:	e7ed      	b.n	8003bec <__exponent+0x4c>
 8003c10:	2330      	movs	r3, #48	; 0x30
 8003c12:	3130      	adds	r1, #48	; 0x30
 8003c14:	7083      	strb	r3, [r0, #2]
 8003c16:	70c1      	strb	r1, [r0, #3]
 8003c18:	1d03      	adds	r3, r0, #4
 8003c1a:	e7f1      	b.n	8003c00 <__exponent+0x60>

08003c1c <_printf_float>:
 8003c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c20:	ed2d 8b02 	vpush	{d8}
 8003c24:	b08d      	sub	sp, #52	; 0x34
 8003c26:	460c      	mov	r4, r1
 8003c28:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003c2c:	4616      	mov	r6, r2
 8003c2e:	461f      	mov	r7, r3
 8003c30:	4605      	mov	r5, r0
 8003c32:	f001 f8a9 	bl	8004d88 <_localeconv_r>
 8003c36:	f8d0 a000 	ldr.w	sl, [r0]
 8003c3a:	4650      	mov	r0, sl
 8003c3c:	f7fc fb20 	bl	8000280 <strlen>
 8003c40:	2300      	movs	r3, #0
 8003c42:	930a      	str	r3, [sp, #40]	; 0x28
 8003c44:	6823      	ldr	r3, [r4, #0]
 8003c46:	9305      	str	r3, [sp, #20]
 8003c48:	f8d8 3000 	ldr.w	r3, [r8]
 8003c4c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003c50:	3307      	adds	r3, #7
 8003c52:	f023 0307 	bic.w	r3, r3, #7
 8003c56:	f103 0208 	add.w	r2, r3, #8
 8003c5a:	f8c8 2000 	str.w	r2, [r8]
 8003c5e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003c62:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003c66:	9307      	str	r3, [sp, #28]
 8003c68:	f8cd 8018 	str.w	r8, [sp, #24]
 8003c6c:	ee08 0a10 	vmov	s16, r0
 8003c70:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8003c74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003c78:	4b9e      	ldr	r3, [pc, #632]	; (8003ef4 <_printf_float+0x2d8>)
 8003c7a:	f04f 32ff 	mov.w	r2, #4294967295
 8003c7e:	f7fc ff5d 	bl	8000b3c <__aeabi_dcmpun>
 8003c82:	bb88      	cbnz	r0, 8003ce8 <_printf_float+0xcc>
 8003c84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003c88:	4b9a      	ldr	r3, [pc, #616]	; (8003ef4 <_printf_float+0x2d8>)
 8003c8a:	f04f 32ff 	mov.w	r2, #4294967295
 8003c8e:	f7fc ff37 	bl	8000b00 <__aeabi_dcmple>
 8003c92:	bb48      	cbnz	r0, 8003ce8 <_printf_float+0xcc>
 8003c94:	2200      	movs	r2, #0
 8003c96:	2300      	movs	r3, #0
 8003c98:	4640      	mov	r0, r8
 8003c9a:	4649      	mov	r1, r9
 8003c9c:	f7fc ff26 	bl	8000aec <__aeabi_dcmplt>
 8003ca0:	b110      	cbz	r0, 8003ca8 <_printf_float+0x8c>
 8003ca2:	232d      	movs	r3, #45	; 0x2d
 8003ca4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ca8:	4a93      	ldr	r2, [pc, #588]	; (8003ef8 <_printf_float+0x2dc>)
 8003caa:	4b94      	ldr	r3, [pc, #592]	; (8003efc <_printf_float+0x2e0>)
 8003cac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003cb0:	bf94      	ite	ls
 8003cb2:	4690      	movls	r8, r2
 8003cb4:	4698      	movhi	r8, r3
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	6123      	str	r3, [r4, #16]
 8003cba:	9b05      	ldr	r3, [sp, #20]
 8003cbc:	f023 0304 	bic.w	r3, r3, #4
 8003cc0:	6023      	str	r3, [r4, #0]
 8003cc2:	f04f 0900 	mov.w	r9, #0
 8003cc6:	9700      	str	r7, [sp, #0]
 8003cc8:	4633      	mov	r3, r6
 8003cca:	aa0b      	add	r2, sp, #44	; 0x2c
 8003ccc:	4621      	mov	r1, r4
 8003cce:	4628      	mov	r0, r5
 8003cd0:	f000 f9da 	bl	8004088 <_printf_common>
 8003cd4:	3001      	adds	r0, #1
 8003cd6:	f040 8090 	bne.w	8003dfa <_printf_float+0x1de>
 8003cda:	f04f 30ff 	mov.w	r0, #4294967295
 8003cde:	b00d      	add	sp, #52	; 0x34
 8003ce0:	ecbd 8b02 	vpop	{d8}
 8003ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ce8:	4642      	mov	r2, r8
 8003cea:	464b      	mov	r3, r9
 8003cec:	4640      	mov	r0, r8
 8003cee:	4649      	mov	r1, r9
 8003cf0:	f7fc ff24 	bl	8000b3c <__aeabi_dcmpun>
 8003cf4:	b140      	cbz	r0, 8003d08 <_printf_float+0xec>
 8003cf6:	464b      	mov	r3, r9
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	bfbc      	itt	lt
 8003cfc:	232d      	movlt	r3, #45	; 0x2d
 8003cfe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003d02:	4a7f      	ldr	r2, [pc, #508]	; (8003f00 <_printf_float+0x2e4>)
 8003d04:	4b7f      	ldr	r3, [pc, #508]	; (8003f04 <_printf_float+0x2e8>)
 8003d06:	e7d1      	b.n	8003cac <_printf_float+0x90>
 8003d08:	6863      	ldr	r3, [r4, #4]
 8003d0a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003d0e:	9206      	str	r2, [sp, #24]
 8003d10:	1c5a      	adds	r2, r3, #1
 8003d12:	d13f      	bne.n	8003d94 <_printf_float+0x178>
 8003d14:	2306      	movs	r3, #6
 8003d16:	6063      	str	r3, [r4, #4]
 8003d18:	9b05      	ldr	r3, [sp, #20]
 8003d1a:	6861      	ldr	r1, [r4, #4]
 8003d1c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003d20:	2300      	movs	r3, #0
 8003d22:	9303      	str	r3, [sp, #12]
 8003d24:	ab0a      	add	r3, sp, #40	; 0x28
 8003d26:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003d2a:	ab09      	add	r3, sp, #36	; 0x24
 8003d2c:	ec49 8b10 	vmov	d0, r8, r9
 8003d30:	9300      	str	r3, [sp, #0]
 8003d32:	6022      	str	r2, [r4, #0]
 8003d34:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003d38:	4628      	mov	r0, r5
 8003d3a:	f7ff fecf 	bl	8003adc <__cvt>
 8003d3e:	9b06      	ldr	r3, [sp, #24]
 8003d40:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003d42:	2b47      	cmp	r3, #71	; 0x47
 8003d44:	4680      	mov	r8, r0
 8003d46:	d108      	bne.n	8003d5a <_printf_float+0x13e>
 8003d48:	1cc8      	adds	r0, r1, #3
 8003d4a:	db02      	blt.n	8003d52 <_printf_float+0x136>
 8003d4c:	6863      	ldr	r3, [r4, #4]
 8003d4e:	4299      	cmp	r1, r3
 8003d50:	dd41      	ble.n	8003dd6 <_printf_float+0x1ba>
 8003d52:	f1ab 0302 	sub.w	r3, fp, #2
 8003d56:	fa5f fb83 	uxtb.w	fp, r3
 8003d5a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003d5e:	d820      	bhi.n	8003da2 <_printf_float+0x186>
 8003d60:	3901      	subs	r1, #1
 8003d62:	465a      	mov	r2, fp
 8003d64:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003d68:	9109      	str	r1, [sp, #36]	; 0x24
 8003d6a:	f7ff ff19 	bl	8003ba0 <__exponent>
 8003d6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003d70:	1813      	adds	r3, r2, r0
 8003d72:	2a01      	cmp	r2, #1
 8003d74:	4681      	mov	r9, r0
 8003d76:	6123      	str	r3, [r4, #16]
 8003d78:	dc02      	bgt.n	8003d80 <_printf_float+0x164>
 8003d7a:	6822      	ldr	r2, [r4, #0]
 8003d7c:	07d2      	lsls	r2, r2, #31
 8003d7e:	d501      	bpl.n	8003d84 <_printf_float+0x168>
 8003d80:	3301      	adds	r3, #1
 8003d82:	6123      	str	r3, [r4, #16]
 8003d84:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d09c      	beq.n	8003cc6 <_printf_float+0xaa>
 8003d8c:	232d      	movs	r3, #45	; 0x2d
 8003d8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d92:	e798      	b.n	8003cc6 <_printf_float+0xaa>
 8003d94:	9a06      	ldr	r2, [sp, #24]
 8003d96:	2a47      	cmp	r2, #71	; 0x47
 8003d98:	d1be      	bne.n	8003d18 <_printf_float+0xfc>
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1bc      	bne.n	8003d18 <_printf_float+0xfc>
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e7b9      	b.n	8003d16 <_printf_float+0xfa>
 8003da2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003da6:	d118      	bne.n	8003dda <_printf_float+0x1be>
 8003da8:	2900      	cmp	r1, #0
 8003daa:	6863      	ldr	r3, [r4, #4]
 8003dac:	dd0b      	ble.n	8003dc6 <_printf_float+0x1aa>
 8003dae:	6121      	str	r1, [r4, #16]
 8003db0:	b913      	cbnz	r3, 8003db8 <_printf_float+0x19c>
 8003db2:	6822      	ldr	r2, [r4, #0]
 8003db4:	07d0      	lsls	r0, r2, #31
 8003db6:	d502      	bpl.n	8003dbe <_printf_float+0x1a2>
 8003db8:	3301      	adds	r3, #1
 8003dba:	440b      	add	r3, r1
 8003dbc:	6123      	str	r3, [r4, #16]
 8003dbe:	65a1      	str	r1, [r4, #88]	; 0x58
 8003dc0:	f04f 0900 	mov.w	r9, #0
 8003dc4:	e7de      	b.n	8003d84 <_printf_float+0x168>
 8003dc6:	b913      	cbnz	r3, 8003dce <_printf_float+0x1b2>
 8003dc8:	6822      	ldr	r2, [r4, #0]
 8003dca:	07d2      	lsls	r2, r2, #31
 8003dcc:	d501      	bpl.n	8003dd2 <_printf_float+0x1b6>
 8003dce:	3302      	adds	r3, #2
 8003dd0:	e7f4      	b.n	8003dbc <_printf_float+0x1a0>
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e7f2      	b.n	8003dbc <_printf_float+0x1a0>
 8003dd6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003dda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ddc:	4299      	cmp	r1, r3
 8003dde:	db05      	blt.n	8003dec <_printf_float+0x1d0>
 8003de0:	6823      	ldr	r3, [r4, #0]
 8003de2:	6121      	str	r1, [r4, #16]
 8003de4:	07d8      	lsls	r0, r3, #31
 8003de6:	d5ea      	bpl.n	8003dbe <_printf_float+0x1a2>
 8003de8:	1c4b      	adds	r3, r1, #1
 8003dea:	e7e7      	b.n	8003dbc <_printf_float+0x1a0>
 8003dec:	2900      	cmp	r1, #0
 8003dee:	bfd4      	ite	le
 8003df0:	f1c1 0202 	rsble	r2, r1, #2
 8003df4:	2201      	movgt	r2, #1
 8003df6:	4413      	add	r3, r2
 8003df8:	e7e0      	b.n	8003dbc <_printf_float+0x1a0>
 8003dfa:	6823      	ldr	r3, [r4, #0]
 8003dfc:	055a      	lsls	r2, r3, #21
 8003dfe:	d407      	bmi.n	8003e10 <_printf_float+0x1f4>
 8003e00:	6923      	ldr	r3, [r4, #16]
 8003e02:	4642      	mov	r2, r8
 8003e04:	4631      	mov	r1, r6
 8003e06:	4628      	mov	r0, r5
 8003e08:	47b8      	blx	r7
 8003e0a:	3001      	adds	r0, #1
 8003e0c:	d12c      	bne.n	8003e68 <_printf_float+0x24c>
 8003e0e:	e764      	b.n	8003cda <_printf_float+0xbe>
 8003e10:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003e14:	f240 80e0 	bls.w	8003fd8 <_printf_float+0x3bc>
 8003e18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	2300      	movs	r3, #0
 8003e20:	f7fc fe5a 	bl	8000ad8 <__aeabi_dcmpeq>
 8003e24:	2800      	cmp	r0, #0
 8003e26:	d034      	beq.n	8003e92 <_printf_float+0x276>
 8003e28:	4a37      	ldr	r2, [pc, #220]	; (8003f08 <_printf_float+0x2ec>)
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	4631      	mov	r1, r6
 8003e2e:	4628      	mov	r0, r5
 8003e30:	47b8      	blx	r7
 8003e32:	3001      	adds	r0, #1
 8003e34:	f43f af51 	beq.w	8003cda <_printf_float+0xbe>
 8003e38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	db02      	blt.n	8003e46 <_printf_float+0x22a>
 8003e40:	6823      	ldr	r3, [r4, #0]
 8003e42:	07d8      	lsls	r0, r3, #31
 8003e44:	d510      	bpl.n	8003e68 <_printf_float+0x24c>
 8003e46:	ee18 3a10 	vmov	r3, s16
 8003e4a:	4652      	mov	r2, sl
 8003e4c:	4631      	mov	r1, r6
 8003e4e:	4628      	mov	r0, r5
 8003e50:	47b8      	blx	r7
 8003e52:	3001      	adds	r0, #1
 8003e54:	f43f af41 	beq.w	8003cda <_printf_float+0xbe>
 8003e58:	f04f 0800 	mov.w	r8, #0
 8003e5c:	f104 091a 	add.w	r9, r4, #26
 8003e60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e62:	3b01      	subs	r3, #1
 8003e64:	4543      	cmp	r3, r8
 8003e66:	dc09      	bgt.n	8003e7c <_printf_float+0x260>
 8003e68:	6823      	ldr	r3, [r4, #0]
 8003e6a:	079b      	lsls	r3, r3, #30
 8003e6c:	f100 8107 	bmi.w	800407e <_printf_float+0x462>
 8003e70:	68e0      	ldr	r0, [r4, #12]
 8003e72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003e74:	4298      	cmp	r0, r3
 8003e76:	bfb8      	it	lt
 8003e78:	4618      	movlt	r0, r3
 8003e7a:	e730      	b.n	8003cde <_printf_float+0xc2>
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	464a      	mov	r2, r9
 8003e80:	4631      	mov	r1, r6
 8003e82:	4628      	mov	r0, r5
 8003e84:	47b8      	blx	r7
 8003e86:	3001      	adds	r0, #1
 8003e88:	f43f af27 	beq.w	8003cda <_printf_float+0xbe>
 8003e8c:	f108 0801 	add.w	r8, r8, #1
 8003e90:	e7e6      	b.n	8003e60 <_printf_float+0x244>
 8003e92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	dc39      	bgt.n	8003f0c <_printf_float+0x2f0>
 8003e98:	4a1b      	ldr	r2, [pc, #108]	; (8003f08 <_printf_float+0x2ec>)
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	4631      	mov	r1, r6
 8003e9e:	4628      	mov	r0, r5
 8003ea0:	47b8      	blx	r7
 8003ea2:	3001      	adds	r0, #1
 8003ea4:	f43f af19 	beq.w	8003cda <_printf_float+0xbe>
 8003ea8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003eac:	4313      	orrs	r3, r2
 8003eae:	d102      	bne.n	8003eb6 <_printf_float+0x29a>
 8003eb0:	6823      	ldr	r3, [r4, #0]
 8003eb2:	07d9      	lsls	r1, r3, #31
 8003eb4:	d5d8      	bpl.n	8003e68 <_printf_float+0x24c>
 8003eb6:	ee18 3a10 	vmov	r3, s16
 8003eba:	4652      	mov	r2, sl
 8003ebc:	4631      	mov	r1, r6
 8003ebe:	4628      	mov	r0, r5
 8003ec0:	47b8      	blx	r7
 8003ec2:	3001      	adds	r0, #1
 8003ec4:	f43f af09 	beq.w	8003cda <_printf_float+0xbe>
 8003ec8:	f04f 0900 	mov.w	r9, #0
 8003ecc:	f104 0a1a 	add.w	sl, r4, #26
 8003ed0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ed2:	425b      	negs	r3, r3
 8003ed4:	454b      	cmp	r3, r9
 8003ed6:	dc01      	bgt.n	8003edc <_printf_float+0x2c0>
 8003ed8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003eda:	e792      	b.n	8003e02 <_printf_float+0x1e6>
 8003edc:	2301      	movs	r3, #1
 8003ede:	4652      	mov	r2, sl
 8003ee0:	4631      	mov	r1, r6
 8003ee2:	4628      	mov	r0, r5
 8003ee4:	47b8      	blx	r7
 8003ee6:	3001      	adds	r0, #1
 8003ee8:	f43f aef7 	beq.w	8003cda <_printf_float+0xbe>
 8003eec:	f109 0901 	add.w	r9, r9, #1
 8003ef0:	e7ee      	b.n	8003ed0 <_printf_float+0x2b4>
 8003ef2:	bf00      	nop
 8003ef4:	7fefffff 	.word	0x7fefffff
 8003ef8:	0800848f 	.word	0x0800848f
 8003efc:	08008493 	.word	0x08008493
 8003f00:	08008497 	.word	0x08008497
 8003f04:	0800849b 	.word	0x0800849b
 8003f08:	0800849f 	.word	0x0800849f
 8003f0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003f0e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f10:	429a      	cmp	r2, r3
 8003f12:	bfa8      	it	ge
 8003f14:	461a      	movge	r2, r3
 8003f16:	2a00      	cmp	r2, #0
 8003f18:	4691      	mov	r9, r2
 8003f1a:	dc37      	bgt.n	8003f8c <_printf_float+0x370>
 8003f1c:	f04f 0b00 	mov.w	fp, #0
 8003f20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003f24:	f104 021a 	add.w	r2, r4, #26
 8003f28:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f2a:	9305      	str	r3, [sp, #20]
 8003f2c:	eba3 0309 	sub.w	r3, r3, r9
 8003f30:	455b      	cmp	r3, fp
 8003f32:	dc33      	bgt.n	8003f9c <_printf_float+0x380>
 8003f34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	db3b      	blt.n	8003fb4 <_printf_float+0x398>
 8003f3c:	6823      	ldr	r3, [r4, #0]
 8003f3e:	07da      	lsls	r2, r3, #31
 8003f40:	d438      	bmi.n	8003fb4 <_printf_float+0x398>
 8003f42:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003f46:	eba2 0903 	sub.w	r9, r2, r3
 8003f4a:	9b05      	ldr	r3, [sp, #20]
 8003f4c:	1ad2      	subs	r2, r2, r3
 8003f4e:	4591      	cmp	r9, r2
 8003f50:	bfa8      	it	ge
 8003f52:	4691      	movge	r9, r2
 8003f54:	f1b9 0f00 	cmp.w	r9, #0
 8003f58:	dc35      	bgt.n	8003fc6 <_printf_float+0x3aa>
 8003f5a:	f04f 0800 	mov.w	r8, #0
 8003f5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003f62:	f104 0a1a 	add.w	sl, r4, #26
 8003f66:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003f6a:	1a9b      	subs	r3, r3, r2
 8003f6c:	eba3 0309 	sub.w	r3, r3, r9
 8003f70:	4543      	cmp	r3, r8
 8003f72:	f77f af79 	ble.w	8003e68 <_printf_float+0x24c>
 8003f76:	2301      	movs	r3, #1
 8003f78:	4652      	mov	r2, sl
 8003f7a:	4631      	mov	r1, r6
 8003f7c:	4628      	mov	r0, r5
 8003f7e:	47b8      	blx	r7
 8003f80:	3001      	adds	r0, #1
 8003f82:	f43f aeaa 	beq.w	8003cda <_printf_float+0xbe>
 8003f86:	f108 0801 	add.w	r8, r8, #1
 8003f8a:	e7ec      	b.n	8003f66 <_printf_float+0x34a>
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	4631      	mov	r1, r6
 8003f90:	4642      	mov	r2, r8
 8003f92:	4628      	mov	r0, r5
 8003f94:	47b8      	blx	r7
 8003f96:	3001      	adds	r0, #1
 8003f98:	d1c0      	bne.n	8003f1c <_printf_float+0x300>
 8003f9a:	e69e      	b.n	8003cda <_printf_float+0xbe>
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	4631      	mov	r1, r6
 8003fa0:	4628      	mov	r0, r5
 8003fa2:	9205      	str	r2, [sp, #20]
 8003fa4:	47b8      	blx	r7
 8003fa6:	3001      	adds	r0, #1
 8003fa8:	f43f ae97 	beq.w	8003cda <_printf_float+0xbe>
 8003fac:	9a05      	ldr	r2, [sp, #20]
 8003fae:	f10b 0b01 	add.w	fp, fp, #1
 8003fb2:	e7b9      	b.n	8003f28 <_printf_float+0x30c>
 8003fb4:	ee18 3a10 	vmov	r3, s16
 8003fb8:	4652      	mov	r2, sl
 8003fba:	4631      	mov	r1, r6
 8003fbc:	4628      	mov	r0, r5
 8003fbe:	47b8      	blx	r7
 8003fc0:	3001      	adds	r0, #1
 8003fc2:	d1be      	bne.n	8003f42 <_printf_float+0x326>
 8003fc4:	e689      	b.n	8003cda <_printf_float+0xbe>
 8003fc6:	9a05      	ldr	r2, [sp, #20]
 8003fc8:	464b      	mov	r3, r9
 8003fca:	4442      	add	r2, r8
 8003fcc:	4631      	mov	r1, r6
 8003fce:	4628      	mov	r0, r5
 8003fd0:	47b8      	blx	r7
 8003fd2:	3001      	adds	r0, #1
 8003fd4:	d1c1      	bne.n	8003f5a <_printf_float+0x33e>
 8003fd6:	e680      	b.n	8003cda <_printf_float+0xbe>
 8003fd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003fda:	2a01      	cmp	r2, #1
 8003fdc:	dc01      	bgt.n	8003fe2 <_printf_float+0x3c6>
 8003fde:	07db      	lsls	r3, r3, #31
 8003fe0:	d53a      	bpl.n	8004058 <_printf_float+0x43c>
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	4642      	mov	r2, r8
 8003fe6:	4631      	mov	r1, r6
 8003fe8:	4628      	mov	r0, r5
 8003fea:	47b8      	blx	r7
 8003fec:	3001      	adds	r0, #1
 8003fee:	f43f ae74 	beq.w	8003cda <_printf_float+0xbe>
 8003ff2:	ee18 3a10 	vmov	r3, s16
 8003ff6:	4652      	mov	r2, sl
 8003ff8:	4631      	mov	r1, r6
 8003ffa:	4628      	mov	r0, r5
 8003ffc:	47b8      	blx	r7
 8003ffe:	3001      	adds	r0, #1
 8004000:	f43f ae6b 	beq.w	8003cda <_printf_float+0xbe>
 8004004:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004008:	2200      	movs	r2, #0
 800400a:	2300      	movs	r3, #0
 800400c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004010:	f7fc fd62 	bl	8000ad8 <__aeabi_dcmpeq>
 8004014:	b9d8      	cbnz	r0, 800404e <_printf_float+0x432>
 8004016:	f10a 33ff 	add.w	r3, sl, #4294967295
 800401a:	f108 0201 	add.w	r2, r8, #1
 800401e:	4631      	mov	r1, r6
 8004020:	4628      	mov	r0, r5
 8004022:	47b8      	blx	r7
 8004024:	3001      	adds	r0, #1
 8004026:	d10e      	bne.n	8004046 <_printf_float+0x42a>
 8004028:	e657      	b.n	8003cda <_printf_float+0xbe>
 800402a:	2301      	movs	r3, #1
 800402c:	4652      	mov	r2, sl
 800402e:	4631      	mov	r1, r6
 8004030:	4628      	mov	r0, r5
 8004032:	47b8      	blx	r7
 8004034:	3001      	adds	r0, #1
 8004036:	f43f ae50 	beq.w	8003cda <_printf_float+0xbe>
 800403a:	f108 0801 	add.w	r8, r8, #1
 800403e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004040:	3b01      	subs	r3, #1
 8004042:	4543      	cmp	r3, r8
 8004044:	dcf1      	bgt.n	800402a <_printf_float+0x40e>
 8004046:	464b      	mov	r3, r9
 8004048:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800404c:	e6da      	b.n	8003e04 <_printf_float+0x1e8>
 800404e:	f04f 0800 	mov.w	r8, #0
 8004052:	f104 0a1a 	add.w	sl, r4, #26
 8004056:	e7f2      	b.n	800403e <_printf_float+0x422>
 8004058:	2301      	movs	r3, #1
 800405a:	4642      	mov	r2, r8
 800405c:	e7df      	b.n	800401e <_printf_float+0x402>
 800405e:	2301      	movs	r3, #1
 8004060:	464a      	mov	r2, r9
 8004062:	4631      	mov	r1, r6
 8004064:	4628      	mov	r0, r5
 8004066:	47b8      	blx	r7
 8004068:	3001      	adds	r0, #1
 800406a:	f43f ae36 	beq.w	8003cda <_printf_float+0xbe>
 800406e:	f108 0801 	add.w	r8, r8, #1
 8004072:	68e3      	ldr	r3, [r4, #12]
 8004074:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004076:	1a5b      	subs	r3, r3, r1
 8004078:	4543      	cmp	r3, r8
 800407a:	dcf0      	bgt.n	800405e <_printf_float+0x442>
 800407c:	e6f8      	b.n	8003e70 <_printf_float+0x254>
 800407e:	f04f 0800 	mov.w	r8, #0
 8004082:	f104 0919 	add.w	r9, r4, #25
 8004086:	e7f4      	b.n	8004072 <_printf_float+0x456>

08004088 <_printf_common>:
 8004088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800408c:	4616      	mov	r6, r2
 800408e:	4699      	mov	r9, r3
 8004090:	688a      	ldr	r2, [r1, #8]
 8004092:	690b      	ldr	r3, [r1, #16]
 8004094:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004098:	4293      	cmp	r3, r2
 800409a:	bfb8      	it	lt
 800409c:	4613      	movlt	r3, r2
 800409e:	6033      	str	r3, [r6, #0]
 80040a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80040a4:	4607      	mov	r7, r0
 80040a6:	460c      	mov	r4, r1
 80040a8:	b10a      	cbz	r2, 80040ae <_printf_common+0x26>
 80040aa:	3301      	adds	r3, #1
 80040ac:	6033      	str	r3, [r6, #0]
 80040ae:	6823      	ldr	r3, [r4, #0]
 80040b0:	0699      	lsls	r1, r3, #26
 80040b2:	bf42      	ittt	mi
 80040b4:	6833      	ldrmi	r3, [r6, #0]
 80040b6:	3302      	addmi	r3, #2
 80040b8:	6033      	strmi	r3, [r6, #0]
 80040ba:	6825      	ldr	r5, [r4, #0]
 80040bc:	f015 0506 	ands.w	r5, r5, #6
 80040c0:	d106      	bne.n	80040d0 <_printf_common+0x48>
 80040c2:	f104 0a19 	add.w	sl, r4, #25
 80040c6:	68e3      	ldr	r3, [r4, #12]
 80040c8:	6832      	ldr	r2, [r6, #0]
 80040ca:	1a9b      	subs	r3, r3, r2
 80040cc:	42ab      	cmp	r3, r5
 80040ce:	dc26      	bgt.n	800411e <_printf_common+0x96>
 80040d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80040d4:	1e13      	subs	r3, r2, #0
 80040d6:	6822      	ldr	r2, [r4, #0]
 80040d8:	bf18      	it	ne
 80040da:	2301      	movne	r3, #1
 80040dc:	0692      	lsls	r2, r2, #26
 80040de:	d42b      	bmi.n	8004138 <_printf_common+0xb0>
 80040e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80040e4:	4649      	mov	r1, r9
 80040e6:	4638      	mov	r0, r7
 80040e8:	47c0      	blx	r8
 80040ea:	3001      	adds	r0, #1
 80040ec:	d01e      	beq.n	800412c <_printf_common+0xa4>
 80040ee:	6823      	ldr	r3, [r4, #0]
 80040f0:	6922      	ldr	r2, [r4, #16]
 80040f2:	f003 0306 	and.w	r3, r3, #6
 80040f6:	2b04      	cmp	r3, #4
 80040f8:	bf02      	ittt	eq
 80040fa:	68e5      	ldreq	r5, [r4, #12]
 80040fc:	6833      	ldreq	r3, [r6, #0]
 80040fe:	1aed      	subeq	r5, r5, r3
 8004100:	68a3      	ldr	r3, [r4, #8]
 8004102:	bf0c      	ite	eq
 8004104:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004108:	2500      	movne	r5, #0
 800410a:	4293      	cmp	r3, r2
 800410c:	bfc4      	itt	gt
 800410e:	1a9b      	subgt	r3, r3, r2
 8004110:	18ed      	addgt	r5, r5, r3
 8004112:	2600      	movs	r6, #0
 8004114:	341a      	adds	r4, #26
 8004116:	42b5      	cmp	r5, r6
 8004118:	d11a      	bne.n	8004150 <_printf_common+0xc8>
 800411a:	2000      	movs	r0, #0
 800411c:	e008      	b.n	8004130 <_printf_common+0xa8>
 800411e:	2301      	movs	r3, #1
 8004120:	4652      	mov	r2, sl
 8004122:	4649      	mov	r1, r9
 8004124:	4638      	mov	r0, r7
 8004126:	47c0      	blx	r8
 8004128:	3001      	adds	r0, #1
 800412a:	d103      	bne.n	8004134 <_printf_common+0xac>
 800412c:	f04f 30ff 	mov.w	r0, #4294967295
 8004130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004134:	3501      	adds	r5, #1
 8004136:	e7c6      	b.n	80040c6 <_printf_common+0x3e>
 8004138:	18e1      	adds	r1, r4, r3
 800413a:	1c5a      	adds	r2, r3, #1
 800413c:	2030      	movs	r0, #48	; 0x30
 800413e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004142:	4422      	add	r2, r4
 8004144:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004148:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800414c:	3302      	adds	r3, #2
 800414e:	e7c7      	b.n	80040e0 <_printf_common+0x58>
 8004150:	2301      	movs	r3, #1
 8004152:	4622      	mov	r2, r4
 8004154:	4649      	mov	r1, r9
 8004156:	4638      	mov	r0, r7
 8004158:	47c0      	blx	r8
 800415a:	3001      	adds	r0, #1
 800415c:	d0e6      	beq.n	800412c <_printf_common+0xa4>
 800415e:	3601      	adds	r6, #1
 8004160:	e7d9      	b.n	8004116 <_printf_common+0x8e>
	...

08004164 <_printf_i>:
 8004164:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004168:	7e0f      	ldrb	r7, [r1, #24]
 800416a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800416c:	2f78      	cmp	r7, #120	; 0x78
 800416e:	4691      	mov	r9, r2
 8004170:	4680      	mov	r8, r0
 8004172:	460c      	mov	r4, r1
 8004174:	469a      	mov	sl, r3
 8004176:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800417a:	d807      	bhi.n	800418c <_printf_i+0x28>
 800417c:	2f62      	cmp	r7, #98	; 0x62
 800417e:	d80a      	bhi.n	8004196 <_printf_i+0x32>
 8004180:	2f00      	cmp	r7, #0
 8004182:	f000 80d4 	beq.w	800432e <_printf_i+0x1ca>
 8004186:	2f58      	cmp	r7, #88	; 0x58
 8004188:	f000 80c0 	beq.w	800430c <_printf_i+0x1a8>
 800418c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004190:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004194:	e03a      	b.n	800420c <_printf_i+0xa8>
 8004196:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800419a:	2b15      	cmp	r3, #21
 800419c:	d8f6      	bhi.n	800418c <_printf_i+0x28>
 800419e:	a101      	add	r1, pc, #4	; (adr r1, 80041a4 <_printf_i+0x40>)
 80041a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80041a4:	080041fd 	.word	0x080041fd
 80041a8:	08004211 	.word	0x08004211
 80041ac:	0800418d 	.word	0x0800418d
 80041b0:	0800418d 	.word	0x0800418d
 80041b4:	0800418d 	.word	0x0800418d
 80041b8:	0800418d 	.word	0x0800418d
 80041bc:	08004211 	.word	0x08004211
 80041c0:	0800418d 	.word	0x0800418d
 80041c4:	0800418d 	.word	0x0800418d
 80041c8:	0800418d 	.word	0x0800418d
 80041cc:	0800418d 	.word	0x0800418d
 80041d0:	08004315 	.word	0x08004315
 80041d4:	0800423d 	.word	0x0800423d
 80041d8:	080042cf 	.word	0x080042cf
 80041dc:	0800418d 	.word	0x0800418d
 80041e0:	0800418d 	.word	0x0800418d
 80041e4:	08004337 	.word	0x08004337
 80041e8:	0800418d 	.word	0x0800418d
 80041ec:	0800423d 	.word	0x0800423d
 80041f0:	0800418d 	.word	0x0800418d
 80041f4:	0800418d 	.word	0x0800418d
 80041f8:	080042d7 	.word	0x080042d7
 80041fc:	682b      	ldr	r3, [r5, #0]
 80041fe:	1d1a      	adds	r2, r3, #4
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	602a      	str	r2, [r5, #0]
 8004204:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004208:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800420c:	2301      	movs	r3, #1
 800420e:	e09f      	b.n	8004350 <_printf_i+0x1ec>
 8004210:	6820      	ldr	r0, [r4, #0]
 8004212:	682b      	ldr	r3, [r5, #0]
 8004214:	0607      	lsls	r7, r0, #24
 8004216:	f103 0104 	add.w	r1, r3, #4
 800421a:	6029      	str	r1, [r5, #0]
 800421c:	d501      	bpl.n	8004222 <_printf_i+0xbe>
 800421e:	681e      	ldr	r6, [r3, #0]
 8004220:	e003      	b.n	800422a <_printf_i+0xc6>
 8004222:	0646      	lsls	r6, r0, #25
 8004224:	d5fb      	bpl.n	800421e <_printf_i+0xba>
 8004226:	f9b3 6000 	ldrsh.w	r6, [r3]
 800422a:	2e00      	cmp	r6, #0
 800422c:	da03      	bge.n	8004236 <_printf_i+0xd2>
 800422e:	232d      	movs	r3, #45	; 0x2d
 8004230:	4276      	negs	r6, r6
 8004232:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004236:	485a      	ldr	r0, [pc, #360]	; (80043a0 <_printf_i+0x23c>)
 8004238:	230a      	movs	r3, #10
 800423a:	e012      	b.n	8004262 <_printf_i+0xfe>
 800423c:	682b      	ldr	r3, [r5, #0]
 800423e:	6820      	ldr	r0, [r4, #0]
 8004240:	1d19      	adds	r1, r3, #4
 8004242:	6029      	str	r1, [r5, #0]
 8004244:	0605      	lsls	r5, r0, #24
 8004246:	d501      	bpl.n	800424c <_printf_i+0xe8>
 8004248:	681e      	ldr	r6, [r3, #0]
 800424a:	e002      	b.n	8004252 <_printf_i+0xee>
 800424c:	0641      	lsls	r1, r0, #25
 800424e:	d5fb      	bpl.n	8004248 <_printf_i+0xe4>
 8004250:	881e      	ldrh	r6, [r3, #0]
 8004252:	4853      	ldr	r0, [pc, #332]	; (80043a0 <_printf_i+0x23c>)
 8004254:	2f6f      	cmp	r7, #111	; 0x6f
 8004256:	bf0c      	ite	eq
 8004258:	2308      	moveq	r3, #8
 800425a:	230a      	movne	r3, #10
 800425c:	2100      	movs	r1, #0
 800425e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004262:	6865      	ldr	r5, [r4, #4]
 8004264:	60a5      	str	r5, [r4, #8]
 8004266:	2d00      	cmp	r5, #0
 8004268:	bfa2      	ittt	ge
 800426a:	6821      	ldrge	r1, [r4, #0]
 800426c:	f021 0104 	bicge.w	r1, r1, #4
 8004270:	6021      	strge	r1, [r4, #0]
 8004272:	b90e      	cbnz	r6, 8004278 <_printf_i+0x114>
 8004274:	2d00      	cmp	r5, #0
 8004276:	d04b      	beq.n	8004310 <_printf_i+0x1ac>
 8004278:	4615      	mov	r5, r2
 800427a:	fbb6 f1f3 	udiv	r1, r6, r3
 800427e:	fb03 6711 	mls	r7, r3, r1, r6
 8004282:	5dc7      	ldrb	r7, [r0, r7]
 8004284:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004288:	4637      	mov	r7, r6
 800428a:	42bb      	cmp	r3, r7
 800428c:	460e      	mov	r6, r1
 800428e:	d9f4      	bls.n	800427a <_printf_i+0x116>
 8004290:	2b08      	cmp	r3, #8
 8004292:	d10b      	bne.n	80042ac <_printf_i+0x148>
 8004294:	6823      	ldr	r3, [r4, #0]
 8004296:	07de      	lsls	r6, r3, #31
 8004298:	d508      	bpl.n	80042ac <_printf_i+0x148>
 800429a:	6923      	ldr	r3, [r4, #16]
 800429c:	6861      	ldr	r1, [r4, #4]
 800429e:	4299      	cmp	r1, r3
 80042a0:	bfde      	ittt	le
 80042a2:	2330      	movle	r3, #48	; 0x30
 80042a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80042a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80042ac:	1b52      	subs	r2, r2, r5
 80042ae:	6122      	str	r2, [r4, #16]
 80042b0:	f8cd a000 	str.w	sl, [sp]
 80042b4:	464b      	mov	r3, r9
 80042b6:	aa03      	add	r2, sp, #12
 80042b8:	4621      	mov	r1, r4
 80042ba:	4640      	mov	r0, r8
 80042bc:	f7ff fee4 	bl	8004088 <_printf_common>
 80042c0:	3001      	adds	r0, #1
 80042c2:	d14a      	bne.n	800435a <_printf_i+0x1f6>
 80042c4:	f04f 30ff 	mov.w	r0, #4294967295
 80042c8:	b004      	add	sp, #16
 80042ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042ce:	6823      	ldr	r3, [r4, #0]
 80042d0:	f043 0320 	orr.w	r3, r3, #32
 80042d4:	6023      	str	r3, [r4, #0]
 80042d6:	4833      	ldr	r0, [pc, #204]	; (80043a4 <_printf_i+0x240>)
 80042d8:	2778      	movs	r7, #120	; 0x78
 80042da:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80042de:	6823      	ldr	r3, [r4, #0]
 80042e0:	6829      	ldr	r1, [r5, #0]
 80042e2:	061f      	lsls	r7, r3, #24
 80042e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80042e8:	d402      	bmi.n	80042f0 <_printf_i+0x18c>
 80042ea:	065f      	lsls	r7, r3, #25
 80042ec:	bf48      	it	mi
 80042ee:	b2b6      	uxthmi	r6, r6
 80042f0:	07df      	lsls	r7, r3, #31
 80042f2:	bf48      	it	mi
 80042f4:	f043 0320 	orrmi.w	r3, r3, #32
 80042f8:	6029      	str	r1, [r5, #0]
 80042fa:	bf48      	it	mi
 80042fc:	6023      	strmi	r3, [r4, #0]
 80042fe:	b91e      	cbnz	r6, 8004308 <_printf_i+0x1a4>
 8004300:	6823      	ldr	r3, [r4, #0]
 8004302:	f023 0320 	bic.w	r3, r3, #32
 8004306:	6023      	str	r3, [r4, #0]
 8004308:	2310      	movs	r3, #16
 800430a:	e7a7      	b.n	800425c <_printf_i+0xf8>
 800430c:	4824      	ldr	r0, [pc, #144]	; (80043a0 <_printf_i+0x23c>)
 800430e:	e7e4      	b.n	80042da <_printf_i+0x176>
 8004310:	4615      	mov	r5, r2
 8004312:	e7bd      	b.n	8004290 <_printf_i+0x12c>
 8004314:	682b      	ldr	r3, [r5, #0]
 8004316:	6826      	ldr	r6, [r4, #0]
 8004318:	6961      	ldr	r1, [r4, #20]
 800431a:	1d18      	adds	r0, r3, #4
 800431c:	6028      	str	r0, [r5, #0]
 800431e:	0635      	lsls	r5, r6, #24
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	d501      	bpl.n	8004328 <_printf_i+0x1c4>
 8004324:	6019      	str	r1, [r3, #0]
 8004326:	e002      	b.n	800432e <_printf_i+0x1ca>
 8004328:	0670      	lsls	r0, r6, #25
 800432a:	d5fb      	bpl.n	8004324 <_printf_i+0x1c0>
 800432c:	8019      	strh	r1, [r3, #0]
 800432e:	2300      	movs	r3, #0
 8004330:	6123      	str	r3, [r4, #16]
 8004332:	4615      	mov	r5, r2
 8004334:	e7bc      	b.n	80042b0 <_printf_i+0x14c>
 8004336:	682b      	ldr	r3, [r5, #0]
 8004338:	1d1a      	adds	r2, r3, #4
 800433a:	602a      	str	r2, [r5, #0]
 800433c:	681d      	ldr	r5, [r3, #0]
 800433e:	6862      	ldr	r2, [r4, #4]
 8004340:	2100      	movs	r1, #0
 8004342:	4628      	mov	r0, r5
 8004344:	f7fb ff4c 	bl	80001e0 <memchr>
 8004348:	b108      	cbz	r0, 800434e <_printf_i+0x1ea>
 800434a:	1b40      	subs	r0, r0, r5
 800434c:	6060      	str	r0, [r4, #4]
 800434e:	6863      	ldr	r3, [r4, #4]
 8004350:	6123      	str	r3, [r4, #16]
 8004352:	2300      	movs	r3, #0
 8004354:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004358:	e7aa      	b.n	80042b0 <_printf_i+0x14c>
 800435a:	6923      	ldr	r3, [r4, #16]
 800435c:	462a      	mov	r2, r5
 800435e:	4649      	mov	r1, r9
 8004360:	4640      	mov	r0, r8
 8004362:	47d0      	blx	sl
 8004364:	3001      	adds	r0, #1
 8004366:	d0ad      	beq.n	80042c4 <_printf_i+0x160>
 8004368:	6823      	ldr	r3, [r4, #0]
 800436a:	079b      	lsls	r3, r3, #30
 800436c:	d413      	bmi.n	8004396 <_printf_i+0x232>
 800436e:	68e0      	ldr	r0, [r4, #12]
 8004370:	9b03      	ldr	r3, [sp, #12]
 8004372:	4298      	cmp	r0, r3
 8004374:	bfb8      	it	lt
 8004376:	4618      	movlt	r0, r3
 8004378:	e7a6      	b.n	80042c8 <_printf_i+0x164>
 800437a:	2301      	movs	r3, #1
 800437c:	4632      	mov	r2, r6
 800437e:	4649      	mov	r1, r9
 8004380:	4640      	mov	r0, r8
 8004382:	47d0      	blx	sl
 8004384:	3001      	adds	r0, #1
 8004386:	d09d      	beq.n	80042c4 <_printf_i+0x160>
 8004388:	3501      	adds	r5, #1
 800438a:	68e3      	ldr	r3, [r4, #12]
 800438c:	9903      	ldr	r1, [sp, #12]
 800438e:	1a5b      	subs	r3, r3, r1
 8004390:	42ab      	cmp	r3, r5
 8004392:	dcf2      	bgt.n	800437a <_printf_i+0x216>
 8004394:	e7eb      	b.n	800436e <_printf_i+0x20a>
 8004396:	2500      	movs	r5, #0
 8004398:	f104 0619 	add.w	r6, r4, #25
 800439c:	e7f5      	b.n	800438a <_printf_i+0x226>
 800439e:	bf00      	nop
 80043a0:	080084a1 	.word	0x080084a1
 80043a4:	080084b2 	.word	0x080084b2

080043a8 <_scanf_float>:
 80043a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043ac:	b087      	sub	sp, #28
 80043ae:	4617      	mov	r7, r2
 80043b0:	9303      	str	r3, [sp, #12]
 80043b2:	688b      	ldr	r3, [r1, #8]
 80043b4:	1e5a      	subs	r2, r3, #1
 80043b6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80043ba:	bf83      	ittte	hi
 80043bc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80043c0:	195b      	addhi	r3, r3, r5
 80043c2:	9302      	strhi	r3, [sp, #8]
 80043c4:	2300      	movls	r3, #0
 80043c6:	bf86      	itte	hi
 80043c8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80043cc:	608b      	strhi	r3, [r1, #8]
 80043ce:	9302      	strls	r3, [sp, #8]
 80043d0:	680b      	ldr	r3, [r1, #0]
 80043d2:	468b      	mov	fp, r1
 80043d4:	2500      	movs	r5, #0
 80043d6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80043da:	f84b 3b1c 	str.w	r3, [fp], #28
 80043de:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80043e2:	4680      	mov	r8, r0
 80043e4:	460c      	mov	r4, r1
 80043e6:	465e      	mov	r6, fp
 80043e8:	46aa      	mov	sl, r5
 80043ea:	46a9      	mov	r9, r5
 80043ec:	9501      	str	r5, [sp, #4]
 80043ee:	68a2      	ldr	r2, [r4, #8]
 80043f0:	b152      	cbz	r2, 8004408 <_scanf_float+0x60>
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	2b4e      	cmp	r3, #78	; 0x4e
 80043f8:	d864      	bhi.n	80044c4 <_scanf_float+0x11c>
 80043fa:	2b40      	cmp	r3, #64	; 0x40
 80043fc:	d83c      	bhi.n	8004478 <_scanf_float+0xd0>
 80043fe:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004402:	b2c8      	uxtb	r0, r1
 8004404:	280e      	cmp	r0, #14
 8004406:	d93a      	bls.n	800447e <_scanf_float+0xd6>
 8004408:	f1b9 0f00 	cmp.w	r9, #0
 800440c:	d003      	beq.n	8004416 <_scanf_float+0x6e>
 800440e:	6823      	ldr	r3, [r4, #0]
 8004410:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004414:	6023      	str	r3, [r4, #0]
 8004416:	f10a 3aff 	add.w	sl, sl, #4294967295
 800441a:	f1ba 0f01 	cmp.w	sl, #1
 800441e:	f200 8113 	bhi.w	8004648 <_scanf_float+0x2a0>
 8004422:	455e      	cmp	r6, fp
 8004424:	f200 8105 	bhi.w	8004632 <_scanf_float+0x28a>
 8004428:	2501      	movs	r5, #1
 800442a:	4628      	mov	r0, r5
 800442c:	b007      	add	sp, #28
 800442e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004432:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004436:	2a0d      	cmp	r2, #13
 8004438:	d8e6      	bhi.n	8004408 <_scanf_float+0x60>
 800443a:	a101      	add	r1, pc, #4	; (adr r1, 8004440 <_scanf_float+0x98>)
 800443c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004440:	0800457f 	.word	0x0800457f
 8004444:	08004409 	.word	0x08004409
 8004448:	08004409 	.word	0x08004409
 800444c:	08004409 	.word	0x08004409
 8004450:	080045df 	.word	0x080045df
 8004454:	080045b7 	.word	0x080045b7
 8004458:	08004409 	.word	0x08004409
 800445c:	08004409 	.word	0x08004409
 8004460:	0800458d 	.word	0x0800458d
 8004464:	08004409 	.word	0x08004409
 8004468:	08004409 	.word	0x08004409
 800446c:	08004409 	.word	0x08004409
 8004470:	08004409 	.word	0x08004409
 8004474:	08004545 	.word	0x08004545
 8004478:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800447c:	e7db      	b.n	8004436 <_scanf_float+0x8e>
 800447e:	290e      	cmp	r1, #14
 8004480:	d8c2      	bhi.n	8004408 <_scanf_float+0x60>
 8004482:	a001      	add	r0, pc, #4	; (adr r0, 8004488 <_scanf_float+0xe0>)
 8004484:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004488:	08004537 	.word	0x08004537
 800448c:	08004409 	.word	0x08004409
 8004490:	08004537 	.word	0x08004537
 8004494:	080045cb 	.word	0x080045cb
 8004498:	08004409 	.word	0x08004409
 800449c:	080044e5 	.word	0x080044e5
 80044a0:	08004521 	.word	0x08004521
 80044a4:	08004521 	.word	0x08004521
 80044a8:	08004521 	.word	0x08004521
 80044ac:	08004521 	.word	0x08004521
 80044b0:	08004521 	.word	0x08004521
 80044b4:	08004521 	.word	0x08004521
 80044b8:	08004521 	.word	0x08004521
 80044bc:	08004521 	.word	0x08004521
 80044c0:	08004521 	.word	0x08004521
 80044c4:	2b6e      	cmp	r3, #110	; 0x6e
 80044c6:	d809      	bhi.n	80044dc <_scanf_float+0x134>
 80044c8:	2b60      	cmp	r3, #96	; 0x60
 80044ca:	d8b2      	bhi.n	8004432 <_scanf_float+0x8a>
 80044cc:	2b54      	cmp	r3, #84	; 0x54
 80044ce:	d077      	beq.n	80045c0 <_scanf_float+0x218>
 80044d0:	2b59      	cmp	r3, #89	; 0x59
 80044d2:	d199      	bne.n	8004408 <_scanf_float+0x60>
 80044d4:	2d07      	cmp	r5, #7
 80044d6:	d197      	bne.n	8004408 <_scanf_float+0x60>
 80044d8:	2508      	movs	r5, #8
 80044da:	e029      	b.n	8004530 <_scanf_float+0x188>
 80044dc:	2b74      	cmp	r3, #116	; 0x74
 80044de:	d06f      	beq.n	80045c0 <_scanf_float+0x218>
 80044e0:	2b79      	cmp	r3, #121	; 0x79
 80044e2:	e7f6      	b.n	80044d2 <_scanf_float+0x12a>
 80044e4:	6821      	ldr	r1, [r4, #0]
 80044e6:	05c8      	lsls	r0, r1, #23
 80044e8:	d51a      	bpl.n	8004520 <_scanf_float+0x178>
 80044ea:	9b02      	ldr	r3, [sp, #8]
 80044ec:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80044f0:	6021      	str	r1, [r4, #0]
 80044f2:	f109 0901 	add.w	r9, r9, #1
 80044f6:	b11b      	cbz	r3, 8004500 <_scanf_float+0x158>
 80044f8:	3b01      	subs	r3, #1
 80044fa:	3201      	adds	r2, #1
 80044fc:	9302      	str	r3, [sp, #8]
 80044fe:	60a2      	str	r2, [r4, #8]
 8004500:	68a3      	ldr	r3, [r4, #8]
 8004502:	3b01      	subs	r3, #1
 8004504:	60a3      	str	r3, [r4, #8]
 8004506:	6923      	ldr	r3, [r4, #16]
 8004508:	3301      	adds	r3, #1
 800450a:	6123      	str	r3, [r4, #16]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	3b01      	subs	r3, #1
 8004510:	2b00      	cmp	r3, #0
 8004512:	607b      	str	r3, [r7, #4]
 8004514:	f340 8084 	ble.w	8004620 <_scanf_float+0x278>
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	3301      	adds	r3, #1
 800451c:	603b      	str	r3, [r7, #0]
 800451e:	e766      	b.n	80043ee <_scanf_float+0x46>
 8004520:	eb1a 0f05 	cmn.w	sl, r5
 8004524:	f47f af70 	bne.w	8004408 <_scanf_float+0x60>
 8004528:	6822      	ldr	r2, [r4, #0]
 800452a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800452e:	6022      	str	r2, [r4, #0]
 8004530:	f806 3b01 	strb.w	r3, [r6], #1
 8004534:	e7e4      	b.n	8004500 <_scanf_float+0x158>
 8004536:	6822      	ldr	r2, [r4, #0]
 8004538:	0610      	lsls	r0, r2, #24
 800453a:	f57f af65 	bpl.w	8004408 <_scanf_float+0x60>
 800453e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004542:	e7f4      	b.n	800452e <_scanf_float+0x186>
 8004544:	f1ba 0f00 	cmp.w	sl, #0
 8004548:	d10e      	bne.n	8004568 <_scanf_float+0x1c0>
 800454a:	f1b9 0f00 	cmp.w	r9, #0
 800454e:	d10e      	bne.n	800456e <_scanf_float+0x1c6>
 8004550:	6822      	ldr	r2, [r4, #0]
 8004552:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004556:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800455a:	d108      	bne.n	800456e <_scanf_float+0x1c6>
 800455c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004560:	6022      	str	r2, [r4, #0]
 8004562:	f04f 0a01 	mov.w	sl, #1
 8004566:	e7e3      	b.n	8004530 <_scanf_float+0x188>
 8004568:	f1ba 0f02 	cmp.w	sl, #2
 800456c:	d055      	beq.n	800461a <_scanf_float+0x272>
 800456e:	2d01      	cmp	r5, #1
 8004570:	d002      	beq.n	8004578 <_scanf_float+0x1d0>
 8004572:	2d04      	cmp	r5, #4
 8004574:	f47f af48 	bne.w	8004408 <_scanf_float+0x60>
 8004578:	3501      	adds	r5, #1
 800457a:	b2ed      	uxtb	r5, r5
 800457c:	e7d8      	b.n	8004530 <_scanf_float+0x188>
 800457e:	f1ba 0f01 	cmp.w	sl, #1
 8004582:	f47f af41 	bne.w	8004408 <_scanf_float+0x60>
 8004586:	f04f 0a02 	mov.w	sl, #2
 800458a:	e7d1      	b.n	8004530 <_scanf_float+0x188>
 800458c:	b97d      	cbnz	r5, 80045ae <_scanf_float+0x206>
 800458e:	f1b9 0f00 	cmp.w	r9, #0
 8004592:	f47f af3c 	bne.w	800440e <_scanf_float+0x66>
 8004596:	6822      	ldr	r2, [r4, #0]
 8004598:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800459c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80045a0:	f47f af39 	bne.w	8004416 <_scanf_float+0x6e>
 80045a4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80045a8:	6022      	str	r2, [r4, #0]
 80045aa:	2501      	movs	r5, #1
 80045ac:	e7c0      	b.n	8004530 <_scanf_float+0x188>
 80045ae:	2d03      	cmp	r5, #3
 80045b0:	d0e2      	beq.n	8004578 <_scanf_float+0x1d0>
 80045b2:	2d05      	cmp	r5, #5
 80045b4:	e7de      	b.n	8004574 <_scanf_float+0x1cc>
 80045b6:	2d02      	cmp	r5, #2
 80045b8:	f47f af26 	bne.w	8004408 <_scanf_float+0x60>
 80045bc:	2503      	movs	r5, #3
 80045be:	e7b7      	b.n	8004530 <_scanf_float+0x188>
 80045c0:	2d06      	cmp	r5, #6
 80045c2:	f47f af21 	bne.w	8004408 <_scanf_float+0x60>
 80045c6:	2507      	movs	r5, #7
 80045c8:	e7b2      	b.n	8004530 <_scanf_float+0x188>
 80045ca:	6822      	ldr	r2, [r4, #0]
 80045cc:	0591      	lsls	r1, r2, #22
 80045ce:	f57f af1b 	bpl.w	8004408 <_scanf_float+0x60>
 80045d2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80045d6:	6022      	str	r2, [r4, #0]
 80045d8:	f8cd 9004 	str.w	r9, [sp, #4]
 80045dc:	e7a8      	b.n	8004530 <_scanf_float+0x188>
 80045de:	6822      	ldr	r2, [r4, #0]
 80045e0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80045e4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80045e8:	d006      	beq.n	80045f8 <_scanf_float+0x250>
 80045ea:	0550      	lsls	r0, r2, #21
 80045ec:	f57f af0c 	bpl.w	8004408 <_scanf_float+0x60>
 80045f0:	f1b9 0f00 	cmp.w	r9, #0
 80045f4:	f43f af0f 	beq.w	8004416 <_scanf_float+0x6e>
 80045f8:	0591      	lsls	r1, r2, #22
 80045fa:	bf58      	it	pl
 80045fc:	9901      	ldrpl	r1, [sp, #4]
 80045fe:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004602:	bf58      	it	pl
 8004604:	eba9 0101 	subpl.w	r1, r9, r1
 8004608:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800460c:	bf58      	it	pl
 800460e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004612:	6022      	str	r2, [r4, #0]
 8004614:	f04f 0900 	mov.w	r9, #0
 8004618:	e78a      	b.n	8004530 <_scanf_float+0x188>
 800461a:	f04f 0a03 	mov.w	sl, #3
 800461e:	e787      	b.n	8004530 <_scanf_float+0x188>
 8004620:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004624:	4639      	mov	r1, r7
 8004626:	4640      	mov	r0, r8
 8004628:	4798      	blx	r3
 800462a:	2800      	cmp	r0, #0
 800462c:	f43f aedf 	beq.w	80043ee <_scanf_float+0x46>
 8004630:	e6ea      	b.n	8004408 <_scanf_float+0x60>
 8004632:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004636:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800463a:	463a      	mov	r2, r7
 800463c:	4640      	mov	r0, r8
 800463e:	4798      	blx	r3
 8004640:	6923      	ldr	r3, [r4, #16]
 8004642:	3b01      	subs	r3, #1
 8004644:	6123      	str	r3, [r4, #16]
 8004646:	e6ec      	b.n	8004422 <_scanf_float+0x7a>
 8004648:	1e6b      	subs	r3, r5, #1
 800464a:	2b06      	cmp	r3, #6
 800464c:	d825      	bhi.n	800469a <_scanf_float+0x2f2>
 800464e:	2d02      	cmp	r5, #2
 8004650:	d836      	bhi.n	80046c0 <_scanf_float+0x318>
 8004652:	455e      	cmp	r6, fp
 8004654:	f67f aee8 	bls.w	8004428 <_scanf_float+0x80>
 8004658:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800465c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004660:	463a      	mov	r2, r7
 8004662:	4640      	mov	r0, r8
 8004664:	4798      	blx	r3
 8004666:	6923      	ldr	r3, [r4, #16]
 8004668:	3b01      	subs	r3, #1
 800466a:	6123      	str	r3, [r4, #16]
 800466c:	e7f1      	b.n	8004652 <_scanf_float+0x2aa>
 800466e:	9802      	ldr	r0, [sp, #8]
 8004670:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004674:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004678:	9002      	str	r0, [sp, #8]
 800467a:	463a      	mov	r2, r7
 800467c:	4640      	mov	r0, r8
 800467e:	4798      	blx	r3
 8004680:	6923      	ldr	r3, [r4, #16]
 8004682:	3b01      	subs	r3, #1
 8004684:	6123      	str	r3, [r4, #16]
 8004686:	f10a 3aff 	add.w	sl, sl, #4294967295
 800468a:	fa5f fa8a 	uxtb.w	sl, sl
 800468e:	f1ba 0f02 	cmp.w	sl, #2
 8004692:	d1ec      	bne.n	800466e <_scanf_float+0x2c6>
 8004694:	3d03      	subs	r5, #3
 8004696:	b2ed      	uxtb	r5, r5
 8004698:	1b76      	subs	r6, r6, r5
 800469a:	6823      	ldr	r3, [r4, #0]
 800469c:	05da      	lsls	r2, r3, #23
 800469e:	d52f      	bpl.n	8004700 <_scanf_float+0x358>
 80046a0:	055b      	lsls	r3, r3, #21
 80046a2:	d510      	bpl.n	80046c6 <_scanf_float+0x31e>
 80046a4:	455e      	cmp	r6, fp
 80046a6:	f67f aebf 	bls.w	8004428 <_scanf_float+0x80>
 80046aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80046ae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80046b2:	463a      	mov	r2, r7
 80046b4:	4640      	mov	r0, r8
 80046b6:	4798      	blx	r3
 80046b8:	6923      	ldr	r3, [r4, #16]
 80046ba:	3b01      	subs	r3, #1
 80046bc:	6123      	str	r3, [r4, #16]
 80046be:	e7f1      	b.n	80046a4 <_scanf_float+0x2fc>
 80046c0:	46aa      	mov	sl, r5
 80046c2:	9602      	str	r6, [sp, #8]
 80046c4:	e7df      	b.n	8004686 <_scanf_float+0x2de>
 80046c6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80046ca:	6923      	ldr	r3, [r4, #16]
 80046cc:	2965      	cmp	r1, #101	; 0x65
 80046ce:	f103 33ff 	add.w	r3, r3, #4294967295
 80046d2:	f106 35ff 	add.w	r5, r6, #4294967295
 80046d6:	6123      	str	r3, [r4, #16]
 80046d8:	d00c      	beq.n	80046f4 <_scanf_float+0x34c>
 80046da:	2945      	cmp	r1, #69	; 0x45
 80046dc:	d00a      	beq.n	80046f4 <_scanf_float+0x34c>
 80046de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80046e2:	463a      	mov	r2, r7
 80046e4:	4640      	mov	r0, r8
 80046e6:	4798      	blx	r3
 80046e8:	6923      	ldr	r3, [r4, #16]
 80046ea:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80046ee:	3b01      	subs	r3, #1
 80046f0:	1eb5      	subs	r5, r6, #2
 80046f2:	6123      	str	r3, [r4, #16]
 80046f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80046f8:	463a      	mov	r2, r7
 80046fa:	4640      	mov	r0, r8
 80046fc:	4798      	blx	r3
 80046fe:	462e      	mov	r6, r5
 8004700:	6825      	ldr	r5, [r4, #0]
 8004702:	f015 0510 	ands.w	r5, r5, #16
 8004706:	d158      	bne.n	80047ba <_scanf_float+0x412>
 8004708:	7035      	strb	r5, [r6, #0]
 800470a:	6823      	ldr	r3, [r4, #0]
 800470c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004710:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004714:	d11c      	bne.n	8004750 <_scanf_float+0x3a8>
 8004716:	9b01      	ldr	r3, [sp, #4]
 8004718:	454b      	cmp	r3, r9
 800471a:	eba3 0209 	sub.w	r2, r3, r9
 800471e:	d124      	bne.n	800476a <_scanf_float+0x3c2>
 8004720:	2200      	movs	r2, #0
 8004722:	4659      	mov	r1, fp
 8004724:	4640      	mov	r0, r8
 8004726:	f002 fdff 	bl	8007328 <_strtod_r>
 800472a:	9b03      	ldr	r3, [sp, #12]
 800472c:	6821      	ldr	r1, [r4, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f011 0f02 	tst.w	r1, #2
 8004734:	ec57 6b10 	vmov	r6, r7, d0
 8004738:	f103 0204 	add.w	r2, r3, #4
 800473c:	d020      	beq.n	8004780 <_scanf_float+0x3d8>
 800473e:	9903      	ldr	r1, [sp, #12]
 8004740:	600a      	str	r2, [r1, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	e9c3 6700 	strd	r6, r7, [r3]
 8004748:	68e3      	ldr	r3, [r4, #12]
 800474a:	3301      	adds	r3, #1
 800474c:	60e3      	str	r3, [r4, #12]
 800474e:	e66c      	b.n	800442a <_scanf_float+0x82>
 8004750:	9b04      	ldr	r3, [sp, #16]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d0e4      	beq.n	8004720 <_scanf_float+0x378>
 8004756:	9905      	ldr	r1, [sp, #20]
 8004758:	230a      	movs	r3, #10
 800475a:	462a      	mov	r2, r5
 800475c:	3101      	adds	r1, #1
 800475e:	4640      	mov	r0, r8
 8004760:	f002 fe6a 	bl	8007438 <_strtol_r>
 8004764:	9b04      	ldr	r3, [sp, #16]
 8004766:	9e05      	ldr	r6, [sp, #20]
 8004768:	1ac2      	subs	r2, r0, r3
 800476a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800476e:	429e      	cmp	r6, r3
 8004770:	bf28      	it	cs
 8004772:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004776:	4912      	ldr	r1, [pc, #72]	; (80047c0 <_scanf_float+0x418>)
 8004778:	4630      	mov	r0, r6
 800477a:	f000 fa05 	bl	8004b88 <siprintf>
 800477e:	e7cf      	b.n	8004720 <_scanf_float+0x378>
 8004780:	f011 0f04 	tst.w	r1, #4
 8004784:	9903      	ldr	r1, [sp, #12]
 8004786:	600a      	str	r2, [r1, #0]
 8004788:	d1db      	bne.n	8004742 <_scanf_float+0x39a>
 800478a:	f8d3 8000 	ldr.w	r8, [r3]
 800478e:	ee10 2a10 	vmov	r2, s0
 8004792:	ee10 0a10 	vmov	r0, s0
 8004796:	463b      	mov	r3, r7
 8004798:	4639      	mov	r1, r7
 800479a:	f7fc f9cf 	bl	8000b3c <__aeabi_dcmpun>
 800479e:	b128      	cbz	r0, 80047ac <_scanf_float+0x404>
 80047a0:	4808      	ldr	r0, [pc, #32]	; (80047c4 <_scanf_float+0x41c>)
 80047a2:	f000 fb67 	bl	8004e74 <nanf>
 80047a6:	ed88 0a00 	vstr	s0, [r8]
 80047aa:	e7cd      	b.n	8004748 <_scanf_float+0x3a0>
 80047ac:	4630      	mov	r0, r6
 80047ae:	4639      	mov	r1, r7
 80047b0:	f7fc fa22 	bl	8000bf8 <__aeabi_d2f>
 80047b4:	f8c8 0000 	str.w	r0, [r8]
 80047b8:	e7c6      	b.n	8004748 <_scanf_float+0x3a0>
 80047ba:	2500      	movs	r5, #0
 80047bc:	e635      	b.n	800442a <_scanf_float+0x82>
 80047be:	bf00      	nop
 80047c0:	080084c3 	.word	0x080084c3
 80047c4:	08008503 	.word	0x08008503

080047c8 <__sflush_r>:
 80047c8:	898a      	ldrh	r2, [r1, #12]
 80047ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047ce:	4605      	mov	r5, r0
 80047d0:	0710      	lsls	r0, r2, #28
 80047d2:	460c      	mov	r4, r1
 80047d4:	d458      	bmi.n	8004888 <__sflush_r+0xc0>
 80047d6:	684b      	ldr	r3, [r1, #4]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	dc05      	bgt.n	80047e8 <__sflush_r+0x20>
 80047dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80047de:	2b00      	cmp	r3, #0
 80047e0:	dc02      	bgt.n	80047e8 <__sflush_r+0x20>
 80047e2:	2000      	movs	r0, #0
 80047e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80047ea:	2e00      	cmp	r6, #0
 80047ec:	d0f9      	beq.n	80047e2 <__sflush_r+0x1a>
 80047ee:	2300      	movs	r3, #0
 80047f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80047f4:	682f      	ldr	r7, [r5, #0]
 80047f6:	6a21      	ldr	r1, [r4, #32]
 80047f8:	602b      	str	r3, [r5, #0]
 80047fa:	d032      	beq.n	8004862 <__sflush_r+0x9a>
 80047fc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80047fe:	89a3      	ldrh	r3, [r4, #12]
 8004800:	075a      	lsls	r2, r3, #29
 8004802:	d505      	bpl.n	8004810 <__sflush_r+0x48>
 8004804:	6863      	ldr	r3, [r4, #4]
 8004806:	1ac0      	subs	r0, r0, r3
 8004808:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800480a:	b10b      	cbz	r3, 8004810 <__sflush_r+0x48>
 800480c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800480e:	1ac0      	subs	r0, r0, r3
 8004810:	2300      	movs	r3, #0
 8004812:	4602      	mov	r2, r0
 8004814:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004816:	6a21      	ldr	r1, [r4, #32]
 8004818:	4628      	mov	r0, r5
 800481a:	47b0      	blx	r6
 800481c:	1c43      	adds	r3, r0, #1
 800481e:	89a3      	ldrh	r3, [r4, #12]
 8004820:	d106      	bne.n	8004830 <__sflush_r+0x68>
 8004822:	6829      	ldr	r1, [r5, #0]
 8004824:	291d      	cmp	r1, #29
 8004826:	d82b      	bhi.n	8004880 <__sflush_r+0xb8>
 8004828:	4a29      	ldr	r2, [pc, #164]	; (80048d0 <__sflush_r+0x108>)
 800482a:	410a      	asrs	r2, r1
 800482c:	07d6      	lsls	r6, r2, #31
 800482e:	d427      	bmi.n	8004880 <__sflush_r+0xb8>
 8004830:	2200      	movs	r2, #0
 8004832:	6062      	str	r2, [r4, #4]
 8004834:	04d9      	lsls	r1, r3, #19
 8004836:	6922      	ldr	r2, [r4, #16]
 8004838:	6022      	str	r2, [r4, #0]
 800483a:	d504      	bpl.n	8004846 <__sflush_r+0x7e>
 800483c:	1c42      	adds	r2, r0, #1
 800483e:	d101      	bne.n	8004844 <__sflush_r+0x7c>
 8004840:	682b      	ldr	r3, [r5, #0]
 8004842:	b903      	cbnz	r3, 8004846 <__sflush_r+0x7e>
 8004844:	6560      	str	r0, [r4, #84]	; 0x54
 8004846:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004848:	602f      	str	r7, [r5, #0]
 800484a:	2900      	cmp	r1, #0
 800484c:	d0c9      	beq.n	80047e2 <__sflush_r+0x1a>
 800484e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004852:	4299      	cmp	r1, r3
 8004854:	d002      	beq.n	800485c <__sflush_r+0x94>
 8004856:	4628      	mov	r0, r5
 8004858:	f001 f9ac 	bl	8005bb4 <_free_r>
 800485c:	2000      	movs	r0, #0
 800485e:	6360      	str	r0, [r4, #52]	; 0x34
 8004860:	e7c0      	b.n	80047e4 <__sflush_r+0x1c>
 8004862:	2301      	movs	r3, #1
 8004864:	4628      	mov	r0, r5
 8004866:	47b0      	blx	r6
 8004868:	1c41      	adds	r1, r0, #1
 800486a:	d1c8      	bne.n	80047fe <__sflush_r+0x36>
 800486c:	682b      	ldr	r3, [r5, #0]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d0c5      	beq.n	80047fe <__sflush_r+0x36>
 8004872:	2b1d      	cmp	r3, #29
 8004874:	d001      	beq.n	800487a <__sflush_r+0xb2>
 8004876:	2b16      	cmp	r3, #22
 8004878:	d101      	bne.n	800487e <__sflush_r+0xb6>
 800487a:	602f      	str	r7, [r5, #0]
 800487c:	e7b1      	b.n	80047e2 <__sflush_r+0x1a>
 800487e:	89a3      	ldrh	r3, [r4, #12]
 8004880:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004884:	81a3      	strh	r3, [r4, #12]
 8004886:	e7ad      	b.n	80047e4 <__sflush_r+0x1c>
 8004888:	690f      	ldr	r7, [r1, #16]
 800488a:	2f00      	cmp	r7, #0
 800488c:	d0a9      	beq.n	80047e2 <__sflush_r+0x1a>
 800488e:	0793      	lsls	r3, r2, #30
 8004890:	680e      	ldr	r6, [r1, #0]
 8004892:	bf08      	it	eq
 8004894:	694b      	ldreq	r3, [r1, #20]
 8004896:	600f      	str	r7, [r1, #0]
 8004898:	bf18      	it	ne
 800489a:	2300      	movne	r3, #0
 800489c:	eba6 0807 	sub.w	r8, r6, r7
 80048a0:	608b      	str	r3, [r1, #8]
 80048a2:	f1b8 0f00 	cmp.w	r8, #0
 80048a6:	dd9c      	ble.n	80047e2 <__sflush_r+0x1a>
 80048a8:	6a21      	ldr	r1, [r4, #32]
 80048aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80048ac:	4643      	mov	r3, r8
 80048ae:	463a      	mov	r2, r7
 80048b0:	4628      	mov	r0, r5
 80048b2:	47b0      	blx	r6
 80048b4:	2800      	cmp	r0, #0
 80048b6:	dc06      	bgt.n	80048c6 <__sflush_r+0xfe>
 80048b8:	89a3      	ldrh	r3, [r4, #12]
 80048ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048be:	81a3      	strh	r3, [r4, #12]
 80048c0:	f04f 30ff 	mov.w	r0, #4294967295
 80048c4:	e78e      	b.n	80047e4 <__sflush_r+0x1c>
 80048c6:	4407      	add	r7, r0
 80048c8:	eba8 0800 	sub.w	r8, r8, r0
 80048cc:	e7e9      	b.n	80048a2 <__sflush_r+0xda>
 80048ce:	bf00      	nop
 80048d0:	dfbffffe 	.word	0xdfbffffe

080048d4 <_fflush_r>:
 80048d4:	b538      	push	{r3, r4, r5, lr}
 80048d6:	690b      	ldr	r3, [r1, #16]
 80048d8:	4605      	mov	r5, r0
 80048da:	460c      	mov	r4, r1
 80048dc:	b913      	cbnz	r3, 80048e4 <_fflush_r+0x10>
 80048de:	2500      	movs	r5, #0
 80048e0:	4628      	mov	r0, r5
 80048e2:	bd38      	pop	{r3, r4, r5, pc}
 80048e4:	b118      	cbz	r0, 80048ee <_fflush_r+0x1a>
 80048e6:	6a03      	ldr	r3, [r0, #32]
 80048e8:	b90b      	cbnz	r3, 80048ee <_fflush_r+0x1a>
 80048ea:	f000 f8a9 	bl	8004a40 <__sinit>
 80048ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d0f3      	beq.n	80048de <_fflush_r+0xa>
 80048f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80048f8:	07d0      	lsls	r0, r2, #31
 80048fa:	d404      	bmi.n	8004906 <_fflush_r+0x32>
 80048fc:	0599      	lsls	r1, r3, #22
 80048fe:	d402      	bmi.n	8004906 <_fflush_r+0x32>
 8004900:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004902:	f000 fab5 	bl	8004e70 <__retarget_lock_acquire_recursive>
 8004906:	4628      	mov	r0, r5
 8004908:	4621      	mov	r1, r4
 800490a:	f7ff ff5d 	bl	80047c8 <__sflush_r>
 800490e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004910:	07da      	lsls	r2, r3, #31
 8004912:	4605      	mov	r5, r0
 8004914:	d4e4      	bmi.n	80048e0 <_fflush_r+0xc>
 8004916:	89a3      	ldrh	r3, [r4, #12]
 8004918:	059b      	lsls	r3, r3, #22
 800491a:	d4e1      	bmi.n	80048e0 <_fflush_r+0xc>
 800491c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800491e:	f000 faa8 	bl	8004e72 <__retarget_lock_release_recursive>
 8004922:	e7dd      	b.n	80048e0 <_fflush_r+0xc>

08004924 <fflush>:
 8004924:	4601      	mov	r1, r0
 8004926:	b920      	cbnz	r0, 8004932 <fflush+0xe>
 8004928:	4a04      	ldr	r2, [pc, #16]	; (800493c <fflush+0x18>)
 800492a:	4905      	ldr	r1, [pc, #20]	; (8004940 <fflush+0x1c>)
 800492c:	4805      	ldr	r0, [pc, #20]	; (8004944 <fflush+0x20>)
 800492e:	f000 b89f 	b.w	8004a70 <_fwalk_sglue>
 8004932:	4b05      	ldr	r3, [pc, #20]	; (8004948 <fflush+0x24>)
 8004934:	6818      	ldr	r0, [r3, #0]
 8004936:	f7ff bfcd 	b.w	80048d4 <_fflush_r>
 800493a:	bf00      	nop
 800493c:	2000000c 	.word	0x2000000c
 8004940:	080048d5 	.word	0x080048d5
 8004944:	20000018 	.word	0x20000018
 8004948:	20000064 	.word	0x20000064

0800494c <std>:
 800494c:	2300      	movs	r3, #0
 800494e:	b510      	push	{r4, lr}
 8004950:	4604      	mov	r4, r0
 8004952:	e9c0 3300 	strd	r3, r3, [r0]
 8004956:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800495a:	6083      	str	r3, [r0, #8]
 800495c:	8181      	strh	r1, [r0, #12]
 800495e:	6643      	str	r3, [r0, #100]	; 0x64
 8004960:	81c2      	strh	r2, [r0, #14]
 8004962:	6183      	str	r3, [r0, #24]
 8004964:	4619      	mov	r1, r3
 8004966:	2208      	movs	r2, #8
 8004968:	305c      	adds	r0, #92	; 0x5c
 800496a:	f000 fa05 	bl	8004d78 <memset>
 800496e:	4b05      	ldr	r3, [pc, #20]	; (8004984 <std+0x38>)
 8004970:	6263      	str	r3, [r4, #36]	; 0x24
 8004972:	4b05      	ldr	r3, [pc, #20]	; (8004988 <std+0x3c>)
 8004974:	62a3      	str	r3, [r4, #40]	; 0x28
 8004976:	4b05      	ldr	r3, [pc, #20]	; (800498c <std+0x40>)
 8004978:	62e3      	str	r3, [r4, #44]	; 0x2c
 800497a:	4b05      	ldr	r3, [pc, #20]	; (8004990 <std+0x44>)
 800497c:	6224      	str	r4, [r4, #32]
 800497e:	6323      	str	r3, [r4, #48]	; 0x30
 8004980:	bd10      	pop	{r4, pc}
 8004982:	bf00      	nop
 8004984:	08004bc9 	.word	0x08004bc9
 8004988:	08004beb 	.word	0x08004beb
 800498c:	08004c23 	.word	0x08004c23
 8004990:	08004c47 	.word	0x08004c47

08004994 <stdio_exit_handler>:
 8004994:	4a02      	ldr	r2, [pc, #8]	; (80049a0 <stdio_exit_handler+0xc>)
 8004996:	4903      	ldr	r1, [pc, #12]	; (80049a4 <stdio_exit_handler+0x10>)
 8004998:	4803      	ldr	r0, [pc, #12]	; (80049a8 <stdio_exit_handler+0x14>)
 800499a:	f000 b869 	b.w	8004a70 <_fwalk_sglue>
 800499e:	bf00      	nop
 80049a0:	2000000c 	.word	0x2000000c
 80049a4:	080048d5 	.word	0x080048d5
 80049a8:	20000018 	.word	0x20000018

080049ac <cleanup_stdio>:
 80049ac:	6841      	ldr	r1, [r0, #4]
 80049ae:	4b0c      	ldr	r3, [pc, #48]	; (80049e0 <cleanup_stdio+0x34>)
 80049b0:	4299      	cmp	r1, r3
 80049b2:	b510      	push	{r4, lr}
 80049b4:	4604      	mov	r4, r0
 80049b6:	d001      	beq.n	80049bc <cleanup_stdio+0x10>
 80049b8:	f7ff ff8c 	bl	80048d4 <_fflush_r>
 80049bc:	68a1      	ldr	r1, [r4, #8]
 80049be:	4b09      	ldr	r3, [pc, #36]	; (80049e4 <cleanup_stdio+0x38>)
 80049c0:	4299      	cmp	r1, r3
 80049c2:	d002      	beq.n	80049ca <cleanup_stdio+0x1e>
 80049c4:	4620      	mov	r0, r4
 80049c6:	f7ff ff85 	bl	80048d4 <_fflush_r>
 80049ca:	68e1      	ldr	r1, [r4, #12]
 80049cc:	4b06      	ldr	r3, [pc, #24]	; (80049e8 <cleanup_stdio+0x3c>)
 80049ce:	4299      	cmp	r1, r3
 80049d0:	d004      	beq.n	80049dc <cleanup_stdio+0x30>
 80049d2:	4620      	mov	r0, r4
 80049d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049d8:	f7ff bf7c 	b.w	80048d4 <_fflush_r>
 80049dc:	bd10      	pop	{r4, pc}
 80049de:	bf00      	nop
 80049e0:	20000274 	.word	0x20000274
 80049e4:	200002dc 	.word	0x200002dc
 80049e8:	20000344 	.word	0x20000344

080049ec <global_stdio_init.part.0>:
 80049ec:	b510      	push	{r4, lr}
 80049ee:	4b0b      	ldr	r3, [pc, #44]	; (8004a1c <global_stdio_init.part.0+0x30>)
 80049f0:	4c0b      	ldr	r4, [pc, #44]	; (8004a20 <global_stdio_init.part.0+0x34>)
 80049f2:	4a0c      	ldr	r2, [pc, #48]	; (8004a24 <global_stdio_init.part.0+0x38>)
 80049f4:	601a      	str	r2, [r3, #0]
 80049f6:	4620      	mov	r0, r4
 80049f8:	2200      	movs	r2, #0
 80049fa:	2104      	movs	r1, #4
 80049fc:	f7ff ffa6 	bl	800494c <std>
 8004a00:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004a04:	2201      	movs	r2, #1
 8004a06:	2109      	movs	r1, #9
 8004a08:	f7ff ffa0 	bl	800494c <std>
 8004a0c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004a10:	2202      	movs	r2, #2
 8004a12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a16:	2112      	movs	r1, #18
 8004a18:	f7ff bf98 	b.w	800494c <std>
 8004a1c:	200003ac 	.word	0x200003ac
 8004a20:	20000274 	.word	0x20000274
 8004a24:	08004995 	.word	0x08004995

08004a28 <__sfp_lock_acquire>:
 8004a28:	4801      	ldr	r0, [pc, #4]	; (8004a30 <__sfp_lock_acquire+0x8>)
 8004a2a:	f000 ba21 	b.w	8004e70 <__retarget_lock_acquire_recursive>
 8004a2e:	bf00      	nop
 8004a30:	200003b5 	.word	0x200003b5

08004a34 <__sfp_lock_release>:
 8004a34:	4801      	ldr	r0, [pc, #4]	; (8004a3c <__sfp_lock_release+0x8>)
 8004a36:	f000 ba1c 	b.w	8004e72 <__retarget_lock_release_recursive>
 8004a3a:	bf00      	nop
 8004a3c:	200003b5 	.word	0x200003b5

08004a40 <__sinit>:
 8004a40:	b510      	push	{r4, lr}
 8004a42:	4604      	mov	r4, r0
 8004a44:	f7ff fff0 	bl	8004a28 <__sfp_lock_acquire>
 8004a48:	6a23      	ldr	r3, [r4, #32]
 8004a4a:	b11b      	cbz	r3, 8004a54 <__sinit+0x14>
 8004a4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a50:	f7ff bff0 	b.w	8004a34 <__sfp_lock_release>
 8004a54:	4b04      	ldr	r3, [pc, #16]	; (8004a68 <__sinit+0x28>)
 8004a56:	6223      	str	r3, [r4, #32]
 8004a58:	4b04      	ldr	r3, [pc, #16]	; (8004a6c <__sinit+0x2c>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d1f5      	bne.n	8004a4c <__sinit+0xc>
 8004a60:	f7ff ffc4 	bl	80049ec <global_stdio_init.part.0>
 8004a64:	e7f2      	b.n	8004a4c <__sinit+0xc>
 8004a66:	bf00      	nop
 8004a68:	080049ad 	.word	0x080049ad
 8004a6c:	200003ac 	.word	0x200003ac

08004a70 <_fwalk_sglue>:
 8004a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a74:	4607      	mov	r7, r0
 8004a76:	4688      	mov	r8, r1
 8004a78:	4614      	mov	r4, r2
 8004a7a:	2600      	movs	r6, #0
 8004a7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004a80:	f1b9 0901 	subs.w	r9, r9, #1
 8004a84:	d505      	bpl.n	8004a92 <_fwalk_sglue+0x22>
 8004a86:	6824      	ldr	r4, [r4, #0]
 8004a88:	2c00      	cmp	r4, #0
 8004a8a:	d1f7      	bne.n	8004a7c <_fwalk_sglue+0xc>
 8004a8c:	4630      	mov	r0, r6
 8004a8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a92:	89ab      	ldrh	r3, [r5, #12]
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d907      	bls.n	8004aa8 <_fwalk_sglue+0x38>
 8004a98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	d003      	beq.n	8004aa8 <_fwalk_sglue+0x38>
 8004aa0:	4629      	mov	r1, r5
 8004aa2:	4638      	mov	r0, r7
 8004aa4:	47c0      	blx	r8
 8004aa6:	4306      	orrs	r6, r0
 8004aa8:	3568      	adds	r5, #104	; 0x68
 8004aaa:	e7e9      	b.n	8004a80 <_fwalk_sglue+0x10>

08004aac <iprintf>:
 8004aac:	b40f      	push	{r0, r1, r2, r3}
 8004aae:	b507      	push	{r0, r1, r2, lr}
 8004ab0:	4906      	ldr	r1, [pc, #24]	; (8004acc <iprintf+0x20>)
 8004ab2:	ab04      	add	r3, sp, #16
 8004ab4:	6808      	ldr	r0, [r1, #0]
 8004ab6:	f853 2b04 	ldr.w	r2, [r3], #4
 8004aba:	6881      	ldr	r1, [r0, #8]
 8004abc:	9301      	str	r3, [sp, #4]
 8004abe:	f002 fe3f 	bl	8007740 <_vfiprintf_r>
 8004ac2:	b003      	add	sp, #12
 8004ac4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ac8:	b004      	add	sp, #16
 8004aca:	4770      	bx	lr
 8004acc:	20000064 	.word	0x20000064

08004ad0 <_puts_r>:
 8004ad0:	6a03      	ldr	r3, [r0, #32]
 8004ad2:	b570      	push	{r4, r5, r6, lr}
 8004ad4:	6884      	ldr	r4, [r0, #8]
 8004ad6:	4605      	mov	r5, r0
 8004ad8:	460e      	mov	r6, r1
 8004ada:	b90b      	cbnz	r3, 8004ae0 <_puts_r+0x10>
 8004adc:	f7ff ffb0 	bl	8004a40 <__sinit>
 8004ae0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ae2:	07db      	lsls	r3, r3, #31
 8004ae4:	d405      	bmi.n	8004af2 <_puts_r+0x22>
 8004ae6:	89a3      	ldrh	r3, [r4, #12]
 8004ae8:	0598      	lsls	r0, r3, #22
 8004aea:	d402      	bmi.n	8004af2 <_puts_r+0x22>
 8004aec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004aee:	f000 f9bf 	bl	8004e70 <__retarget_lock_acquire_recursive>
 8004af2:	89a3      	ldrh	r3, [r4, #12]
 8004af4:	0719      	lsls	r1, r3, #28
 8004af6:	d513      	bpl.n	8004b20 <_puts_r+0x50>
 8004af8:	6923      	ldr	r3, [r4, #16]
 8004afa:	b18b      	cbz	r3, 8004b20 <_puts_r+0x50>
 8004afc:	3e01      	subs	r6, #1
 8004afe:	68a3      	ldr	r3, [r4, #8]
 8004b00:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004b04:	3b01      	subs	r3, #1
 8004b06:	60a3      	str	r3, [r4, #8]
 8004b08:	b9e9      	cbnz	r1, 8004b46 <_puts_r+0x76>
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	da2e      	bge.n	8004b6c <_puts_r+0x9c>
 8004b0e:	4622      	mov	r2, r4
 8004b10:	210a      	movs	r1, #10
 8004b12:	4628      	mov	r0, r5
 8004b14:	f000 f89b 	bl	8004c4e <__swbuf_r>
 8004b18:	3001      	adds	r0, #1
 8004b1a:	d007      	beq.n	8004b2c <_puts_r+0x5c>
 8004b1c:	250a      	movs	r5, #10
 8004b1e:	e007      	b.n	8004b30 <_puts_r+0x60>
 8004b20:	4621      	mov	r1, r4
 8004b22:	4628      	mov	r0, r5
 8004b24:	f000 f8d0 	bl	8004cc8 <__swsetup_r>
 8004b28:	2800      	cmp	r0, #0
 8004b2a:	d0e7      	beq.n	8004afc <_puts_r+0x2c>
 8004b2c:	f04f 35ff 	mov.w	r5, #4294967295
 8004b30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b32:	07da      	lsls	r2, r3, #31
 8004b34:	d405      	bmi.n	8004b42 <_puts_r+0x72>
 8004b36:	89a3      	ldrh	r3, [r4, #12]
 8004b38:	059b      	lsls	r3, r3, #22
 8004b3a:	d402      	bmi.n	8004b42 <_puts_r+0x72>
 8004b3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b3e:	f000 f998 	bl	8004e72 <__retarget_lock_release_recursive>
 8004b42:	4628      	mov	r0, r5
 8004b44:	bd70      	pop	{r4, r5, r6, pc}
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	da04      	bge.n	8004b54 <_puts_r+0x84>
 8004b4a:	69a2      	ldr	r2, [r4, #24]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	dc06      	bgt.n	8004b5e <_puts_r+0x8e>
 8004b50:	290a      	cmp	r1, #10
 8004b52:	d004      	beq.n	8004b5e <_puts_r+0x8e>
 8004b54:	6823      	ldr	r3, [r4, #0]
 8004b56:	1c5a      	adds	r2, r3, #1
 8004b58:	6022      	str	r2, [r4, #0]
 8004b5a:	7019      	strb	r1, [r3, #0]
 8004b5c:	e7cf      	b.n	8004afe <_puts_r+0x2e>
 8004b5e:	4622      	mov	r2, r4
 8004b60:	4628      	mov	r0, r5
 8004b62:	f000 f874 	bl	8004c4e <__swbuf_r>
 8004b66:	3001      	adds	r0, #1
 8004b68:	d1c9      	bne.n	8004afe <_puts_r+0x2e>
 8004b6a:	e7df      	b.n	8004b2c <_puts_r+0x5c>
 8004b6c:	6823      	ldr	r3, [r4, #0]
 8004b6e:	250a      	movs	r5, #10
 8004b70:	1c5a      	adds	r2, r3, #1
 8004b72:	6022      	str	r2, [r4, #0]
 8004b74:	701d      	strb	r5, [r3, #0]
 8004b76:	e7db      	b.n	8004b30 <_puts_r+0x60>

08004b78 <puts>:
 8004b78:	4b02      	ldr	r3, [pc, #8]	; (8004b84 <puts+0xc>)
 8004b7a:	4601      	mov	r1, r0
 8004b7c:	6818      	ldr	r0, [r3, #0]
 8004b7e:	f7ff bfa7 	b.w	8004ad0 <_puts_r>
 8004b82:	bf00      	nop
 8004b84:	20000064 	.word	0x20000064

08004b88 <siprintf>:
 8004b88:	b40e      	push	{r1, r2, r3}
 8004b8a:	b500      	push	{lr}
 8004b8c:	b09c      	sub	sp, #112	; 0x70
 8004b8e:	ab1d      	add	r3, sp, #116	; 0x74
 8004b90:	9002      	str	r0, [sp, #8]
 8004b92:	9006      	str	r0, [sp, #24]
 8004b94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004b98:	4809      	ldr	r0, [pc, #36]	; (8004bc0 <siprintf+0x38>)
 8004b9a:	9107      	str	r1, [sp, #28]
 8004b9c:	9104      	str	r1, [sp, #16]
 8004b9e:	4909      	ldr	r1, [pc, #36]	; (8004bc4 <siprintf+0x3c>)
 8004ba0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ba4:	9105      	str	r1, [sp, #20]
 8004ba6:	6800      	ldr	r0, [r0, #0]
 8004ba8:	9301      	str	r3, [sp, #4]
 8004baa:	a902      	add	r1, sp, #8
 8004bac:	f002 fca0 	bl	80074f0 <_svfiprintf_r>
 8004bb0:	9b02      	ldr	r3, [sp, #8]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	701a      	strb	r2, [r3, #0]
 8004bb6:	b01c      	add	sp, #112	; 0x70
 8004bb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004bbc:	b003      	add	sp, #12
 8004bbe:	4770      	bx	lr
 8004bc0:	20000064 	.word	0x20000064
 8004bc4:	ffff0208 	.word	0xffff0208

08004bc8 <__sread>:
 8004bc8:	b510      	push	{r4, lr}
 8004bca:	460c      	mov	r4, r1
 8004bcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bd0:	f000 f900 	bl	8004dd4 <_read_r>
 8004bd4:	2800      	cmp	r0, #0
 8004bd6:	bfab      	itete	ge
 8004bd8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004bda:	89a3      	ldrhlt	r3, [r4, #12]
 8004bdc:	181b      	addge	r3, r3, r0
 8004bde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004be2:	bfac      	ite	ge
 8004be4:	6563      	strge	r3, [r4, #84]	; 0x54
 8004be6:	81a3      	strhlt	r3, [r4, #12]
 8004be8:	bd10      	pop	{r4, pc}

08004bea <__swrite>:
 8004bea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bee:	461f      	mov	r7, r3
 8004bf0:	898b      	ldrh	r3, [r1, #12]
 8004bf2:	05db      	lsls	r3, r3, #23
 8004bf4:	4605      	mov	r5, r0
 8004bf6:	460c      	mov	r4, r1
 8004bf8:	4616      	mov	r6, r2
 8004bfa:	d505      	bpl.n	8004c08 <__swrite+0x1e>
 8004bfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c00:	2302      	movs	r3, #2
 8004c02:	2200      	movs	r2, #0
 8004c04:	f000 f8d4 	bl	8004db0 <_lseek_r>
 8004c08:	89a3      	ldrh	r3, [r4, #12]
 8004c0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c12:	81a3      	strh	r3, [r4, #12]
 8004c14:	4632      	mov	r2, r6
 8004c16:	463b      	mov	r3, r7
 8004c18:	4628      	mov	r0, r5
 8004c1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c1e:	f000 b8eb 	b.w	8004df8 <_write_r>

08004c22 <__sseek>:
 8004c22:	b510      	push	{r4, lr}
 8004c24:	460c      	mov	r4, r1
 8004c26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c2a:	f000 f8c1 	bl	8004db0 <_lseek_r>
 8004c2e:	1c43      	adds	r3, r0, #1
 8004c30:	89a3      	ldrh	r3, [r4, #12]
 8004c32:	bf15      	itete	ne
 8004c34:	6560      	strne	r0, [r4, #84]	; 0x54
 8004c36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004c3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004c3e:	81a3      	strheq	r3, [r4, #12]
 8004c40:	bf18      	it	ne
 8004c42:	81a3      	strhne	r3, [r4, #12]
 8004c44:	bd10      	pop	{r4, pc}

08004c46 <__sclose>:
 8004c46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c4a:	f000 b8a1 	b.w	8004d90 <_close_r>

08004c4e <__swbuf_r>:
 8004c4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c50:	460e      	mov	r6, r1
 8004c52:	4614      	mov	r4, r2
 8004c54:	4605      	mov	r5, r0
 8004c56:	b118      	cbz	r0, 8004c60 <__swbuf_r+0x12>
 8004c58:	6a03      	ldr	r3, [r0, #32]
 8004c5a:	b90b      	cbnz	r3, 8004c60 <__swbuf_r+0x12>
 8004c5c:	f7ff fef0 	bl	8004a40 <__sinit>
 8004c60:	69a3      	ldr	r3, [r4, #24]
 8004c62:	60a3      	str	r3, [r4, #8]
 8004c64:	89a3      	ldrh	r3, [r4, #12]
 8004c66:	071a      	lsls	r2, r3, #28
 8004c68:	d525      	bpl.n	8004cb6 <__swbuf_r+0x68>
 8004c6a:	6923      	ldr	r3, [r4, #16]
 8004c6c:	b31b      	cbz	r3, 8004cb6 <__swbuf_r+0x68>
 8004c6e:	6823      	ldr	r3, [r4, #0]
 8004c70:	6922      	ldr	r2, [r4, #16]
 8004c72:	1a98      	subs	r0, r3, r2
 8004c74:	6963      	ldr	r3, [r4, #20]
 8004c76:	b2f6      	uxtb	r6, r6
 8004c78:	4283      	cmp	r3, r0
 8004c7a:	4637      	mov	r7, r6
 8004c7c:	dc04      	bgt.n	8004c88 <__swbuf_r+0x3a>
 8004c7e:	4621      	mov	r1, r4
 8004c80:	4628      	mov	r0, r5
 8004c82:	f7ff fe27 	bl	80048d4 <_fflush_r>
 8004c86:	b9e0      	cbnz	r0, 8004cc2 <__swbuf_r+0x74>
 8004c88:	68a3      	ldr	r3, [r4, #8]
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	60a3      	str	r3, [r4, #8]
 8004c8e:	6823      	ldr	r3, [r4, #0]
 8004c90:	1c5a      	adds	r2, r3, #1
 8004c92:	6022      	str	r2, [r4, #0]
 8004c94:	701e      	strb	r6, [r3, #0]
 8004c96:	6962      	ldr	r2, [r4, #20]
 8004c98:	1c43      	adds	r3, r0, #1
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d004      	beq.n	8004ca8 <__swbuf_r+0x5a>
 8004c9e:	89a3      	ldrh	r3, [r4, #12]
 8004ca0:	07db      	lsls	r3, r3, #31
 8004ca2:	d506      	bpl.n	8004cb2 <__swbuf_r+0x64>
 8004ca4:	2e0a      	cmp	r6, #10
 8004ca6:	d104      	bne.n	8004cb2 <__swbuf_r+0x64>
 8004ca8:	4621      	mov	r1, r4
 8004caa:	4628      	mov	r0, r5
 8004cac:	f7ff fe12 	bl	80048d4 <_fflush_r>
 8004cb0:	b938      	cbnz	r0, 8004cc2 <__swbuf_r+0x74>
 8004cb2:	4638      	mov	r0, r7
 8004cb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cb6:	4621      	mov	r1, r4
 8004cb8:	4628      	mov	r0, r5
 8004cba:	f000 f805 	bl	8004cc8 <__swsetup_r>
 8004cbe:	2800      	cmp	r0, #0
 8004cc0:	d0d5      	beq.n	8004c6e <__swbuf_r+0x20>
 8004cc2:	f04f 37ff 	mov.w	r7, #4294967295
 8004cc6:	e7f4      	b.n	8004cb2 <__swbuf_r+0x64>

08004cc8 <__swsetup_r>:
 8004cc8:	b538      	push	{r3, r4, r5, lr}
 8004cca:	4b2a      	ldr	r3, [pc, #168]	; (8004d74 <__swsetup_r+0xac>)
 8004ccc:	4605      	mov	r5, r0
 8004cce:	6818      	ldr	r0, [r3, #0]
 8004cd0:	460c      	mov	r4, r1
 8004cd2:	b118      	cbz	r0, 8004cdc <__swsetup_r+0x14>
 8004cd4:	6a03      	ldr	r3, [r0, #32]
 8004cd6:	b90b      	cbnz	r3, 8004cdc <__swsetup_r+0x14>
 8004cd8:	f7ff feb2 	bl	8004a40 <__sinit>
 8004cdc:	89a3      	ldrh	r3, [r4, #12]
 8004cde:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ce2:	0718      	lsls	r0, r3, #28
 8004ce4:	d422      	bmi.n	8004d2c <__swsetup_r+0x64>
 8004ce6:	06d9      	lsls	r1, r3, #27
 8004ce8:	d407      	bmi.n	8004cfa <__swsetup_r+0x32>
 8004cea:	2309      	movs	r3, #9
 8004cec:	602b      	str	r3, [r5, #0]
 8004cee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004cf2:	81a3      	strh	r3, [r4, #12]
 8004cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8004cf8:	e034      	b.n	8004d64 <__swsetup_r+0x9c>
 8004cfa:	0758      	lsls	r0, r3, #29
 8004cfc:	d512      	bpl.n	8004d24 <__swsetup_r+0x5c>
 8004cfe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d00:	b141      	cbz	r1, 8004d14 <__swsetup_r+0x4c>
 8004d02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d06:	4299      	cmp	r1, r3
 8004d08:	d002      	beq.n	8004d10 <__swsetup_r+0x48>
 8004d0a:	4628      	mov	r0, r5
 8004d0c:	f000 ff52 	bl	8005bb4 <_free_r>
 8004d10:	2300      	movs	r3, #0
 8004d12:	6363      	str	r3, [r4, #52]	; 0x34
 8004d14:	89a3      	ldrh	r3, [r4, #12]
 8004d16:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004d1a:	81a3      	strh	r3, [r4, #12]
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	6063      	str	r3, [r4, #4]
 8004d20:	6923      	ldr	r3, [r4, #16]
 8004d22:	6023      	str	r3, [r4, #0]
 8004d24:	89a3      	ldrh	r3, [r4, #12]
 8004d26:	f043 0308 	orr.w	r3, r3, #8
 8004d2a:	81a3      	strh	r3, [r4, #12]
 8004d2c:	6923      	ldr	r3, [r4, #16]
 8004d2e:	b94b      	cbnz	r3, 8004d44 <__swsetup_r+0x7c>
 8004d30:	89a3      	ldrh	r3, [r4, #12]
 8004d32:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004d36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d3a:	d003      	beq.n	8004d44 <__swsetup_r+0x7c>
 8004d3c:	4621      	mov	r1, r4
 8004d3e:	4628      	mov	r0, r5
 8004d40:	f002 fe50 	bl	80079e4 <__smakebuf_r>
 8004d44:	89a0      	ldrh	r0, [r4, #12]
 8004d46:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004d4a:	f010 0301 	ands.w	r3, r0, #1
 8004d4e:	d00a      	beq.n	8004d66 <__swsetup_r+0x9e>
 8004d50:	2300      	movs	r3, #0
 8004d52:	60a3      	str	r3, [r4, #8]
 8004d54:	6963      	ldr	r3, [r4, #20]
 8004d56:	425b      	negs	r3, r3
 8004d58:	61a3      	str	r3, [r4, #24]
 8004d5a:	6923      	ldr	r3, [r4, #16]
 8004d5c:	b943      	cbnz	r3, 8004d70 <__swsetup_r+0xa8>
 8004d5e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004d62:	d1c4      	bne.n	8004cee <__swsetup_r+0x26>
 8004d64:	bd38      	pop	{r3, r4, r5, pc}
 8004d66:	0781      	lsls	r1, r0, #30
 8004d68:	bf58      	it	pl
 8004d6a:	6963      	ldrpl	r3, [r4, #20]
 8004d6c:	60a3      	str	r3, [r4, #8]
 8004d6e:	e7f4      	b.n	8004d5a <__swsetup_r+0x92>
 8004d70:	2000      	movs	r0, #0
 8004d72:	e7f7      	b.n	8004d64 <__swsetup_r+0x9c>
 8004d74:	20000064 	.word	0x20000064

08004d78 <memset>:
 8004d78:	4402      	add	r2, r0
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d100      	bne.n	8004d82 <memset+0xa>
 8004d80:	4770      	bx	lr
 8004d82:	f803 1b01 	strb.w	r1, [r3], #1
 8004d86:	e7f9      	b.n	8004d7c <memset+0x4>

08004d88 <_localeconv_r>:
 8004d88:	4800      	ldr	r0, [pc, #0]	; (8004d8c <_localeconv_r+0x4>)
 8004d8a:	4770      	bx	lr
 8004d8c:	20000158 	.word	0x20000158

08004d90 <_close_r>:
 8004d90:	b538      	push	{r3, r4, r5, lr}
 8004d92:	4d06      	ldr	r5, [pc, #24]	; (8004dac <_close_r+0x1c>)
 8004d94:	2300      	movs	r3, #0
 8004d96:	4604      	mov	r4, r0
 8004d98:	4608      	mov	r0, r1
 8004d9a:	602b      	str	r3, [r5, #0]
 8004d9c:	f7fd f829 	bl	8001df2 <_close>
 8004da0:	1c43      	adds	r3, r0, #1
 8004da2:	d102      	bne.n	8004daa <_close_r+0x1a>
 8004da4:	682b      	ldr	r3, [r5, #0]
 8004da6:	b103      	cbz	r3, 8004daa <_close_r+0x1a>
 8004da8:	6023      	str	r3, [r4, #0]
 8004daa:	bd38      	pop	{r3, r4, r5, pc}
 8004dac:	200003b0 	.word	0x200003b0

08004db0 <_lseek_r>:
 8004db0:	b538      	push	{r3, r4, r5, lr}
 8004db2:	4d07      	ldr	r5, [pc, #28]	; (8004dd0 <_lseek_r+0x20>)
 8004db4:	4604      	mov	r4, r0
 8004db6:	4608      	mov	r0, r1
 8004db8:	4611      	mov	r1, r2
 8004dba:	2200      	movs	r2, #0
 8004dbc:	602a      	str	r2, [r5, #0]
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	f7fd f83e 	bl	8001e40 <_lseek>
 8004dc4:	1c43      	adds	r3, r0, #1
 8004dc6:	d102      	bne.n	8004dce <_lseek_r+0x1e>
 8004dc8:	682b      	ldr	r3, [r5, #0]
 8004dca:	b103      	cbz	r3, 8004dce <_lseek_r+0x1e>
 8004dcc:	6023      	str	r3, [r4, #0]
 8004dce:	bd38      	pop	{r3, r4, r5, pc}
 8004dd0:	200003b0 	.word	0x200003b0

08004dd4 <_read_r>:
 8004dd4:	b538      	push	{r3, r4, r5, lr}
 8004dd6:	4d07      	ldr	r5, [pc, #28]	; (8004df4 <_read_r+0x20>)
 8004dd8:	4604      	mov	r4, r0
 8004dda:	4608      	mov	r0, r1
 8004ddc:	4611      	mov	r1, r2
 8004dde:	2200      	movs	r2, #0
 8004de0:	602a      	str	r2, [r5, #0]
 8004de2:	461a      	mov	r2, r3
 8004de4:	f7fc ffcc 	bl	8001d80 <_read>
 8004de8:	1c43      	adds	r3, r0, #1
 8004dea:	d102      	bne.n	8004df2 <_read_r+0x1e>
 8004dec:	682b      	ldr	r3, [r5, #0]
 8004dee:	b103      	cbz	r3, 8004df2 <_read_r+0x1e>
 8004df0:	6023      	str	r3, [r4, #0]
 8004df2:	bd38      	pop	{r3, r4, r5, pc}
 8004df4:	200003b0 	.word	0x200003b0

08004df8 <_write_r>:
 8004df8:	b538      	push	{r3, r4, r5, lr}
 8004dfa:	4d07      	ldr	r5, [pc, #28]	; (8004e18 <_write_r+0x20>)
 8004dfc:	4604      	mov	r4, r0
 8004dfe:	4608      	mov	r0, r1
 8004e00:	4611      	mov	r1, r2
 8004e02:	2200      	movs	r2, #0
 8004e04:	602a      	str	r2, [r5, #0]
 8004e06:	461a      	mov	r2, r3
 8004e08:	f7fc ffd7 	bl	8001dba <_write>
 8004e0c:	1c43      	adds	r3, r0, #1
 8004e0e:	d102      	bne.n	8004e16 <_write_r+0x1e>
 8004e10:	682b      	ldr	r3, [r5, #0]
 8004e12:	b103      	cbz	r3, 8004e16 <_write_r+0x1e>
 8004e14:	6023      	str	r3, [r4, #0]
 8004e16:	bd38      	pop	{r3, r4, r5, pc}
 8004e18:	200003b0 	.word	0x200003b0

08004e1c <__errno>:
 8004e1c:	4b01      	ldr	r3, [pc, #4]	; (8004e24 <__errno+0x8>)
 8004e1e:	6818      	ldr	r0, [r3, #0]
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	20000064 	.word	0x20000064

08004e28 <__libc_init_array>:
 8004e28:	b570      	push	{r4, r5, r6, lr}
 8004e2a:	4d0d      	ldr	r5, [pc, #52]	; (8004e60 <__libc_init_array+0x38>)
 8004e2c:	4c0d      	ldr	r4, [pc, #52]	; (8004e64 <__libc_init_array+0x3c>)
 8004e2e:	1b64      	subs	r4, r4, r5
 8004e30:	10a4      	asrs	r4, r4, #2
 8004e32:	2600      	movs	r6, #0
 8004e34:	42a6      	cmp	r6, r4
 8004e36:	d109      	bne.n	8004e4c <__libc_init_array+0x24>
 8004e38:	4d0b      	ldr	r5, [pc, #44]	; (8004e68 <__libc_init_array+0x40>)
 8004e3a:	4c0c      	ldr	r4, [pc, #48]	; (8004e6c <__libc_init_array+0x44>)
 8004e3c:	f003 fa92 	bl	8008364 <_init>
 8004e40:	1b64      	subs	r4, r4, r5
 8004e42:	10a4      	asrs	r4, r4, #2
 8004e44:	2600      	movs	r6, #0
 8004e46:	42a6      	cmp	r6, r4
 8004e48:	d105      	bne.n	8004e56 <__libc_init_array+0x2e>
 8004e4a:	bd70      	pop	{r4, r5, r6, pc}
 8004e4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e50:	4798      	blx	r3
 8004e52:	3601      	adds	r6, #1
 8004e54:	e7ee      	b.n	8004e34 <__libc_init_array+0xc>
 8004e56:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e5a:	4798      	blx	r3
 8004e5c:	3601      	adds	r6, #1
 8004e5e:	e7f2      	b.n	8004e46 <__libc_init_array+0x1e>
 8004e60:	080088a4 	.word	0x080088a4
 8004e64:	080088a4 	.word	0x080088a4
 8004e68:	080088a4 	.word	0x080088a4
 8004e6c:	080088a8 	.word	0x080088a8

08004e70 <__retarget_lock_acquire_recursive>:
 8004e70:	4770      	bx	lr

08004e72 <__retarget_lock_release_recursive>:
 8004e72:	4770      	bx	lr

08004e74 <nanf>:
 8004e74:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004e7c <nanf+0x8>
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	7fc00000 	.word	0x7fc00000

08004e80 <__assert_func>:
 8004e80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004e82:	4614      	mov	r4, r2
 8004e84:	461a      	mov	r2, r3
 8004e86:	4b09      	ldr	r3, [pc, #36]	; (8004eac <__assert_func+0x2c>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4605      	mov	r5, r0
 8004e8c:	68d8      	ldr	r0, [r3, #12]
 8004e8e:	b14c      	cbz	r4, 8004ea4 <__assert_func+0x24>
 8004e90:	4b07      	ldr	r3, [pc, #28]	; (8004eb0 <__assert_func+0x30>)
 8004e92:	9100      	str	r1, [sp, #0]
 8004e94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004e98:	4906      	ldr	r1, [pc, #24]	; (8004eb4 <__assert_func+0x34>)
 8004e9a:	462b      	mov	r3, r5
 8004e9c:	f002 fd6a 	bl	8007974 <fiprintf>
 8004ea0:	f002 fe52 	bl	8007b48 <abort>
 8004ea4:	4b04      	ldr	r3, [pc, #16]	; (8004eb8 <__assert_func+0x38>)
 8004ea6:	461c      	mov	r4, r3
 8004ea8:	e7f3      	b.n	8004e92 <__assert_func+0x12>
 8004eaa:	bf00      	nop
 8004eac:	20000064 	.word	0x20000064
 8004eb0:	080084c8 	.word	0x080084c8
 8004eb4:	080084d5 	.word	0x080084d5
 8004eb8:	08008503 	.word	0x08008503

08004ebc <quorem>:
 8004ebc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ec0:	6903      	ldr	r3, [r0, #16]
 8004ec2:	690c      	ldr	r4, [r1, #16]
 8004ec4:	42a3      	cmp	r3, r4
 8004ec6:	4607      	mov	r7, r0
 8004ec8:	db7e      	blt.n	8004fc8 <quorem+0x10c>
 8004eca:	3c01      	subs	r4, #1
 8004ecc:	f101 0814 	add.w	r8, r1, #20
 8004ed0:	f100 0514 	add.w	r5, r0, #20
 8004ed4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004ed8:	9301      	str	r3, [sp, #4]
 8004eda:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004ede:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004eea:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004eee:	fbb2 f6f3 	udiv	r6, r2, r3
 8004ef2:	d331      	bcc.n	8004f58 <quorem+0x9c>
 8004ef4:	f04f 0e00 	mov.w	lr, #0
 8004ef8:	4640      	mov	r0, r8
 8004efa:	46ac      	mov	ip, r5
 8004efc:	46f2      	mov	sl, lr
 8004efe:	f850 2b04 	ldr.w	r2, [r0], #4
 8004f02:	b293      	uxth	r3, r2
 8004f04:	fb06 e303 	mla	r3, r6, r3, lr
 8004f08:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004f0c:	0c1a      	lsrs	r2, r3, #16
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	ebaa 0303 	sub.w	r3, sl, r3
 8004f14:	f8dc a000 	ldr.w	sl, [ip]
 8004f18:	fa13 f38a 	uxtah	r3, r3, sl
 8004f1c:	fb06 220e 	mla	r2, r6, lr, r2
 8004f20:	9300      	str	r3, [sp, #0]
 8004f22:	9b00      	ldr	r3, [sp, #0]
 8004f24:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004f28:	b292      	uxth	r2, r2
 8004f2a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004f2e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004f32:	f8bd 3000 	ldrh.w	r3, [sp]
 8004f36:	4581      	cmp	r9, r0
 8004f38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f3c:	f84c 3b04 	str.w	r3, [ip], #4
 8004f40:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004f44:	d2db      	bcs.n	8004efe <quorem+0x42>
 8004f46:	f855 300b 	ldr.w	r3, [r5, fp]
 8004f4a:	b92b      	cbnz	r3, 8004f58 <quorem+0x9c>
 8004f4c:	9b01      	ldr	r3, [sp, #4]
 8004f4e:	3b04      	subs	r3, #4
 8004f50:	429d      	cmp	r5, r3
 8004f52:	461a      	mov	r2, r3
 8004f54:	d32c      	bcc.n	8004fb0 <quorem+0xf4>
 8004f56:	613c      	str	r4, [r7, #16]
 8004f58:	4638      	mov	r0, r7
 8004f5a:	f001 f9f1 	bl	8006340 <__mcmp>
 8004f5e:	2800      	cmp	r0, #0
 8004f60:	db22      	blt.n	8004fa8 <quorem+0xec>
 8004f62:	3601      	adds	r6, #1
 8004f64:	4629      	mov	r1, r5
 8004f66:	2000      	movs	r0, #0
 8004f68:	f858 2b04 	ldr.w	r2, [r8], #4
 8004f6c:	f8d1 c000 	ldr.w	ip, [r1]
 8004f70:	b293      	uxth	r3, r2
 8004f72:	1ac3      	subs	r3, r0, r3
 8004f74:	0c12      	lsrs	r2, r2, #16
 8004f76:	fa13 f38c 	uxtah	r3, r3, ip
 8004f7a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004f7e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f88:	45c1      	cmp	r9, r8
 8004f8a:	f841 3b04 	str.w	r3, [r1], #4
 8004f8e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004f92:	d2e9      	bcs.n	8004f68 <quorem+0xac>
 8004f94:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004f98:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004f9c:	b922      	cbnz	r2, 8004fa8 <quorem+0xec>
 8004f9e:	3b04      	subs	r3, #4
 8004fa0:	429d      	cmp	r5, r3
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	d30a      	bcc.n	8004fbc <quorem+0x100>
 8004fa6:	613c      	str	r4, [r7, #16]
 8004fa8:	4630      	mov	r0, r6
 8004faa:	b003      	add	sp, #12
 8004fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fb0:	6812      	ldr	r2, [r2, #0]
 8004fb2:	3b04      	subs	r3, #4
 8004fb4:	2a00      	cmp	r2, #0
 8004fb6:	d1ce      	bne.n	8004f56 <quorem+0x9a>
 8004fb8:	3c01      	subs	r4, #1
 8004fba:	e7c9      	b.n	8004f50 <quorem+0x94>
 8004fbc:	6812      	ldr	r2, [r2, #0]
 8004fbe:	3b04      	subs	r3, #4
 8004fc0:	2a00      	cmp	r2, #0
 8004fc2:	d1f0      	bne.n	8004fa6 <quorem+0xea>
 8004fc4:	3c01      	subs	r4, #1
 8004fc6:	e7eb      	b.n	8004fa0 <quorem+0xe4>
 8004fc8:	2000      	movs	r0, #0
 8004fca:	e7ee      	b.n	8004faa <quorem+0xee>
 8004fcc:	0000      	movs	r0, r0
	...

08004fd0 <_dtoa_r>:
 8004fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fd4:	ed2d 8b04 	vpush	{d8-d9}
 8004fd8:	69c5      	ldr	r5, [r0, #28]
 8004fda:	b093      	sub	sp, #76	; 0x4c
 8004fdc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004fe0:	ec57 6b10 	vmov	r6, r7, d0
 8004fe4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004fe8:	9107      	str	r1, [sp, #28]
 8004fea:	4604      	mov	r4, r0
 8004fec:	920a      	str	r2, [sp, #40]	; 0x28
 8004fee:	930d      	str	r3, [sp, #52]	; 0x34
 8004ff0:	b975      	cbnz	r5, 8005010 <_dtoa_r+0x40>
 8004ff2:	2010      	movs	r0, #16
 8004ff4:	f000 fe2a 	bl	8005c4c <malloc>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	61e0      	str	r0, [r4, #28]
 8004ffc:	b920      	cbnz	r0, 8005008 <_dtoa_r+0x38>
 8004ffe:	4bae      	ldr	r3, [pc, #696]	; (80052b8 <_dtoa_r+0x2e8>)
 8005000:	21ef      	movs	r1, #239	; 0xef
 8005002:	48ae      	ldr	r0, [pc, #696]	; (80052bc <_dtoa_r+0x2ec>)
 8005004:	f7ff ff3c 	bl	8004e80 <__assert_func>
 8005008:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800500c:	6005      	str	r5, [r0, #0]
 800500e:	60c5      	str	r5, [r0, #12]
 8005010:	69e3      	ldr	r3, [r4, #28]
 8005012:	6819      	ldr	r1, [r3, #0]
 8005014:	b151      	cbz	r1, 800502c <_dtoa_r+0x5c>
 8005016:	685a      	ldr	r2, [r3, #4]
 8005018:	604a      	str	r2, [r1, #4]
 800501a:	2301      	movs	r3, #1
 800501c:	4093      	lsls	r3, r2
 800501e:	608b      	str	r3, [r1, #8]
 8005020:	4620      	mov	r0, r4
 8005022:	f000 ff07 	bl	8005e34 <_Bfree>
 8005026:	69e3      	ldr	r3, [r4, #28]
 8005028:	2200      	movs	r2, #0
 800502a:	601a      	str	r2, [r3, #0]
 800502c:	1e3b      	subs	r3, r7, #0
 800502e:	bfbb      	ittet	lt
 8005030:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005034:	9303      	strlt	r3, [sp, #12]
 8005036:	2300      	movge	r3, #0
 8005038:	2201      	movlt	r2, #1
 800503a:	bfac      	ite	ge
 800503c:	f8c8 3000 	strge.w	r3, [r8]
 8005040:	f8c8 2000 	strlt.w	r2, [r8]
 8005044:	4b9e      	ldr	r3, [pc, #632]	; (80052c0 <_dtoa_r+0x2f0>)
 8005046:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800504a:	ea33 0308 	bics.w	r3, r3, r8
 800504e:	d11b      	bne.n	8005088 <_dtoa_r+0xb8>
 8005050:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005052:	f242 730f 	movw	r3, #9999	; 0x270f
 8005056:	6013      	str	r3, [r2, #0]
 8005058:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800505c:	4333      	orrs	r3, r6
 800505e:	f000 8593 	beq.w	8005b88 <_dtoa_r+0xbb8>
 8005062:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005064:	b963      	cbnz	r3, 8005080 <_dtoa_r+0xb0>
 8005066:	4b97      	ldr	r3, [pc, #604]	; (80052c4 <_dtoa_r+0x2f4>)
 8005068:	e027      	b.n	80050ba <_dtoa_r+0xea>
 800506a:	4b97      	ldr	r3, [pc, #604]	; (80052c8 <_dtoa_r+0x2f8>)
 800506c:	9300      	str	r3, [sp, #0]
 800506e:	3308      	adds	r3, #8
 8005070:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005072:	6013      	str	r3, [r2, #0]
 8005074:	9800      	ldr	r0, [sp, #0]
 8005076:	b013      	add	sp, #76	; 0x4c
 8005078:	ecbd 8b04 	vpop	{d8-d9}
 800507c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005080:	4b90      	ldr	r3, [pc, #576]	; (80052c4 <_dtoa_r+0x2f4>)
 8005082:	9300      	str	r3, [sp, #0]
 8005084:	3303      	adds	r3, #3
 8005086:	e7f3      	b.n	8005070 <_dtoa_r+0xa0>
 8005088:	ed9d 7b02 	vldr	d7, [sp, #8]
 800508c:	2200      	movs	r2, #0
 800508e:	ec51 0b17 	vmov	r0, r1, d7
 8005092:	eeb0 8a47 	vmov.f32	s16, s14
 8005096:	eef0 8a67 	vmov.f32	s17, s15
 800509a:	2300      	movs	r3, #0
 800509c:	f7fb fd1c 	bl	8000ad8 <__aeabi_dcmpeq>
 80050a0:	4681      	mov	r9, r0
 80050a2:	b160      	cbz	r0, 80050be <_dtoa_r+0xee>
 80050a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80050a6:	2301      	movs	r3, #1
 80050a8:	6013      	str	r3, [r2, #0]
 80050aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	f000 8568 	beq.w	8005b82 <_dtoa_r+0xbb2>
 80050b2:	4b86      	ldr	r3, [pc, #536]	; (80052cc <_dtoa_r+0x2fc>)
 80050b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80050b6:	6013      	str	r3, [r2, #0]
 80050b8:	3b01      	subs	r3, #1
 80050ba:	9300      	str	r3, [sp, #0]
 80050bc:	e7da      	b.n	8005074 <_dtoa_r+0xa4>
 80050be:	aa10      	add	r2, sp, #64	; 0x40
 80050c0:	a911      	add	r1, sp, #68	; 0x44
 80050c2:	4620      	mov	r0, r4
 80050c4:	eeb0 0a48 	vmov.f32	s0, s16
 80050c8:	eef0 0a68 	vmov.f32	s1, s17
 80050cc:	f001 fa4e 	bl	800656c <__d2b>
 80050d0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80050d4:	4682      	mov	sl, r0
 80050d6:	2d00      	cmp	r5, #0
 80050d8:	d07f      	beq.n	80051da <_dtoa_r+0x20a>
 80050da:	ee18 3a90 	vmov	r3, s17
 80050de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050e2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80050e6:	ec51 0b18 	vmov	r0, r1, d8
 80050ea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80050ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80050f2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80050f6:	4619      	mov	r1, r3
 80050f8:	2200      	movs	r2, #0
 80050fa:	4b75      	ldr	r3, [pc, #468]	; (80052d0 <_dtoa_r+0x300>)
 80050fc:	f7fb f8cc 	bl	8000298 <__aeabi_dsub>
 8005100:	a367      	add	r3, pc, #412	; (adr r3, 80052a0 <_dtoa_r+0x2d0>)
 8005102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005106:	f7fb fa7f 	bl	8000608 <__aeabi_dmul>
 800510a:	a367      	add	r3, pc, #412	; (adr r3, 80052a8 <_dtoa_r+0x2d8>)
 800510c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005110:	f7fb f8c4 	bl	800029c <__adddf3>
 8005114:	4606      	mov	r6, r0
 8005116:	4628      	mov	r0, r5
 8005118:	460f      	mov	r7, r1
 800511a:	f7fb fa0b 	bl	8000534 <__aeabi_i2d>
 800511e:	a364      	add	r3, pc, #400	; (adr r3, 80052b0 <_dtoa_r+0x2e0>)
 8005120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005124:	f7fb fa70 	bl	8000608 <__aeabi_dmul>
 8005128:	4602      	mov	r2, r0
 800512a:	460b      	mov	r3, r1
 800512c:	4630      	mov	r0, r6
 800512e:	4639      	mov	r1, r7
 8005130:	f7fb f8b4 	bl	800029c <__adddf3>
 8005134:	4606      	mov	r6, r0
 8005136:	460f      	mov	r7, r1
 8005138:	f7fb fd16 	bl	8000b68 <__aeabi_d2iz>
 800513c:	2200      	movs	r2, #0
 800513e:	4683      	mov	fp, r0
 8005140:	2300      	movs	r3, #0
 8005142:	4630      	mov	r0, r6
 8005144:	4639      	mov	r1, r7
 8005146:	f7fb fcd1 	bl	8000aec <__aeabi_dcmplt>
 800514a:	b148      	cbz	r0, 8005160 <_dtoa_r+0x190>
 800514c:	4658      	mov	r0, fp
 800514e:	f7fb f9f1 	bl	8000534 <__aeabi_i2d>
 8005152:	4632      	mov	r2, r6
 8005154:	463b      	mov	r3, r7
 8005156:	f7fb fcbf 	bl	8000ad8 <__aeabi_dcmpeq>
 800515a:	b908      	cbnz	r0, 8005160 <_dtoa_r+0x190>
 800515c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005160:	f1bb 0f16 	cmp.w	fp, #22
 8005164:	d857      	bhi.n	8005216 <_dtoa_r+0x246>
 8005166:	4b5b      	ldr	r3, [pc, #364]	; (80052d4 <_dtoa_r+0x304>)
 8005168:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800516c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005170:	ec51 0b18 	vmov	r0, r1, d8
 8005174:	f7fb fcba 	bl	8000aec <__aeabi_dcmplt>
 8005178:	2800      	cmp	r0, #0
 800517a:	d04e      	beq.n	800521a <_dtoa_r+0x24a>
 800517c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005180:	2300      	movs	r3, #0
 8005182:	930c      	str	r3, [sp, #48]	; 0x30
 8005184:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005186:	1b5b      	subs	r3, r3, r5
 8005188:	1e5a      	subs	r2, r3, #1
 800518a:	bf45      	ittet	mi
 800518c:	f1c3 0301 	rsbmi	r3, r3, #1
 8005190:	9305      	strmi	r3, [sp, #20]
 8005192:	2300      	movpl	r3, #0
 8005194:	2300      	movmi	r3, #0
 8005196:	9206      	str	r2, [sp, #24]
 8005198:	bf54      	ite	pl
 800519a:	9305      	strpl	r3, [sp, #20]
 800519c:	9306      	strmi	r3, [sp, #24]
 800519e:	f1bb 0f00 	cmp.w	fp, #0
 80051a2:	db3c      	blt.n	800521e <_dtoa_r+0x24e>
 80051a4:	9b06      	ldr	r3, [sp, #24]
 80051a6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80051aa:	445b      	add	r3, fp
 80051ac:	9306      	str	r3, [sp, #24]
 80051ae:	2300      	movs	r3, #0
 80051b0:	9308      	str	r3, [sp, #32]
 80051b2:	9b07      	ldr	r3, [sp, #28]
 80051b4:	2b09      	cmp	r3, #9
 80051b6:	d868      	bhi.n	800528a <_dtoa_r+0x2ba>
 80051b8:	2b05      	cmp	r3, #5
 80051ba:	bfc4      	itt	gt
 80051bc:	3b04      	subgt	r3, #4
 80051be:	9307      	strgt	r3, [sp, #28]
 80051c0:	9b07      	ldr	r3, [sp, #28]
 80051c2:	f1a3 0302 	sub.w	r3, r3, #2
 80051c6:	bfcc      	ite	gt
 80051c8:	2500      	movgt	r5, #0
 80051ca:	2501      	movle	r5, #1
 80051cc:	2b03      	cmp	r3, #3
 80051ce:	f200 8085 	bhi.w	80052dc <_dtoa_r+0x30c>
 80051d2:	e8df f003 	tbb	[pc, r3]
 80051d6:	3b2e      	.short	0x3b2e
 80051d8:	5839      	.short	0x5839
 80051da:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80051de:	441d      	add	r5, r3
 80051e0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80051e4:	2b20      	cmp	r3, #32
 80051e6:	bfc1      	itttt	gt
 80051e8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80051ec:	fa08 f803 	lslgt.w	r8, r8, r3
 80051f0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80051f4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80051f8:	bfd6      	itet	le
 80051fa:	f1c3 0320 	rsble	r3, r3, #32
 80051fe:	ea48 0003 	orrgt.w	r0, r8, r3
 8005202:	fa06 f003 	lslle.w	r0, r6, r3
 8005206:	f7fb f985 	bl	8000514 <__aeabi_ui2d>
 800520a:	2201      	movs	r2, #1
 800520c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005210:	3d01      	subs	r5, #1
 8005212:	920e      	str	r2, [sp, #56]	; 0x38
 8005214:	e76f      	b.n	80050f6 <_dtoa_r+0x126>
 8005216:	2301      	movs	r3, #1
 8005218:	e7b3      	b.n	8005182 <_dtoa_r+0x1b2>
 800521a:	900c      	str	r0, [sp, #48]	; 0x30
 800521c:	e7b2      	b.n	8005184 <_dtoa_r+0x1b4>
 800521e:	9b05      	ldr	r3, [sp, #20]
 8005220:	eba3 030b 	sub.w	r3, r3, fp
 8005224:	9305      	str	r3, [sp, #20]
 8005226:	f1cb 0300 	rsb	r3, fp, #0
 800522a:	9308      	str	r3, [sp, #32]
 800522c:	2300      	movs	r3, #0
 800522e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005230:	e7bf      	b.n	80051b2 <_dtoa_r+0x1e2>
 8005232:	2300      	movs	r3, #0
 8005234:	9309      	str	r3, [sp, #36]	; 0x24
 8005236:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005238:	2b00      	cmp	r3, #0
 800523a:	dc52      	bgt.n	80052e2 <_dtoa_r+0x312>
 800523c:	2301      	movs	r3, #1
 800523e:	9301      	str	r3, [sp, #4]
 8005240:	9304      	str	r3, [sp, #16]
 8005242:	461a      	mov	r2, r3
 8005244:	920a      	str	r2, [sp, #40]	; 0x28
 8005246:	e00b      	b.n	8005260 <_dtoa_r+0x290>
 8005248:	2301      	movs	r3, #1
 800524a:	e7f3      	b.n	8005234 <_dtoa_r+0x264>
 800524c:	2300      	movs	r3, #0
 800524e:	9309      	str	r3, [sp, #36]	; 0x24
 8005250:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005252:	445b      	add	r3, fp
 8005254:	9301      	str	r3, [sp, #4]
 8005256:	3301      	adds	r3, #1
 8005258:	2b01      	cmp	r3, #1
 800525a:	9304      	str	r3, [sp, #16]
 800525c:	bfb8      	it	lt
 800525e:	2301      	movlt	r3, #1
 8005260:	69e0      	ldr	r0, [r4, #28]
 8005262:	2100      	movs	r1, #0
 8005264:	2204      	movs	r2, #4
 8005266:	f102 0614 	add.w	r6, r2, #20
 800526a:	429e      	cmp	r6, r3
 800526c:	d93d      	bls.n	80052ea <_dtoa_r+0x31a>
 800526e:	6041      	str	r1, [r0, #4]
 8005270:	4620      	mov	r0, r4
 8005272:	f000 fd9f 	bl	8005db4 <_Balloc>
 8005276:	9000      	str	r0, [sp, #0]
 8005278:	2800      	cmp	r0, #0
 800527a:	d139      	bne.n	80052f0 <_dtoa_r+0x320>
 800527c:	4b16      	ldr	r3, [pc, #88]	; (80052d8 <_dtoa_r+0x308>)
 800527e:	4602      	mov	r2, r0
 8005280:	f240 11af 	movw	r1, #431	; 0x1af
 8005284:	e6bd      	b.n	8005002 <_dtoa_r+0x32>
 8005286:	2301      	movs	r3, #1
 8005288:	e7e1      	b.n	800524e <_dtoa_r+0x27e>
 800528a:	2501      	movs	r5, #1
 800528c:	2300      	movs	r3, #0
 800528e:	9307      	str	r3, [sp, #28]
 8005290:	9509      	str	r5, [sp, #36]	; 0x24
 8005292:	f04f 33ff 	mov.w	r3, #4294967295
 8005296:	9301      	str	r3, [sp, #4]
 8005298:	9304      	str	r3, [sp, #16]
 800529a:	2200      	movs	r2, #0
 800529c:	2312      	movs	r3, #18
 800529e:	e7d1      	b.n	8005244 <_dtoa_r+0x274>
 80052a0:	636f4361 	.word	0x636f4361
 80052a4:	3fd287a7 	.word	0x3fd287a7
 80052a8:	8b60c8b3 	.word	0x8b60c8b3
 80052ac:	3fc68a28 	.word	0x3fc68a28
 80052b0:	509f79fb 	.word	0x509f79fb
 80052b4:	3fd34413 	.word	0x3fd34413
 80052b8:	08008420 	.word	0x08008420
 80052bc:	08008511 	.word	0x08008511
 80052c0:	7ff00000 	.word	0x7ff00000
 80052c4:	0800850d 	.word	0x0800850d
 80052c8:	08008504 	.word	0x08008504
 80052cc:	080084a0 	.word	0x080084a0
 80052d0:	3ff80000 	.word	0x3ff80000
 80052d4:	08008600 	.word	0x08008600
 80052d8:	08008569 	.word	0x08008569
 80052dc:	2301      	movs	r3, #1
 80052de:	9309      	str	r3, [sp, #36]	; 0x24
 80052e0:	e7d7      	b.n	8005292 <_dtoa_r+0x2c2>
 80052e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052e4:	9301      	str	r3, [sp, #4]
 80052e6:	9304      	str	r3, [sp, #16]
 80052e8:	e7ba      	b.n	8005260 <_dtoa_r+0x290>
 80052ea:	3101      	adds	r1, #1
 80052ec:	0052      	lsls	r2, r2, #1
 80052ee:	e7ba      	b.n	8005266 <_dtoa_r+0x296>
 80052f0:	69e3      	ldr	r3, [r4, #28]
 80052f2:	9a00      	ldr	r2, [sp, #0]
 80052f4:	601a      	str	r2, [r3, #0]
 80052f6:	9b04      	ldr	r3, [sp, #16]
 80052f8:	2b0e      	cmp	r3, #14
 80052fa:	f200 80a8 	bhi.w	800544e <_dtoa_r+0x47e>
 80052fe:	2d00      	cmp	r5, #0
 8005300:	f000 80a5 	beq.w	800544e <_dtoa_r+0x47e>
 8005304:	f1bb 0f00 	cmp.w	fp, #0
 8005308:	dd38      	ble.n	800537c <_dtoa_r+0x3ac>
 800530a:	4bc0      	ldr	r3, [pc, #768]	; (800560c <_dtoa_r+0x63c>)
 800530c:	f00b 020f 	and.w	r2, fp, #15
 8005310:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005314:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005318:	e9d3 6700 	ldrd	r6, r7, [r3]
 800531c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8005320:	d019      	beq.n	8005356 <_dtoa_r+0x386>
 8005322:	4bbb      	ldr	r3, [pc, #748]	; (8005610 <_dtoa_r+0x640>)
 8005324:	ec51 0b18 	vmov	r0, r1, d8
 8005328:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800532c:	f7fb fa96 	bl	800085c <__aeabi_ddiv>
 8005330:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005334:	f008 080f 	and.w	r8, r8, #15
 8005338:	2503      	movs	r5, #3
 800533a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8005610 <_dtoa_r+0x640>
 800533e:	f1b8 0f00 	cmp.w	r8, #0
 8005342:	d10a      	bne.n	800535a <_dtoa_r+0x38a>
 8005344:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005348:	4632      	mov	r2, r6
 800534a:	463b      	mov	r3, r7
 800534c:	f7fb fa86 	bl	800085c <__aeabi_ddiv>
 8005350:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005354:	e02b      	b.n	80053ae <_dtoa_r+0x3de>
 8005356:	2502      	movs	r5, #2
 8005358:	e7ef      	b.n	800533a <_dtoa_r+0x36a>
 800535a:	f018 0f01 	tst.w	r8, #1
 800535e:	d008      	beq.n	8005372 <_dtoa_r+0x3a2>
 8005360:	4630      	mov	r0, r6
 8005362:	4639      	mov	r1, r7
 8005364:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005368:	f7fb f94e 	bl	8000608 <__aeabi_dmul>
 800536c:	3501      	adds	r5, #1
 800536e:	4606      	mov	r6, r0
 8005370:	460f      	mov	r7, r1
 8005372:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005376:	f109 0908 	add.w	r9, r9, #8
 800537a:	e7e0      	b.n	800533e <_dtoa_r+0x36e>
 800537c:	f000 809f 	beq.w	80054be <_dtoa_r+0x4ee>
 8005380:	f1cb 0600 	rsb	r6, fp, #0
 8005384:	4ba1      	ldr	r3, [pc, #644]	; (800560c <_dtoa_r+0x63c>)
 8005386:	4fa2      	ldr	r7, [pc, #648]	; (8005610 <_dtoa_r+0x640>)
 8005388:	f006 020f 	and.w	r2, r6, #15
 800538c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005394:	ec51 0b18 	vmov	r0, r1, d8
 8005398:	f7fb f936 	bl	8000608 <__aeabi_dmul>
 800539c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80053a0:	1136      	asrs	r6, r6, #4
 80053a2:	2300      	movs	r3, #0
 80053a4:	2502      	movs	r5, #2
 80053a6:	2e00      	cmp	r6, #0
 80053a8:	d17e      	bne.n	80054a8 <_dtoa_r+0x4d8>
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d1d0      	bne.n	8005350 <_dtoa_r+0x380>
 80053ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80053b0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	f000 8084 	beq.w	80054c2 <_dtoa_r+0x4f2>
 80053ba:	4b96      	ldr	r3, [pc, #600]	; (8005614 <_dtoa_r+0x644>)
 80053bc:	2200      	movs	r2, #0
 80053be:	4640      	mov	r0, r8
 80053c0:	4649      	mov	r1, r9
 80053c2:	f7fb fb93 	bl	8000aec <__aeabi_dcmplt>
 80053c6:	2800      	cmp	r0, #0
 80053c8:	d07b      	beq.n	80054c2 <_dtoa_r+0x4f2>
 80053ca:	9b04      	ldr	r3, [sp, #16]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d078      	beq.n	80054c2 <_dtoa_r+0x4f2>
 80053d0:	9b01      	ldr	r3, [sp, #4]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	dd39      	ble.n	800544a <_dtoa_r+0x47a>
 80053d6:	4b90      	ldr	r3, [pc, #576]	; (8005618 <_dtoa_r+0x648>)
 80053d8:	2200      	movs	r2, #0
 80053da:	4640      	mov	r0, r8
 80053dc:	4649      	mov	r1, r9
 80053de:	f7fb f913 	bl	8000608 <__aeabi_dmul>
 80053e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80053e6:	9e01      	ldr	r6, [sp, #4]
 80053e8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80053ec:	3501      	adds	r5, #1
 80053ee:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80053f2:	4628      	mov	r0, r5
 80053f4:	f7fb f89e 	bl	8000534 <__aeabi_i2d>
 80053f8:	4642      	mov	r2, r8
 80053fa:	464b      	mov	r3, r9
 80053fc:	f7fb f904 	bl	8000608 <__aeabi_dmul>
 8005400:	4b86      	ldr	r3, [pc, #536]	; (800561c <_dtoa_r+0x64c>)
 8005402:	2200      	movs	r2, #0
 8005404:	f7fa ff4a 	bl	800029c <__adddf3>
 8005408:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800540c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005410:	9303      	str	r3, [sp, #12]
 8005412:	2e00      	cmp	r6, #0
 8005414:	d158      	bne.n	80054c8 <_dtoa_r+0x4f8>
 8005416:	4b82      	ldr	r3, [pc, #520]	; (8005620 <_dtoa_r+0x650>)
 8005418:	2200      	movs	r2, #0
 800541a:	4640      	mov	r0, r8
 800541c:	4649      	mov	r1, r9
 800541e:	f7fa ff3b 	bl	8000298 <__aeabi_dsub>
 8005422:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005426:	4680      	mov	r8, r0
 8005428:	4689      	mov	r9, r1
 800542a:	f7fb fb7d 	bl	8000b28 <__aeabi_dcmpgt>
 800542e:	2800      	cmp	r0, #0
 8005430:	f040 8296 	bne.w	8005960 <_dtoa_r+0x990>
 8005434:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005438:	4640      	mov	r0, r8
 800543a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800543e:	4649      	mov	r1, r9
 8005440:	f7fb fb54 	bl	8000aec <__aeabi_dcmplt>
 8005444:	2800      	cmp	r0, #0
 8005446:	f040 8289 	bne.w	800595c <_dtoa_r+0x98c>
 800544a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800544e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005450:	2b00      	cmp	r3, #0
 8005452:	f2c0 814e 	blt.w	80056f2 <_dtoa_r+0x722>
 8005456:	f1bb 0f0e 	cmp.w	fp, #14
 800545a:	f300 814a 	bgt.w	80056f2 <_dtoa_r+0x722>
 800545e:	4b6b      	ldr	r3, [pc, #428]	; (800560c <_dtoa_r+0x63c>)
 8005460:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005464:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005468:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800546a:	2b00      	cmp	r3, #0
 800546c:	f280 80dc 	bge.w	8005628 <_dtoa_r+0x658>
 8005470:	9b04      	ldr	r3, [sp, #16]
 8005472:	2b00      	cmp	r3, #0
 8005474:	f300 80d8 	bgt.w	8005628 <_dtoa_r+0x658>
 8005478:	f040 826f 	bne.w	800595a <_dtoa_r+0x98a>
 800547c:	4b68      	ldr	r3, [pc, #416]	; (8005620 <_dtoa_r+0x650>)
 800547e:	2200      	movs	r2, #0
 8005480:	4640      	mov	r0, r8
 8005482:	4649      	mov	r1, r9
 8005484:	f7fb f8c0 	bl	8000608 <__aeabi_dmul>
 8005488:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800548c:	f7fb fb42 	bl	8000b14 <__aeabi_dcmpge>
 8005490:	9e04      	ldr	r6, [sp, #16]
 8005492:	4637      	mov	r7, r6
 8005494:	2800      	cmp	r0, #0
 8005496:	f040 8245 	bne.w	8005924 <_dtoa_r+0x954>
 800549a:	9d00      	ldr	r5, [sp, #0]
 800549c:	2331      	movs	r3, #49	; 0x31
 800549e:	f805 3b01 	strb.w	r3, [r5], #1
 80054a2:	f10b 0b01 	add.w	fp, fp, #1
 80054a6:	e241      	b.n	800592c <_dtoa_r+0x95c>
 80054a8:	07f2      	lsls	r2, r6, #31
 80054aa:	d505      	bpl.n	80054b8 <_dtoa_r+0x4e8>
 80054ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054b0:	f7fb f8aa 	bl	8000608 <__aeabi_dmul>
 80054b4:	3501      	adds	r5, #1
 80054b6:	2301      	movs	r3, #1
 80054b8:	1076      	asrs	r6, r6, #1
 80054ba:	3708      	adds	r7, #8
 80054bc:	e773      	b.n	80053a6 <_dtoa_r+0x3d6>
 80054be:	2502      	movs	r5, #2
 80054c0:	e775      	b.n	80053ae <_dtoa_r+0x3de>
 80054c2:	9e04      	ldr	r6, [sp, #16]
 80054c4:	465f      	mov	r7, fp
 80054c6:	e792      	b.n	80053ee <_dtoa_r+0x41e>
 80054c8:	9900      	ldr	r1, [sp, #0]
 80054ca:	4b50      	ldr	r3, [pc, #320]	; (800560c <_dtoa_r+0x63c>)
 80054cc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80054d0:	4431      	add	r1, r6
 80054d2:	9102      	str	r1, [sp, #8]
 80054d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80054d6:	eeb0 9a47 	vmov.f32	s18, s14
 80054da:	eef0 9a67 	vmov.f32	s19, s15
 80054de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80054e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80054e6:	2900      	cmp	r1, #0
 80054e8:	d044      	beq.n	8005574 <_dtoa_r+0x5a4>
 80054ea:	494e      	ldr	r1, [pc, #312]	; (8005624 <_dtoa_r+0x654>)
 80054ec:	2000      	movs	r0, #0
 80054ee:	f7fb f9b5 	bl	800085c <__aeabi_ddiv>
 80054f2:	ec53 2b19 	vmov	r2, r3, d9
 80054f6:	f7fa fecf 	bl	8000298 <__aeabi_dsub>
 80054fa:	9d00      	ldr	r5, [sp, #0]
 80054fc:	ec41 0b19 	vmov	d9, r0, r1
 8005500:	4649      	mov	r1, r9
 8005502:	4640      	mov	r0, r8
 8005504:	f7fb fb30 	bl	8000b68 <__aeabi_d2iz>
 8005508:	4606      	mov	r6, r0
 800550a:	f7fb f813 	bl	8000534 <__aeabi_i2d>
 800550e:	4602      	mov	r2, r0
 8005510:	460b      	mov	r3, r1
 8005512:	4640      	mov	r0, r8
 8005514:	4649      	mov	r1, r9
 8005516:	f7fa febf 	bl	8000298 <__aeabi_dsub>
 800551a:	3630      	adds	r6, #48	; 0x30
 800551c:	f805 6b01 	strb.w	r6, [r5], #1
 8005520:	ec53 2b19 	vmov	r2, r3, d9
 8005524:	4680      	mov	r8, r0
 8005526:	4689      	mov	r9, r1
 8005528:	f7fb fae0 	bl	8000aec <__aeabi_dcmplt>
 800552c:	2800      	cmp	r0, #0
 800552e:	d164      	bne.n	80055fa <_dtoa_r+0x62a>
 8005530:	4642      	mov	r2, r8
 8005532:	464b      	mov	r3, r9
 8005534:	4937      	ldr	r1, [pc, #220]	; (8005614 <_dtoa_r+0x644>)
 8005536:	2000      	movs	r0, #0
 8005538:	f7fa feae 	bl	8000298 <__aeabi_dsub>
 800553c:	ec53 2b19 	vmov	r2, r3, d9
 8005540:	f7fb fad4 	bl	8000aec <__aeabi_dcmplt>
 8005544:	2800      	cmp	r0, #0
 8005546:	f040 80b6 	bne.w	80056b6 <_dtoa_r+0x6e6>
 800554a:	9b02      	ldr	r3, [sp, #8]
 800554c:	429d      	cmp	r5, r3
 800554e:	f43f af7c 	beq.w	800544a <_dtoa_r+0x47a>
 8005552:	4b31      	ldr	r3, [pc, #196]	; (8005618 <_dtoa_r+0x648>)
 8005554:	ec51 0b19 	vmov	r0, r1, d9
 8005558:	2200      	movs	r2, #0
 800555a:	f7fb f855 	bl	8000608 <__aeabi_dmul>
 800555e:	4b2e      	ldr	r3, [pc, #184]	; (8005618 <_dtoa_r+0x648>)
 8005560:	ec41 0b19 	vmov	d9, r0, r1
 8005564:	2200      	movs	r2, #0
 8005566:	4640      	mov	r0, r8
 8005568:	4649      	mov	r1, r9
 800556a:	f7fb f84d 	bl	8000608 <__aeabi_dmul>
 800556e:	4680      	mov	r8, r0
 8005570:	4689      	mov	r9, r1
 8005572:	e7c5      	b.n	8005500 <_dtoa_r+0x530>
 8005574:	ec51 0b17 	vmov	r0, r1, d7
 8005578:	f7fb f846 	bl	8000608 <__aeabi_dmul>
 800557c:	9b02      	ldr	r3, [sp, #8]
 800557e:	9d00      	ldr	r5, [sp, #0]
 8005580:	930f      	str	r3, [sp, #60]	; 0x3c
 8005582:	ec41 0b19 	vmov	d9, r0, r1
 8005586:	4649      	mov	r1, r9
 8005588:	4640      	mov	r0, r8
 800558a:	f7fb faed 	bl	8000b68 <__aeabi_d2iz>
 800558e:	4606      	mov	r6, r0
 8005590:	f7fa ffd0 	bl	8000534 <__aeabi_i2d>
 8005594:	3630      	adds	r6, #48	; 0x30
 8005596:	4602      	mov	r2, r0
 8005598:	460b      	mov	r3, r1
 800559a:	4640      	mov	r0, r8
 800559c:	4649      	mov	r1, r9
 800559e:	f7fa fe7b 	bl	8000298 <__aeabi_dsub>
 80055a2:	f805 6b01 	strb.w	r6, [r5], #1
 80055a6:	9b02      	ldr	r3, [sp, #8]
 80055a8:	429d      	cmp	r5, r3
 80055aa:	4680      	mov	r8, r0
 80055ac:	4689      	mov	r9, r1
 80055ae:	f04f 0200 	mov.w	r2, #0
 80055b2:	d124      	bne.n	80055fe <_dtoa_r+0x62e>
 80055b4:	4b1b      	ldr	r3, [pc, #108]	; (8005624 <_dtoa_r+0x654>)
 80055b6:	ec51 0b19 	vmov	r0, r1, d9
 80055ba:	f7fa fe6f 	bl	800029c <__adddf3>
 80055be:	4602      	mov	r2, r0
 80055c0:	460b      	mov	r3, r1
 80055c2:	4640      	mov	r0, r8
 80055c4:	4649      	mov	r1, r9
 80055c6:	f7fb faaf 	bl	8000b28 <__aeabi_dcmpgt>
 80055ca:	2800      	cmp	r0, #0
 80055cc:	d173      	bne.n	80056b6 <_dtoa_r+0x6e6>
 80055ce:	ec53 2b19 	vmov	r2, r3, d9
 80055d2:	4914      	ldr	r1, [pc, #80]	; (8005624 <_dtoa_r+0x654>)
 80055d4:	2000      	movs	r0, #0
 80055d6:	f7fa fe5f 	bl	8000298 <__aeabi_dsub>
 80055da:	4602      	mov	r2, r0
 80055dc:	460b      	mov	r3, r1
 80055de:	4640      	mov	r0, r8
 80055e0:	4649      	mov	r1, r9
 80055e2:	f7fb fa83 	bl	8000aec <__aeabi_dcmplt>
 80055e6:	2800      	cmp	r0, #0
 80055e8:	f43f af2f 	beq.w	800544a <_dtoa_r+0x47a>
 80055ec:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80055ee:	1e6b      	subs	r3, r5, #1
 80055f0:	930f      	str	r3, [sp, #60]	; 0x3c
 80055f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80055f6:	2b30      	cmp	r3, #48	; 0x30
 80055f8:	d0f8      	beq.n	80055ec <_dtoa_r+0x61c>
 80055fa:	46bb      	mov	fp, r7
 80055fc:	e04a      	b.n	8005694 <_dtoa_r+0x6c4>
 80055fe:	4b06      	ldr	r3, [pc, #24]	; (8005618 <_dtoa_r+0x648>)
 8005600:	f7fb f802 	bl	8000608 <__aeabi_dmul>
 8005604:	4680      	mov	r8, r0
 8005606:	4689      	mov	r9, r1
 8005608:	e7bd      	b.n	8005586 <_dtoa_r+0x5b6>
 800560a:	bf00      	nop
 800560c:	08008600 	.word	0x08008600
 8005610:	080085d8 	.word	0x080085d8
 8005614:	3ff00000 	.word	0x3ff00000
 8005618:	40240000 	.word	0x40240000
 800561c:	401c0000 	.word	0x401c0000
 8005620:	40140000 	.word	0x40140000
 8005624:	3fe00000 	.word	0x3fe00000
 8005628:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800562c:	9d00      	ldr	r5, [sp, #0]
 800562e:	4642      	mov	r2, r8
 8005630:	464b      	mov	r3, r9
 8005632:	4630      	mov	r0, r6
 8005634:	4639      	mov	r1, r7
 8005636:	f7fb f911 	bl	800085c <__aeabi_ddiv>
 800563a:	f7fb fa95 	bl	8000b68 <__aeabi_d2iz>
 800563e:	9001      	str	r0, [sp, #4]
 8005640:	f7fa ff78 	bl	8000534 <__aeabi_i2d>
 8005644:	4642      	mov	r2, r8
 8005646:	464b      	mov	r3, r9
 8005648:	f7fa ffde 	bl	8000608 <__aeabi_dmul>
 800564c:	4602      	mov	r2, r0
 800564e:	460b      	mov	r3, r1
 8005650:	4630      	mov	r0, r6
 8005652:	4639      	mov	r1, r7
 8005654:	f7fa fe20 	bl	8000298 <__aeabi_dsub>
 8005658:	9e01      	ldr	r6, [sp, #4]
 800565a:	9f04      	ldr	r7, [sp, #16]
 800565c:	3630      	adds	r6, #48	; 0x30
 800565e:	f805 6b01 	strb.w	r6, [r5], #1
 8005662:	9e00      	ldr	r6, [sp, #0]
 8005664:	1bae      	subs	r6, r5, r6
 8005666:	42b7      	cmp	r7, r6
 8005668:	4602      	mov	r2, r0
 800566a:	460b      	mov	r3, r1
 800566c:	d134      	bne.n	80056d8 <_dtoa_r+0x708>
 800566e:	f7fa fe15 	bl	800029c <__adddf3>
 8005672:	4642      	mov	r2, r8
 8005674:	464b      	mov	r3, r9
 8005676:	4606      	mov	r6, r0
 8005678:	460f      	mov	r7, r1
 800567a:	f7fb fa55 	bl	8000b28 <__aeabi_dcmpgt>
 800567e:	b9c8      	cbnz	r0, 80056b4 <_dtoa_r+0x6e4>
 8005680:	4642      	mov	r2, r8
 8005682:	464b      	mov	r3, r9
 8005684:	4630      	mov	r0, r6
 8005686:	4639      	mov	r1, r7
 8005688:	f7fb fa26 	bl	8000ad8 <__aeabi_dcmpeq>
 800568c:	b110      	cbz	r0, 8005694 <_dtoa_r+0x6c4>
 800568e:	9b01      	ldr	r3, [sp, #4]
 8005690:	07db      	lsls	r3, r3, #31
 8005692:	d40f      	bmi.n	80056b4 <_dtoa_r+0x6e4>
 8005694:	4651      	mov	r1, sl
 8005696:	4620      	mov	r0, r4
 8005698:	f000 fbcc 	bl	8005e34 <_Bfree>
 800569c:	2300      	movs	r3, #0
 800569e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80056a0:	702b      	strb	r3, [r5, #0]
 80056a2:	f10b 0301 	add.w	r3, fp, #1
 80056a6:	6013      	str	r3, [r2, #0]
 80056a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	f43f ace2 	beq.w	8005074 <_dtoa_r+0xa4>
 80056b0:	601d      	str	r5, [r3, #0]
 80056b2:	e4df      	b.n	8005074 <_dtoa_r+0xa4>
 80056b4:	465f      	mov	r7, fp
 80056b6:	462b      	mov	r3, r5
 80056b8:	461d      	mov	r5, r3
 80056ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80056be:	2a39      	cmp	r2, #57	; 0x39
 80056c0:	d106      	bne.n	80056d0 <_dtoa_r+0x700>
 80056c2:	9a00      	ldr	r2, [sp, #0]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d1f7      	bne.n	80056b8 <_dtoa_r+0x6e8>
 80056c8:	9900      	ldr	r1, [sp, #0]
 80056ca:	2230      	movs	r2, #48	; 0x30
 80056cc:	3701      	adds	r7, #1
 80056ce:	700a      	strb	r2, [r1, #0]
 80056d0:	781a      	ldrb	r2, [r3, #0]
 80056d2:	3201      	adds	r2, #1
 80056d4:	701a      	strb	r2, [r3, #0]
 80056d6:	e790      	b.n	80055fa <_dtoa_r+0x62a>
 80056d8:	4ba3      	ldr	r3, [pc, #652]	; (8005968 <_dtoa_r+0x998>)
 80056da:	2200      	movs	r2, #0
 80056dc:	f7fa ff94 	bl	8000608 <__aeabi_dmul>
 80056e0:	2200      	movs	r2, #0
 80056e2:	2300      	movs	r3, #0
 80056e4:	4606      	mov	r6, r0
 80056e6:	460f      	mov	r7, r1
 80056e8:	f7fb f9f6 	bl	8000ad8 <__aeabi_dcmpeq>
 80056ec:	2800      	cmp	r0, #0
 80056ee:	d09e      	beq.n	800562e <_dtoa_r+0x65e>
 80056f0:	e7d0      	b.n	8005694 <_dtoa_r+0x6c4>
 80056f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056f4:	2a00      	cmp	r2, #0
 80056f6:	f000 80ca 	beq.w	800588e <_dtoa_r+0x8be>
 80056fa:	9a07      	ldr	r2, [sp, #28]
 80056fc:	2a01      	cmp	r2, #1
 80056fe:	f300 80ad 	bgt.w	800585c <_dtoa_r+0x88c>
 8005702:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005704:	2a00      	cmp	r2, #0
 8005706:	f000 80a5 	beq.w	8005854 <_dtoa_r+0x884>
 800570a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800570e:	9e08      	ldr	r6, [sp, #32]
 8005710:	9d05      	ldr	r5, [sp, #20]
 8005712:	9a05      	ldr	r2, [sp, #20]
 8005714:	441a      	add	r2, r3
 8005716:	9205      	str	r2, [sp, #20]
 8005718:	9a06      	ldr	r2, [sp, #24]
 800571a:	2101      	movs	r1, #1
 800571c:	441a      	add	r2, r3
 800571e:	4620      	mov	r0, r4
 8005720:	9206      	str	r2, [sp, #24]
 8005722:	f000 fc87 	bl	8006034 <__i2b>
 8005726:	4607      	mov	r7, r0
 8005728:	b165      	cbz	r5, 8005744 <_dtoa_r+0x774>
 800572a:	9b06      	ldr	r3, [sp, #24]
 800572c:	2b00      	cmp	r3, #0
 800572e:	dd09      	ble.n	8005744 <_dtoa_r+0x774>
 8005730:	42ab      	cmp	r3, r5
 8005732:	9a05      	ldr	r2, [sp, #20]
 8005734:	bfa8      	it	ge
 8005736:	462b      	movge	r3, r5
 8005738:	1ad2      	subs	r2, r2, r3
 800573a:	9205      	str	r2, [sp, #20]
 800573c:	9a06      	ldr	r2, [sp, #24]
 800573e:	1aed      	subs	r5, r5, r3
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	9306      	str	r3, [sp, #24]
 8005744:	9b08      	ldr	r3, [sp, #32]
 8005746:	b1f3      	cbz	r3, 8005786 <_dtoa_r+0x7b6>
 8005748:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800574a:	2b00      	cmp	r3, #0
 800574c:	f000 80a3 	beq.w	8005896 <_dtoa_r+0x8c6>
 8005750:	2e00      	cmp	r6, #0
 8005752:	dd10      	ble.n	8005776 <_dtoa_r+0x7a6>
 8005754:	4639      	mov	r1, r7
 8005756:	4632      	mov	r2, r6
 8005758:	4620      	mov	r0, r4
 800575a:	f000 fd2b 	bl	80061b4 <__pow5mult>
 800575e:	4652      	mov	r2, sl
 8005760:	4601      	mov	r1, r0
 8005762:	4607      	mov	r7, r0
 8005764:	4620      	mov	r0, r4
 8005766:	f000 fc7b 	bl	8006060 <__multiply>
 800576a:	4651      	mov	r1, sl
 800576c:	4680      	mov	r8, r0
 800576e:	4620      	mov	r0, r4
 8005770:	f000 fb60 	bl	8005e34 <_Bfree>
 8005774:	46c2      	mov	sl, r8
 8005776:	9b08      	ldr	r3, [sp, #32]
 8005778:	1b9a      	subs	r2, r3, r6
 800577a:	d004      	beq.n	8005786 <_dtoa_r+0x7b6>
 800577c:	4651      	mov	r1, sl
 800577e:	4620      	mov	r0, r4
 8005780:	f000 fd18 	bl	80061b4 <__pow5mult>
 8005784:	4682      	mov	sl, r0
 8005786:	2101      	movs	r1, #1
 8005788:	4620      	mov	r0, r4
 800578a:	f000 fc53 	bl	8006034 <__i2b>
 800578e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005790:	2b00      	cmp	r3, #0
 8005792:	4606      	mov	r6, r0
 8005794:	f340 8081 	ble.w	800589a <_dtoa_r+0x8ca>
 8005798:	461a      	mov	r2, r3
 800579a:	4601      	mov	r1, r0
 800579c:	4620      	mov	r0, r4
 800579e:	f000 fd09 	bl	80061b4 <__pow5mult>
 80057a2:	9b07      	ldr	r3, [sp, #28]
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	4606      	mov	r6, r0
 80057a8:	dd7a      	ble.n	80058a0 <_dtoa_r+0x8d0>
 80057aa:	f04f 0800 	mov.w	r8, #0
 80057ae:	6933      	ldr	r3, [r6, #16]
 80057b0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80057b4:	6918      	ldr	r0, [r3, #16]
 80057b6:	f000 fbef 	bl	8005f98 <__hi0bits>
 80057ba:	f1c0 0020 	rsb	r0, r0, #32
 80057be:	9b06      	ldr	r3, [sp, #24]
 80057c0:	4418      	add	r0, r3
 80057c2:	f010 001f 	ands.w	r0, r0, #31
 80057c6:	f000 8094 	beq.w	80058f2 <_dtoa_r+0x922>
 80057ca:	f1c0 0320 	rsb	r3, r0, #32
 80057ce:	2b04      	cmp	r3, #4
 80057d0:	f340 8085 	ble.w	80058de <_dtoa_r+0x90e>
 80057d4:	9b05      	ldr	r3, [sp, #20]
 80057d6:	f1c0 001c 	rsb	r0, r0, #28
 80057da:	4403      	add	r3, r0
 80057dc:	9305      	str	r3, [sp, #20]
 80057de:	9b06      	ldr	r3, [sp, #24]
 80057e0:	4403      	add	r3, r0
 80057e2:	4405      	add	r5, r0
 80057e4:	9306      	str	r3, [sp, #24]
 80057e6:	9b05      	ldr	r3, [sp, #20]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	dd05      	ble.n	80057f8 <_dtoa_r+0x828>
 80057ec:	4651      	mov	r1, sl
 80057ee:	461a      	mov	r2, r3
 80057f0:	4620      	mov	r0, r4
 80057f2:	f000 fd39 	bl	8006268 <__lshift>
 80057f6:	4682      	mov	sl, r0
 80057f8:	9b06      	ldr	r3, [sp, #24]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	dd05      	ble.n	800580a <_dtoa_r+0x83a>
 80057fe:	4631      	mov	r1, r6
 8005800:	461a      	mov	r2, r3
 8005802:	4620      	mov	r0, r4
 8005804:	f000 fd30 	bl	8006268 <__lshift>
 8005808:	4606      	mov	r6, r0
 800580a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800580c:	2b00      	cmp	r3, #0
 800580e:	d072      	beq.n	80058f6 <_dtoa_r+0x926>
 8005810:	4631      	mov	r1, r6
 8005812:	4650      	mov	r0, sl
 8005814:	f000 fd94 	bl	8006340 <__mcmp>
 8005818:	2800      	cmp	r0, #0
 800581a:	da6c      	bge.n	80058f6 <_dtoa_r+0x926>
 800581c:	2300      	movs	r3, #0
 800581e:	4651      	mov	r1, sl
 8005820:	220a      	movs	r2, #10
 8005822:	4620      	mov	r0, r4
 8005824:	f000 fb28 	bl	8005e78 <__multadd>
 8005828:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800582a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800582e:	4682      	mov	sl, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	f000 81b0 	beq.w	8005b96 <_dtoa_r+0xbc6>
 8005836:	2300      	movs	r3, #0
 8005838:	4639      	mov	r1, r7
 800583a:	220a      	movs	r2, #10
 800583c:	4620      	mov	r0, r4
 800583e:	f000 fb1b 	bl	8005e78 <__multadd>
 8005842:	9b01      	ldr	r3, [sp, #4]
 8005844:	2b00      	cmp	r3, #0
 8005846:	4607      	mov	r7, r0
 8005848:	f300 8096 	bgt.w	8005978 <_dtoa_r+0x9a8>
 800584c:	9b07      	ldr	r3, [sp, #28]
 800584e:	2b02      	cmp	r3, #2
 8005850:	dc59      	bgt.n	8005906 <_dtoa_r+0x936>
 8005852:	e091      	b.n	8005978 <_dtoa_r+0x9a8>
 8005854:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005856:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800585a:	e758      	b.n	800570e <_dtoa_r+0x73e>
 800585c:	9b04      	ldr	r3, [sp, #16]
 800585e:	1e5e      	subs	r6, r3, #1
 8005860:	9b08      	ldr	r3, [sp, #32]
 8005862:	42b3      	cmp	r3, r6
 8005864:	bfbf      	itttt	lt
 8005866:	9b08      	ldrlt	r3, [sp, #32]
 8005868:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800586a:	9608      	strlt	r6, [sp, #32]
 800586c:	1af3      	sublt	r3, r6, r3
 800586e:	bfb4      	ite	lt
 8005870:	18d2      	addlt	r2, r2, r3
 8005872:	1b9e      	subge	r6, r3, r6
 8005874:	9b04      	ldr	r3, [sp, #16]
 8005876:	bfbc      	itt	lt
 8005878:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800587a:	2600      	movlt	r6, #0
 800587c:	2b00      	cmp	r3, #0
 800587e:	bfb7      	itett	lt
 8005880:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8005884:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8005888:	1a9d      	sublt	r5, r3, r2
 800588a:	2300      	movlt	r3, #0
 800588c:	e741      	b.n	8005712 <_dtoa_r+0x742>
 800588e:	9e08      	ldr	r6, [sp, #32]
 8005890:	9d05      	ldr	r5, [sp, #20]
 8005892:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005894:	e748      	b.n	8005728 <_dtoa_r+0x758>
 8005896:	9a08      	ldr	r2, [sp, #32]
 8005898:	e770      	b.n	800577c <_dtoa_r+0x7ac>
 800589a:	9b07      	ldr	r3, [sp, #28]
 800589c:	2b01      	cmp	r3, #1
 800589e:	dc19      	bgt.n	80058d4 <_dtoa_r+0x904>
 80058a0:	9b02      	ldr	r3, [sp, #8]
 80058a2:	b9bb      	cbnz	r3, 80058d4 <_dtoa_r+0x904>
 80058a4:	9b03      	ldr	r3, [sp, #12]
 80058a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80058aa:	b99b      	cbnz	r3, 80058d4 <_dtoa_r+0x904>
 80058ac:	9b03      	ldr	r3, [sp, #12]
 80058ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80058b2:	0d1b      	lsrs	r3, r3, #20
 80058b4:	051b      	lsls	r3, r3, #20
 80058b6:	b183      	cbz	r3, 80058da <_dtoa_r+0x90a>
 80058b8:	9b05      	ldr	r3, [sp, #20]
 80058ba:	3301      	adds	r3, #1
 80058bc:	9305      	str	r3, [sp, #20]
 80058be:	9b06      	ldr	r3, [sp, #24]
 80058c0:	3301      	adds	r3, #1
 80058c2:	9306      	str	r3, [sp, #24]
 80058c4:	f04f 0801 	mov.w	r8, #1
 80058c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	f47f af6f 	bne.w	80057ae <_dtoa_r+0x7de>
 80058d0:	2001      	movs	r0, #1
 80058d2:	e774      	b.n	80057be <_dtoa_r+0x7ee>
 80058d4:	f04f 0800 	mov.w	r8, #0
 80058d8:	e7f6      	b.n	80058c8 <_dtoa_r+0x8f8>
 80058da:	4698      	mov	r8, r3
 80058dc:	e7f4      	b.n	80058c8 <_dtoa_r+0x8f8>
 80058de:	d082      	beq.n	80057e6 <_dtoa_r+0x816>
 80058e0:	9a05      	ldr	r2, [sp, #20]
 80058e2:	331c      	adds	r3, #28
 80058e4:	441a      	add	r2, r3
 80058e6:	9205      	str	r2, [sp, #20]
 80058e8:	9a06      	ldr	r2, [sp, #24]
 80058ea:	441a      	add	r2, r3
 80058ec:	441d      	add	r5, r3
 80058ee:	9206      	str	r2, [sp, #24]
 80058f0:	e779      	b.n	80057e6 <_dtoa_r+0x816>
 80058f2:	4603      	mov	r3, r0
 80058f4:	e7f4      	b.n	80058e0 <_dtoa_r+0x910>
 80058f6:	9b04      	ldr	r3, [sp, #16]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	dc37      	bgt.n	800596c <_dtoa_r+0x99c>
 80058fc:	9b07      	ldr	r3, [sp, #28]
 80058fe:	2b02      	cmp	r3, #2
 8005900:	dd34      	ble.n	800596c <_dtoa_r+0x99c>
 8005902:	9b04      	ldr	r3, [sp, #16]
 8005904:	9301      	str	r3, [sp, #4]
 8005906:	9b01      	ldr	r3, [sp, #4]
 8005908:	b963      	cbnz	r3, 8005924 <_dtoa_r+0x954>
 800590a:	4631      	mov	r1, r6
 800590c:	2205      	movs	r2, #5
 800590e:	4620      	mov	r0, r4
 8005910:	f000 fab2 	bl	8005e78 <__multadd>
 8005914:	4601      	mov	r1, r0
 8005916:	4606      	mov	r6, r0
 8005918:	4650      	mov	r0, sl
 800591a:	f000 fd11 	bl	8006340 <__mcmp>
 800591e:	2800      	cmp	r0, #0
 8005920:	f73f adbb 	bgt.w	800549a <_dtoa_r+0x4ca>
 8005924:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005926:	9d00      	ldr	r5, [sp, #0]
 8005928:	ea6f 0b03 	mvn.w	fp, r3
 800592c:	f04f 0800 	mov.w	r8, #0
 8005930:	4631      	mov	r1, r6
 8005932:	4620      	mov	r0, r4
 8005934:	f000 fa7e 	bl	8005e34 <_Bfree>
 8005938:	2f00      	cmp	r7, #0
 800593a:	f43f aeab 	beq.w	8005694 <_dtoa_r+0x6c4>
 800593e:	f1b8 0f00 	cmp.w	r8, #0
 8005942:	d005      	beq.n	8005950 <_dtoa_r+0x980>
 8005944:	45b8      	cmp	r8, r7
 8005946:	d003      	beq.n	8005950 <_dtoa_r+0x980>
 8005948:	4641      	mov	r1, r8
 800594a:	4620      	mov	r0, r4
 800594c:	f000 fa72 	bl	8005e34 <_Bfree>
 8005950:	4639      	mov	r1, r7
 8005952:	4620      	mov	r0, r4
 8005954:	f000 fa6e 	bl	8005e34 <_Bfree>
 8005958:	e69c      	b.n	8005694 <_dtoa_r+0x6c4>
 800595a:	2600      	movs	r6, #0
 800595c:	4637      	mov	r7, r6
 800595e:	e7e1      	b.n	8005924 <_dtoa_r+0x954>
 8005960:	46bb      	mov	fp, r7
 8005962:	4637      	mov	r7, r6
 8005964:	e599      	b.n	800549a <_dtoa_r+0x4ca>
 8005966:	bf00      	nop
 8005968:	40240000 	.word	0x40240000
 800596c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800596e:	2b00      	cmp	r3, #0
 8005970:	f000 80c8 	beq.w	8005b04 <_dtoa_r+0xb34>
 8005974:	9b04      	ldr	r3, [sp, #16]
 8005976:	9301      	str	r3, [sp, #4]
 8005978:	2d00      	cmp	r5, #0
 800597a:	dd05      	ble.n	8005988 <_dtoa_r+0x9b8>
 800597c:	4639      	mov	r1, r7
 800597e:	462a      	mov	r2, r5
 8005980:	4620      	mov	r0, r4
 8005982:	f000 fc71 	bl	8006268 <__lshift>
 8005986:	4607      	mov	r7, r0
 8005988:	f1b8 0f00 	cmp.w	r8, #0
 800598c:	d05b      	beq.n	8005a46 <_dtoa_r+0xa76>
 800598e:	6879      	ldr	r1, [r7, #4]
 8005990:	4620      	mov	r0, r4
 8005992:	f000 fa0f 	bl	8005db4 <_Balloc>
 8005996:	4605      	mov	r5, r0
 8005998:	b928      	cbnz	r0, 80059a6 <_dtoa_r+0x9d6>
 800599a:	4b83      	ldr	r3, [pc, #524]	; (8005ba8 <_dtoa_r+0xbd8>)
 800599c:	4602      	mov	r2, r0
 800599e:	f240 21ef 	movw	r1, #751	; 0x2ef
 80059a2:	f7ff bb2e 	b.w	8005002 <_dtoa_r+0x32>
 80059a6:	693a      	ldr	r2, [r7, #16]
 80059a8:	3202      	adds	r2, #2
 80059aa:	0092      	lsls	r2, r2, #2
 80059ac:	f107 010c 	add.w	r1, r7, #12
 80059b0:	300c      	adds	r0, #12
 80059b2:	f002 f8b1 	bl	8007b18 <memcpy>
 80059b6:	2201      	movs	r2, #1
 80059b8:	4629      	mov	r1, r5
 80059ba:	4620      	mov	r0, r4
 80059bc:	f000 fc54 	bl	8006268 <__lshift>
 80059c0:	9b00      	ldr	r3, [sp, #0]
 80059c2:	3301      	adds	r3, #1
 80059c4:	9304      	str	r3, [sp, #16]
 80059c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80059ca:	4413      	add	r3, r2
 80059cc:	9308      	str	r3, [sp, #32]
 80059ce:	9b02      	ldr	r3, [sp, #8]
 80059d0:	f003 0301 	and.w	r3, r3, #1
 80059d4:	46b8      	mov	r8, r7
 80059d6:	9306      	str	r3, [sp, #24]
 80059d8:	4607      	mov	r7, r0
 80059da:	9b04      	ldr	r3, [sp, #16]
 80059dc:	4631      	mov	r1, r6
 80059de:	3b01      	subs	r3, #1
 80059e0:	4650      	mov	r0, sl
 80059e2:	9301      	str	r3, [sp, #4]
 80059e4:	f7ff fa6a 	bl	8004ebc <quorem>
 80059e8:	4641      	mov	r1, r8
 80059ea:	9002      	str	r0, [sp, #8]
 80059ec:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80059f0:	4650      	mov	r0, sl
 80059f2:	f000 fca5 	bl	8006340 <__mcmp>
 80059f6:	463a      	mov	r2, r7
 80059f8:	9005      	str	r0, [sp, #20]
 80059fa:	4631      	mov	r1, r6
 80059fc:	4620      	mov	r0, r4
 80059fe:	f000 fcbb 	bl	8006378 <__mdiff>
 8005a02:	68c2      	ldr	r2, [r0, #12]
 8005a04:	4605      	mov	r5, r0
 8005a06:	bb02      	cbnz	r2, 8005a4a <_dtoa_r+0xa7a>
 8005a08:	4601      	mov	r1, r0
 8005a0a:	4650      	mov	r0, sl
 8005a0c:	f000 fc98 	bl	8006340 <__mcmp>
 8005a10:	4602      	mov	r2, r0
 8005a12:	4629      	mov	r1, r5
 8005a14:	4620      	mov	r0, r4
 8005a16:	9209      	str	r2, [sp, #36]	; 0x24
 8005a18:	f000 fa0c 	bl	8005e34 <_Bfree>
 8005a1c:	9b07      	ldr	r3, [sp, #28]
 8005a1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a20:	9d04      	ldr	r5, [sp, #16]
 8005a22:	ea43 0102 	orr.w	r1, r3, r2
 8005a26:	9b06      	ldr	r3, [sp, #24]
 8005a28:	4319      	orrs	r1, r3
 8005a2a:	d110      	bne.n	8005a4e <_dtoa_r+0xa7e>
 8005a2c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005a30:	d029      	beq.n	8005a86 <_dtoa_r+0xab6>
 8005a32:	9b05      	ldr	r3, [sp, #20]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	dd02      	ble.n	8005a3e <_dtoa_r+0xa6e>
 8005a38:	9b02      	ldr	r3, [sp, #8]
 8005a3a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005a3e:	9b01      	ldr	r3, [sp, #4]
 8005a40:	f883 9000 	strb.w	r9, [r3]
 8005a44:	e774      	b.n	8005930 <_dtoa_r+0x960>
 8005a46:	4638      	mov	r0, r7
 8005a48:	e7ba      	b.n	80059c0 <_dtoa_r+0x9f0>
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	e7e1      	b.n	8005a12 <_dtoa_r+0xa42>
 8005a4e:	9b05      	ldr	r3, [sp, #20]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	db04      	blt.n	8005a5e <_dtoa_r+0xa8e>
 8005a54:	9907      	ldr	r1, [sp, #28]
 8005a56:	430b      	orrs	r3, r1
 8005a58:	9906      	ldr	r1, [sp, #24]
 8005a5a:	430b      	orrs	r3, r1
 8005a5c:	d120      	bne.n	8005aa0 <_dtoa_r+0xad0>
 8005a5e:	2a00      	cmp	r2, #0
 8005a60:	dded      	ble.n	8005a3e <_dtoa_r+0xa6e>
 8005a62:	4651      	mov	r1, sl
 8005a64:	2201      	movs	r2, #1
 8005a66:	4620      	mov	r0, r4
 8005a68:	f000 fbfe 	bl	8006268 <__lshift>
 8005a6c:	4631      	mov	r1, r6
 8005a6e:	4682      	mov	sl, r0
 8005a70:	f000 fc66 	bl	8006340 <__mcmp>
 8005a74:	2800      	cmp	r0, #0
 8005a76:	dc03      	bgt.n	8005a80 <_dtoa_r+0xab0>
 8005a78:	d1e1      	bne.n	8005a3e <_dtoa_r+0xa6e>
 8005a7a:	f019 0f01 	tst.w	r9, #1
 8005a7e:	d0de      	beq.n	8005a3e <_dtoa_r+0xa6e>
 8005a80:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005a84:	d1d8      	bne.n	8005a38 <_dtoa_r+0xa68>
 8005a86:	9a01      	ldr	r2, [sp, #4]
 8005a88:	2339      	movs	r3, #57	; 0x39
 8005a8a:	7013      	strb	r3, [r2, #0]
 8005a8c:	462b      	mov	r3, r5
 8005a8e:	461d      	mov	r5, r3
 8005a90:	3b01      	subs	r3, #1
 8005a92:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005a96:	2a39      	cmp	r2, #57	; 0x39
 8005a98:	d06c      	beq.n	8005b74 <_dtoa_r+0xba4>
 8005a9a:	3201      	adds	r2, #1
 8005a9c:	701a      	strb	r2, [r3, #0]
 8005a9e:	e747      	b.n	8005930 <_dtoa_r+0x960>
 8005aa0:	2a00      	cmp	r2, #0
 8005aa2:	dd07      	ble.n	8005ab4 <_dtoa_r+0xae4>
 8005aa4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005aa8:	d0ed      	beq.n	8005a86 <_dtoa_r+0xab6>
 8005aaa:	9a01      	ldr	r2, [sp, #4]
 8005aac:	f109 0301 	add.w	r3, r9, #1
 8005ab0:	7013      	strb	r3, [r2, #0]
 8005ab2:	e73d      	b.n	8005930 <_dtoa_r+0x960>
 8005ab4:	9b04      	ldr	r3, [sp, #16]
 8005ab6:	9a08      	ldr	r2, [sp, #32]
 8005ab8:	f803 9c01 	strb.w	r9, [r3, #-1]
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d043      	beq.n	8005b48 <_dtoa_r+0xb78>
 8005ac0:	4651      	mov	r1, sl
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	220a      	movs	r2, #10
 8005ac6:	4620      	mov	r0, r4
 8005ac8:	f000 f9d6 	bl	8005e78 <__multadd>
 8005acc:	45b8      	cmp	r8, r7
 8005ace:	4682      	mov	sl, r0
 8005ad0:	f04f 0300 	mov.w	r3, #0
 8005ad4:	f04f 020a 	mov.w	r2, #10
 8005ad8:	4641      	mov	r1, r8
 8005ada:	4620      	mov	r0, r4
 8005adc:	d107      	bne.n	8005aee <_dtoa_r+0xb1e>
 8005ade:	f000 f9cb 	bl	8005e78 <__multadd>
 8005ae2:	4680      	mov	r8, r0
 8005ae4:	4607      	mov	r7, r0
 8005ae6:	9b04      	ldr	r3, [sp, #16]
 8005ae8:	3301      	adds	r3, #1
 8005aea:	9304      	str	r3, [sp, #16]
 8005aec:	e775      	b.n	80059da <_dtoa_r+0xa0a>
 8005aee:	f000 f9c3 	bl	8005e78 <__multadd>
 8005af2:	4639      	mov	r1, r7
 8005af4:	4680      	mov	r8, r0
 8005af6:	2300      	movs	r3, #0
 8005af8:	220a      	movs	r2, #10
 8005afa:	4620      	mov	r0, r4
 8005afc:	f000 f9bc 	bl	8005e78 <__multadd>
 8005b00:	4607      	mov	r7, r0
 8005b02:	e7f0      	b.n	8005ae6 <_dtoa_r+0xb16>
 8005b04:	9b04      	ldr	r3, [sp, #16]
 8005b06:	9301      	str	r3, [sp, #4]
 8005b08:	9d00      	ldr	r5, [sp, #0]
 8005b0a:	4631      	mov	r1, r6
 8005b0c:	4650      	mov	r0, sl
 8005b0e:	f7ff f9d5 	bl	8004ebc <quorem>
 8005b12:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005b16:	9b00      	ldr	r3, [sp, #0]
 8005b18:	f805 9b01 	strb.w	r9, [r5], #1
 8005b1c:	1aea      	subs	r2, r5, r3
 8005b1e:	9b01      	ldr	r3, [sp, #4]
 8005b20:	4293      	cmp	r3, r2
 8005b22:	dd07      	ble.n	8005b34 <_dtoa_r+0xb64>
 8005b24:	4651      	mov	r1, sl
 8005b26:	2300      	movs	r3, #0
 8005b28:	220a      	movs	r2, #10
 8005b2a:	4620      	mov	r0, r4
 8005b2c:	f000 f9a4 	bl	8005e78 <__multadd>
 8005b30:	4682      	mov	sl, r0
 8005b32:	e7ea      	b.n	8005b0a <_dtoa_r+0xb3a>
 8005b34:	9b01      	ldr	r3, [sp, #4]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	bfc8      	it	gt
 8005b3a:	461d      	movgt	r5, r3
 8005b3c:	9b00      	ldr	r3, [sp, #0]
 8005b3e:	bfd8      	it	le
 8005b40:	2501      	movle	r5, #1
 8005b42:	441d      	add	r5, r3
 8005b44:	f04f 0800 	mov.w	r8, #0
 8005b48:	4651      	mov	r1, sl
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	4620      	mov	r0, r4
 8005b4e:	f000 fb8b 	bl	8006268 <__lshift>
 8005b52:	4631      	mov	r1, r6
 8005b54:	4682      	mov	sl, r0
 8005b56:	f000 fbf3 	bl	8006340 <__mcmp>
 8005b5a:	2800      	cmp	r0, #0
 8005b5c:	dc96      	bgt.n	8005a8c <_dtoa_r+0xabc>
 8005b5e:	d102      	bne.n	8005b66 <_dtoa_r+0xb96>
 8005b60:	f019 0f01 	tst.w	r9, #1
 8005b64:	d192      	bne.n	8005a8c <_dtoa_r+0xabc>
 8005b66:	462b      	mov	r3, r5
 8005b68:	461d      	mov	r5, r3
 8005b6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005b6e:	2a30      	cmp	r2, #48	; 0x30
 8005b70:	d0fa      	beq.n	8005b68 <_dtoa_r+0xb98>
 8005b72:	e6dd      	b.n	8005930 <_dtoa_r+0x960>
 8005b74:	9a00      	ldr	r2, [sp, #0]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d189      	bne.n	8005a8e <_dtoa_r+0xabe>
 8005b7a:	f10b 0b01 	add.w	fp, fp, #1
 8005b7e:	2331      	movs	r3, #49	; 0x31
 8005b80:	e796      	b.n	8005ab0 <_dtoa_r+0xae0>
 8005b82:	4b0a      	ldr	r3, [pc, #40]	; (8005bac <_dtoa_r+0xbdc>)
 8005b84:	f7ff ba99 	b.w	80050ba <_dtoa_r+0xea>
 8005b88:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	f47f aa6d 	bne.w	800506a <_dtoa_r+0x9a>
 8005b90:	4b07      	ldr	r3, [pc, #28]	; (8005bb0 <_dtoa_r+0xbe0>)
 8005b92:	f7ff ba92 	b.w	80050ba <_dtoa_r+0xea>
 8005b96:	9b01      	ldr	r3, [sp, #4]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	dcb5      	bgt.n	8005b08 <_dtoa_r+0xb38>
 8005b9c:	9b07      	ldr	r3, [sp, #28]
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	f73f aeb1 	bgt.w	8005906 <_dtoa_r+0x936>
 8005ba4:	e7b0      	b.n	8005b08 <_dtoa_r+0xb38>
 8005ba6:	bf00      	nop
 8005ba8:	08008569 	.word	0x08008569
 8005bac:	0800849f 	.word	0x0800849f
 8005bb0:	08008504 	.word	0x08008504

08005bb4 <_free_r>:
 8005bb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005bb6:	2900      	cmp	r1, #0
 8005bb8:	d044      	beq.n	8005c44 <_free_r+0x90>
 8005bba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bbe:	9001      	str	r0, [sp, #4]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	f1a1 0404 	sub.w	r4, r1, #4
 8005bc6:	bfb8      	it	lt
 8005bc8:	18e4      	addlt	r4, r4, r3
 8005bca:	f000 f8e7 	bl	8005d9c <__malloc_lock>
 8005bce:	4a1e      	ldr	r2, [pc, #120]	; (8005c48 <_free_r+0x94>)
 8005bd0:	9801      	ldr	r0, [sp, #4]
 8005bd2:	6813      	ldr	r3, [r2, #0]
 8005bd4:	b933      	cbnz	r3, 8005be4 <_free_r+0x30>
 8005bd6:	6063      	str	r3, [r4, #4]
 8005bd8:	6014      	str	r4, [r2, #0]
 8005bda:	b003      	add	sp, #12
 8005bdc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005be0:	f000 b8e2 	b.w	8005da8 <__malloc_unlock>
 8005be4:	42a3      	cmp	r3, r4
 8005be6:	d908      	bls.n	8005bfa <_free_r+0x46>
 8005be8:	6825      	ldr	r5, [r4, #0]
 8005bea:	1961      	adds	r1, r4, r5
 8005bec:	428b      	cmp	r3, r1
 8005bee:	bf01      	itttt	eq
 8005bf0:	6819      	ldreq	r1, [r3, #0]
 8005bf2:	685b      	ldreq	r3, [r3, #4]
 8005bf4:	1949      	addeq	r1, r1, r5
 8005bf6:	6021      	streq	r1, [r4, #0]
 8005bf8:	e7ed      	b.n	8005bd6 <_free_r+0x22>
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	b10b      	cbz	r3, 8005c04 <_free_r+0x50>
 8005c00:	42a3      	cmp	r3, r4
 8005c02:	d9fa      	bls.n	8005bfa <_free_r+0x46>
 8005c04:	6811      	ldr	r1, [r2, #0]
 8005c06:	1855      	adds	r5, r2, r1
 8005c08:	42a5      	cmp	r5, r4
 8005c0a:	d10b      	bne.n	8005c24 <_free_r+0x70>
 8005c0c:	6824      	ldr	r4, [r4, #0]
 8005c0e:	4421      	add	r1, r4
 8005c10:	1854      	adds	r4, r2, r1
 8005c12:	42a3      	cmp	r3, r4
 8005c14:	6011      	str	r1, [r2, #0]
 8005c16:	d1e0      	bne.n	8005bda <_free_r+0x26>
 8005c18:	681c      	ldr	r4, [r3, #0]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	6053      	str	r3, [r2, #4]
 8005c1e:	440c      	add	r4, r1
 8005c20:	6014      	str	r4, [r2, #0]
 8005c22:	e7da      	b.n	8005bda <_free_r+0x26>
 8005c24:	d902      	bls.n	8005c2c <_free_r+0x78>
 8005c26:	230c      	movs	r3, #12
 8005c28:	6003      	str	r3, [r0, #0]
 8005c2a:	e7d6      	b.n	8005bda <_free_r+0x26>
 8005c2c:	6825      	ldr	r5, [r4, #0]
 8005c2e:	1961      	adds	r1, r4, r5
 8005c30:	428b      	cmp	r3, r1
 8005c32:	bf04      	itt	eq
 8005c34:	6819      	ldreq	r1, [r3, #0]
 8005c36:	685b      	ldreq	r3, [r3, #4]
 8005c38:	6063      	str	r3, [r4, #4]
 8005c3a:	bf04      	itt	eq
 8005c3c:	1949      	addeq	r1, r1, r5
 8005c3e:	6021      	streq	r1, [r4, #0]
 8005c40:	6054      	str	r4, [r2, #4]
 8005c42:	e7ca      	b.n	8005bda <_free_r+0x26>
 8005c44:	b003      	add	sp, #12
 8005c46:	bd30      	pop	{r4, r5, pc}
 8005c48:	200003b8 	.word	0x200003b8

08005c4c <malloc>:
 8005c4c:	4b02      	ldr	r3, [pc, #8]	; (8005c58 <malloc+0xc>)
 8005c4e:	4601      	mov	r1, r0
 8005c50:	6818      	ldr	r0, [r3, #0]
 8005c52:	f000 b823 	b.w	8005c9c <_malloc_r>
 8005c56:	bf00      	nop
 8005c58:	20000064 	.word	0x20000064

08005c5c <sbrk_aligned>:
 8005c5c:	b570      	push	{r4, r5, r6, lr}
 8005c5e:	4e0e      	ldr	r6, [pc, #56]	; (8005c98 <sbrk_aligned+0x3c>)
 8005c60:	460c      	mov	r4, r1
 8005c62:	6831      	ldr	r1, [r6, #0]
 8005c64:	4605      	mov	r5, r0
 8005c66:	b911      	cbnz	r1, 8005c6e <sbrk_aligned+0x12>
 8005c68:	f001 ff46 	bl	8007af8 <_sbrk_r>
 8005c6c:	6030      	str	r0, [r6, #0]
 8005c6e:	4621      	mov	r1, r4
 8005c70:	4628      	mov	r0, r5
 8005c72:	f001 ff41 	bl	8007af8 <_sbrk_r>
 8005c76:	1c43      	adds	r3, r0, #1
 8005c78:	d00a      	beq.n	8005c90 <sbrk_aligned+0x34>
 8005c7a:	1cc4      	adds	r4, r0, #3
 8005c7c:	f024 0403 	bic.w	r4, r4, #3
 8005c80:	42a0      	cmp	r0, r4
 8005c82:	d007      	beq.n	8005c94 <sbrk_aligned+0x38>
 8005c84:	1a21      	subs	r1, r4, r0
 8005c86:	4628      	mov	r0, r5
 8005c88:	f001 ff36 	bl	8007af8 <_sbrk_r>
 8005c8c:	3001      	adds	r0, #1
 8005c8e:	d101      	bne.n	8005c94 <sbrk_aligned+0x38>
 8005c90:	f04f 34ff 	mov.w	r4, #4294967295
 8005c94:	4620      	mov	r0, r4
 8005c96:	bd70      	pop	{r4, r5, r6, pc}
 8005c98:	200003bc 	.word	0x200003bc

08005c9c <_malloc_r>:
 8005c9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ca0:	1ccd      	adds	r5, r1, #3
 8005ca2:	f025 0503 	bic.w	r5, r5, #3
 8005ca6:	3508      	adds	r5, #8
 8005ca8:	2d0c      	cmp	r5, #12
 8005caa:	bf38      	it	cc
 8005cac:	250c      	movcc	r5, #12
 8005cae:	2d00      	cmp	r5, #0
 8005cb0:	4607      	mov	r7, r0
 8005cb2:	db01      	blt.n	8005cb8 <_malloc_r+0x1c>
 8005cb4:	42a9      	cmp	r1, r5
 8005cb6:	d905      	bls.n	8005cc4 <_malloc_r+0x28>
 8005cb8:	230c      	movs	r3, #12
 8005cba:	603b      	str	r3, [r7, #0]
 8005cbc:	2600      	movs	r6, #0
 8005cbe:	4630      	mov	r0, r6
 8005cc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cc4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005d98 <_malloc_r+0xfc>
 8005cc8:	f000 f868 	bl	8005d9c <__malloc_lock>
 8005ccc:	f8d8 3000 	ldr.w	r3, [r8]
 8005cd0:	461c      	mov	r4, r3
 8005cd2:	bb5c      	cbnz	r4, 8005d2c <_malloc_r+0x90>
 8005cd4:	4629      	mov	r1, r5
 8005cd6:	4638      	mov	r0, r7
 8005cd8:	f7ff ffc0 	bl	8005c5c <sbrk_aligned>
 8005cdc:	1c43      	adds	r3, r0, #1
 8005cde:	4604      	mov	r4, r0
 8005ce0:	d155      	bne.n	8005d8e <_malloc_r+0xf2>
 8005ce2:	f8d8 4000 	ldr.w	r4, [r8]
 8005ce6:	4626      	mov	r6, r4
 8005ce8:	2e00      	cmp	r6, #0
 8005cea:	d145      	bne.n	8005d78 <_malloc_r+0xdc>
 8005cec:	2c00      	cmp	r4, #0
 8005cee:	d048      	beq.n	8005d82 <_malloc_r+0xe6>
 8005cf0:	6823      	ldr	r3, [r4, #0]
 8005cf2:	4631      	mov	r1, r6
 8005cf4:	4638      	mov	r0, r7
 8005cf6:	eb04 0903 	add.w	r9, r4, r3
 8005cfa:	f001 fefd 	bl	8007af8 <_sbrk_r>
 8005cfe:	4581      	cmp	r9, r0
 8005d00:	d13f      	bne.n	8005d82 <_malloc_r+0xe6>
 8005d02:	6821      	ldr	r1, [r4, #0]
 8005d04:	1a6d      	subs	r5, r5, r1
 8005d06:	4629      	mov	r1, r5
 8005d08:	4638      	mov	r0, r7
 8005d0a:	f7ff ffa7 	bl	8005c5c <sbrk_aligned>
 8005d0e:	3001      	adds	r0, #1
 8005d10:	d037      	beq.n	8005d82 <_malloc_r+0xe6>
 8005d12:	6823      	ldr	r3, [r4, #0]
 8005d14:	442b      	add	r3, r5
 8005d16:	6023      	str	r3, [r4, #0]
 8005d18:	f8d8 3000 	ldr.w	r3, [r8]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d038      	beq.n	8005d92 <_malloc_r+0xf6>
 8005d20:	685a      	ldr	r2, [r3, #4]
 8005d22:	42a2      	cmp	r2, r4
 8005d24:	d12b      	bne.n	8005d7e <_malloc_r+0xe2>
 8005d26:	2200      	movs	r2, #0
 8005d28:	605a      	str	r2, [r3, #4]
 8005d2a:	e00f      	b.n	8005d4c <_malloc_r+0xb0>
 8005d2c:	6822      	ldr	r2, [r4, #0]
 8005d2e:	1b52      	subs	r2, r2, r5
 8005d30:	d41f      	bmi.n	8005d72 <_malloc_r+0xd6>
 8005d32:	2a0b      	cmp	r2, #11
 8005d34:	d917      	bls.n	8005d66 <_malloc_r+0xca>
 8005d36:	1961      	adds	r1, r4, r5
 8005d38:	42a3      	cmp	r3, r4
 8005d3a:	6025      	str	r5, [r4, #0]
 8005d3c:	bf18      	it	ne
 8005d3e:	6059      	strne	r1, [r3, #4]
 8005d40:	6863      	ldr	r3, [r4, #4]
 8005d42:	bf08      	it	eq
 8005d44:	f8c8 1000 	streq.w	r1, [r8]
 8005d48:	5162      	str	r2, [r4, r5]
 8005d4a:	604b      	str	r3, [r1, #4]
 8005d4c:	4638      	mov	r0, r7
 8005d4e:	f104 060b 	add.w	r6, r4, #11
 8005d52:	f000 f829 	bl	8005da8 <__malloc_unlock>
 8005d56:	f026 0607 	bic.w	r6, r6, #7
 8005d5a:	1d23      	adds	r3, r4, #4
 8005d5c:	1af2      	subs	r2, r6, r3
 8005d5e:	d0ae      	beq.n	8005cbe <_malloc_r+0x22>
 8005d60:	1b9b      	subs	r3, r3, r6
 8005d62:	50a3      	str	r3, [r4, r2]
 8005d64:	e7ab      	b.n	8005cbe <_malloc_r+0x22>
 8005d66:	42a3      	cmp	r3, r4
 8005d68:	6862      	ldr	r2, [r4, #4]
 8005d6a:	d1dd      	bne.n	8005d28 <_malloc_r+0x8c>
 8005d6c:	f8c8 2000 	str.w	r2, [r8]
 8005d70:	e7ec      	b.n	8005d4c <_malloc_r+0xb0>
 8005d72:	4623      	mov	r3, r4
 8005d74:	6864      	ldr	r4, [r4, #4]
 8005d76:	e7ac      	b.n	8005cd2 <_malloc_r+0x36>
 8005d78:	4634      	mov	r4, r6
 8005d7a:	6876      	ldr	r6, [r6, #4]
 8005d7c:	e7b4      	b.n	8005ce8 <_malloc_r+0x4c>
 8005d7e:	4613      	mov	r3, r2
 8005d80:	e7cc      	b.n	8005d1c <_malloc_r+0x80>
 8005d82:	230c      	movs	r3, #12
 8005d84:	603b      	str	r3, [r7, #0]
 8005d86:	4638      	mov	r0, r7
 8005d88:	f000 f80e 	bl	8005da8 <__malloc_unlock>
 8005d8c:	e797      	b.n	8005cbe <_malloc_r+0x22>
 8005d8e:	6025      	str	r5, [r4, #0]
 8005d90:	e7dc      	b.n	8005d4c <_malloc_r+0xb0>
 8005d92:	605b      	str	r3, [r3, #4]
 8005d94:	deff      	udf	#255	; 0xff
 8005d96:	bf00      	nop
 8005d98:	200003b8 	.word	0x200003b8

08005d9c <__malloc_lock>:
 8005d9c:	4801      	ldr	r0, [pc, #4]	; (8005da4 <__malloc_lock+0x8>)
 8005d9e:	f7ff b867 	b.w	8004e70 <__retarget_lock_acquire_recursive>
 8005da2:	bf00      	nop
 8005da4:	200003b4 	.word	0x200003b4

08005da8 <__malloc_unlock>:
 8005da8:	4801      	ldr	r0, [pc, #4]	; (8005db0 <__malloc_unlock+0x8>)
 8005daa:	f7ff b862 	b.w	8004e72 <__retarget_lock_release_recursive>
 8005dae:	bf00      	nop
 8005db0:	200003b4 	.word	0x200003b4

08005db4 <_Balloc>:
 8005db4:	b570      	push	{r4, r5, r6, lr}
 8005db6:	69c6      	ldr	r6, [r0, #28]
 8005db8:	4604      	mov	r4, r0
 8005dba:	460d      	mov	r5, r1
 8005dbc:	b976      	cbnz	r6, 8005ddc <_Balloc+0x28>
 8005dbe:	2010      	movs	r0, #16
 8005dc0:	f7ff ff44 	bl	8005c4c <malloc>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	61e0      	str	r0, [r4, #28]
 8005dc8:	b920      	cbnz	r0, 8005dd4 <_Balloc+0x20>
 8005dca:	4b18      	ldr	r3, [pc, #96]	; (8005e2c <_Balloc+0x78>)
 8005dcc:	4818      	ldr	r0, [pc, #96]	; (8005e30 <_Balloc+0x7c>)
 8005dce:	216b      	movs	r1, #107	; 0x6b
 8005dd0:	f7ff f856 	bl	8004e80 <__assert_func>
 8005dd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005dd8:	6006      	str	r6, [r0, #0]
 8005dda:	60c6      	str	r6, [r0, #12]
 8005ddc:	69e6      	ldr	r6, [r4, #28]
 8005dde:	68f3      	ldr	r3, [r6, #12]
 8005de0:	b183      	cbz	r3, 8005e04 <_Balloc+0x50>
 8005de2:	69e3      	ldr	r3, [r4, #28]
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005dea:	b9b8      	cbnz	r0, 8005e1c <_Balloc+0x68>
 8005dec:	2101      	movs	r1, #1
 8005dee:	fa01 f605 	lsl.w	r6, r1, r5
 8005df2:	1d72      	adds	r2, r6, #5
 8005df4:	0092      	lsls	r2, r2, #2
 8005df6:	4620      	mov	r0, r4
 8005df8:	f001 fead 	bl	8007b56 <_calloc_r>
 8005dfc:	b160      	cbz	r0, 8005e18 <_Balloc+0x64>
 8005dfe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005e02:	e00e      	b.n	8005e22 <_Balloc+0x6e>
 8005e04:	2221      	movs	r2, #33	; 0x21
 8005e06:	2104      	movs	r1, #4
 8005e08:	4620      	mov	r0, r4
 8005e0a:	f001 fea4 	bl	8007b56 <_calloc_r>
 8005e0e:	69e3      	ldr	r3, [r4, #28]
 8005e10:	60f0      	str	r0, [r6, #12]
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d1e4      	bne.n	8005de2 <_Balloc+0x2e>
 8005e18:	2000      	movs	r0, #0
 8005e1a:	bd70      	pop	{r4, r5, r6, pc}
 8005e1c:	6802      	ldr	r2, [r0, #0]
 8005e1e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005e22:	2300      	movs	r3, #0
 8005e24:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005e28:	e7f7      	b.n	8005e1a <_Balloc+0x66>
 8005e2a:	bf00      	nop
 8005e2c:	08008420 	.word	0x08008420
 8005e30:	0800857a 	.word	0x0800857a

08005e34 <_Bfree>:
 8005e34:	b570      	push	{r4, r5, r6, lr}
 8005e36:	69c6      	ldr	r6, [r0, #28]
 8005e38:	4605      	mov	r5, r0
 8005e3a:	460c      	mov	r4, r1
 8005e3c:	b976      	cbnz	r6, 8005e5c <_Bfree+0x28>
 8005e3e:	2010      	movs	r0, #16
 8005e40:	f7ff ff04 	bl	8005c4c <malloc>
 8005e44:	4602      	mov	r2, r0
 8005e46:	61e8      	str	r0, [r5, #28]
 8005e48:	b920      	cbnz	r0, 8005e54 <_Bfree+0x20>
 8005e4a:	4b09      	ldr	r3, [pc, #36]	; (8005e70 <_Bfree+0x3c>)
 8005e4c:	4809      	ldr	r0, [pc, #36]	; (8005e74 <_Bfree+0x40>)
 8005e4e:	218f      	movs	r1, #143	; 0x8f
 8005e50:	f7ff f816 	bl	8004e80 <__assert_func>
 8005e54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005e58:	6006      	str	r6, [r0, #0]
 8005e5a:	60c6      	str	r6, [r0, #12]
 8005e5c:	b13c      	cbz	r4, 8005e6e <_Bfree+0x3a>
 8005e5e:	69eb      	ldr	r3, [r5, #28]
 8005e60:	6862      	ldr	r2, [r4, #4]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005e68:	6021      	str	r1, [r4, #0]
 8005e6a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005e6e:	bd70      	pop	{r4, r5, r6, pc}
 8005e70:	08008420 	.word	0x08008420
 8005e74:	0800857a 	.word	0x0800857a

08005e78 <__multadd>:
 8005e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e7c:	690d      	ldr	r5, [r1, #16]
 8005e7e:	4607      	mov	r7, r0
 8005e80:	460c      	mov	r4, r1
 8005e82:	461e      	mov	r6, r3
 8005e84:	f101 0c14 	add.w	ip, r1, #20
 8005e88:	2000      	movs	r0, #0
 8005e8a:	f8dc 3000 	ldr.w	r3, [ip]
 8005e8e:	b299      	uxth	r1, r3
 8005e90:	fb02 6101 	mla	r1, r2, r1, r6
 8005e94:	0c1e      	lsrs	r6, r3, #16
 8005e96:	0c0b      	lsrs	r3, r1, #16
 8005e98:	fb02 3306 	mla	r3, r2, r6, r3
 8005e9c:	b289      	uxth	r1, r1
 8005e9e:	3001      	adds	r0, #1
 8005ea0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005ea4:	4285      	cmp	r5, r0
 8005ea6:	f84c 1b04 	str.w	r1, [ip], #4
 8005eaa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005eae:	dcec      	bgt.n	8005e8a <__multadd+0x12>
 8005eb0:	b30e      	cbz	r6, 8005ef6 <__multadd+0x7e>
 8005eb2:	68a3      	ldr	r3, [r4, #8]
 8005eb4:	42ab      	cmp	r3, r5
 8005eb6:	dc19      	bgt.n	8005eec <__multadd+0x74>
 8005eb8:	6861      	ldr	r1, [r4, #4]
 8005eba:	4638      	mov	r0, r7
 8005ebc:	3101      	adds	r1, #1
 8005ebe:	f7ff ff79 	bl	8005db4 <_Balloc>
 8005ec2:	4680      	mov	r8, r0
 8005ec4:	b928      	cbnz	r0, 8005ed2 <__multadd+0x5a>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	4b0c      	ldr	r3, [pc, #48]	; (8005efc <__multadd+0x84>)
 8005eca:	480d      	ldr	r0, [pc, #52]	; (8005f00 <__multadd+0x88>)
 8005ecc:	21ba      	movs	r1, #186	; 0xba
 8005ece:	f7fe ffd7 	bl	8004e80 <__assert_func>
 8005ed2:	6922      	ldr	r2, [r4, #16]
 8005ed4:	3202      	adds	r2, #2
 8005ed6:	f104 010c 	add.w	r1, r4, #12
 8005eda:	0092      	lsls	r2, r2, #2
 8005edc:	300c      	adds	r0, #12
 8005ede:	f001 fe1b 	bl	8007b18 <memcpy>
 8005ee2:	4621      	mov	r1, r4
 8005ee4:	4638      	mov	r0, r7
 8005ee6:	f7ff ffa5 	bl	8005e34 <_Bfree>
 8005eea:	4644      	mov	r4, r8
 8005eec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005ef0:	3501      	adds	r5, #1
 8005ef2:	615e      	str	r6, [r3, #20]
 8005ef4:	6125      	str	r5, [r4, #16]
 8005ef6:	4620      	mov	r0, r4
 8005ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005efc:	08008569 	.word	0x08008569
 8005f00:	0800857a 	.word	0x0800857a

08005f04 <__s2b>:
 8005f04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f08:	460c      	mov	r4, r1
 8005f0a:	4615      	mov	r5, r2
 8005f0c:	461f      	mov	r7, r3
 8005f0e:	2209      	movs	r2, #9
 8005f10:	3308      	adds	r3, #8
 8005f12:	4606      	mov	r6, r0
 8005f14:	fb93 f3f2 	sdiv	r3, r3, r2
 8005f18:	2100      	movs	r1, #0
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	db09      	blt.n	8005f34 <__s2b+0x30>
 8005f20:	4630      	mov	r0, r6
 8005f22:	f7ff ff47 	bl	8005db4 <_Balloc>
 8005f26:	b940      	cbnz	r0, 8005f3a <__s2b+0x36>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	4b19      	ldr	r3, [pc, #100]	; (8005f90 <__s2b+0x8c>)
 8005f2c:	4819      	ldr	r0, [pc, #100]	; (8005f94 <__s2b+0x90>)
 8005f2e:	21d3      	movs	r1, #211	; 0xd3
 8005f30:	f7fe ffa6 	bl	8004e80 <__assert_func>
 8005f34:	0052      	lsls	r2, r2, #1
 8005f36:	3101      	adds	r1, #1
 8005f38:	e7f0      	b.n	8005f1c <__s2b+0x18>
 8005f3a:	9b08      	ldr	r3, [sp, #32]
 8005f3c:	6143      	str	r3, [r0, #20]
 8005f3e:	2d09      	cmp	r5, #9
 8005f40:	f04f 0301 	mov.w	r3, #1
 8005f44:	6103      	str	r3, [r0, #16]
 8005f46:	dd16      	ble.n	8005f76 <__s2b+0x72>
 8005f48:	f104 0909 	add.w	r9, r4, #9
 8005f4c:	46c8      	mov	r8, r9
 8005f4e:	442c      	add	r4, r5
 8005f50:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005f54:	4601      	mov	r1, r0
 8005f56:	3b30      	subs	r3, #48	; 0x30
 8005f58:	220a      	movs	r2, #10
 8005f5a:	4630      	mov	r0, r6
 8005f5c:	f7ff ff8c 	bl	8005e78 <__multadd>
 8005f60:	45a0      	cmp	r8, r4
 8005f62:	d1f5      	bne.n	8005f50 <__s2b+0x4c>
 8005f64:	f1a5 0408 	sub.w	r4, r5, #8
 8005f68:	444c      	add	r4, r9
 8005f6a:	1b2d      	subs	r5, r5, r4
 8005f6c:	1963      	adds	r3, r4, r5
 8005f6e:	42bb      	cmp	r3, r7
 8005f70:	db04      	blt.n	8005f7c <__s2b+0x78>
 8005f72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f76:	340a      	adds	r4, #10
 8005f78:	2509      	movs	r5, #9
 8005f7a:	e7f6      	b.n	8005f6a <__s2b+0x66>
 8005f7c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005f80:	4601      	mov	r1, r0
 8005f82:	3b30      	subs	r3, #48	; 0x30
 8005f84:	220a      	movs	r2, #10
 8005f86:	4630      	mov	r0, r6
 8005f88:	f7ff ff76 	bl	8005e78 <__multadd>
 8005f8c:	e7ee      	b.n	8005f6c <__s2b+0x68>
 8005f8e:	bf00      	nop
 8005f90:	08008569 	.word	0x08008569
 8005f94:	0800857a 	.word	0x0800857a

08005f98 <__hi0bits>:
 8005f98:	0c03      	lsrs	r3, r0, #16
 8005f9a:	041b      	lsls	r3, r3, #16
 8005f9c:	b9d3      	cbnz	r3, 8005fd4 <__hi0bits+0x3c>
 8005f9e:	0400      	lsls	r0, r0, #16
 8005fa0:	2310      	movs	r3, #16
 8005fa2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005fa6:	bf04      	itt	eq
 8005fa8:	0200      	lsleq	r0, r0, #8
 8005faa:	3308      	addeq	r3, #8
 8005fac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005fb0:	bf04      	itt	eq
 8005fb2:	0100      	lsleq	r0, r0, #4
 8005fb4:	3304      	addeq	r3, #4
 8005fb6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005fba:	bf04      	itt	eq
 8005fbc:	0080      	lsleq	r0, r0, #2
 8005fbe:	3302      	addeq	r3, #2
 8005fc0:	2800      	cmp	r0, #0
 8005fc2:	db05      	blt.n	8005fd0 <__hi0bits+0x38>
 8005fc4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005fc8:	f103 0301 	add.w	r3, r3, #1
 8005fcc:	bf08      	it	eq
 8005fce:	2320      	moveq	r3, #32
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	4770      	bx	lr
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	e7e4      	b.n	8005fa2 <__hi0bits+0xa>

08005fd8 <__lo0bits>:
 8005fd8:	6803      	ldr	r3, [r0, #0]
 8005fda:	f013 0207 	ands.w	r2, r3, #7
 8005fde:	d00c      	beq.n	8005ffa <__lo0bits+0x22>
 8005fe0:	07d9      	lsls	r1, r3, #31
 8005fe2:	d422      	bmi.n	800602a <__lo0bits+0x52>
 8005fe4:	079a      	lsls	r2, r3, #30
 8005fe6:	bf49      	itett	mi
 8005fe8:	085b      	lsrmi	r3, r3, #1
 8005fea:	089b      	lsrpl	r3, r3, #2
 8005fec:	6003      	strmi	r3, [r0, #0]
 8005fee:	2201      	movmi	r2, #1
 8005ff0:	bf5c      	itt	pl
 8005ff2:	6003      	strpl	r3, [r0, #0]
 8005ff4:	2202      	movpl	r2, #2
 8005ff6:	4610      	mov	r0, r2
 8005ff8:	4770      	bx	lr
 8005ffa:	b299      	uxth	r1, r3
 8005ffc:	b909      	cbnz	r1, 8006002 <__lo0bits+0x2a>
 8005ffe:	0c1b      	lsrs	r3, r3, #16
 8006000:	2210      	movs	r2, #16
 8006002:	b2d9      	uxtb	r1, r3
 8006004:	b909      	cbnz	r1, 800600a <__lo0bits+0x32>
 8006006:	3208      	adds	r2, #8
 8006008:	0a1b      	lsrs	r3, r3, #8
 800600a:	0719      	lsls	r1, r3, #28
 800600c:	bf04      	itt	eq
 800600e:	091b      	lsreq	r3, r3, #4
 8006010:	3204      	addeq	r2, #4
 8006012:	0799      	lsls	r1, r3, #30
 8006014:	bf04      	itt	eq
 8006016:	089b      	lsreq	r3, r3, #2
 8006018:	3202      	addeq	r2, #2
 800601a:	07d9      	lsls	r1, r3, #31
 800601c:	d403      	bmi.n	8006026 <__lo0bits+0x4e>
 800601e:	085b      	lsrs	r3, r3, #1
 8006020:	f102 0201 	add.w	r2, r2, #1
 8006024:	d003      	beq.n	800602e <__lo0bits+0x56>
 8006026:	6003      	str	r3, [r0, #0]
 8006028:	e7e5      	b.n	8005ff6 <__lo0bits+0x1e>
 800602a:	2200      	movs	r2, #0
 800602c:	e7e3      	b.n	8005ff6 <__lo0bits+0x1e>
 800602e:	2220      	movs	r2, #32
 8006030:	e7e1      	b.n	8005ff6 <__lo0bits+0x1e>
	...

08006034 <__i2b>:
 8006034:	b510      	push	{r4, lr}
 8006036:	460c      	mov	r4, r1
 8006038:	2101      	movs	r1, #1
 800603a:	f7ff febb 	bl	8005db4 <_Balloc>
 800603e:	4602      	mov	r2, r0
 8006040:	b928      	cbnz	r0, 800604e <__i2b+0x1a>
 8006042:	4b05      	ldr	r3, [pc, #20]	; (8006058 <__i2b+0x24>)
 8006044:	4805      	ldr	r0, [pc, #20]	; (800605c <__i2b+0x28>)
 8006046:	f240 1145 	movw	r1, #325	; 0x145
 800604a:	f7fe ff19 	bl	8004e80 <__assert_func>
 800604e:	2301      	movs	r3, #1
 8006050:	6144      	str	r4, [r0, #20]
 8006052:	6103      	str	r3, [r0, #16]
 8006054:	bd10      	pop	{r4, pc}
 8006056:	bf00      	nop
 8006058:	08008569 	.word	0x08008569
 800605c:	0800857a 	.word	0x0800857a

08006060 <__multiply>:
 8006060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006064:	4691      	mov	r9, r2
 8006066:	690a      	ldr	r2, [r1, #16]
 8006068:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800606c:	429a      	cmp	r2, r3
 800606e:	bfb8      	it	lt
 8006070:	460b      	movlt	r3, r1
 8006072:	460c      	mov	r4, r1
 8006074:	bfbc      	itt	lt
 8006076:	464c      	movlt	r4, r9
 8006078:	4699      	movlt	r9, r3
 800607a:	6927      	ldr	r7, [r4, #16]
 800607c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006080:	68a3      	ldr	r3, [r4, #8]
 8006082:	6861      	ldr	r1, [r4, #4]
 8006084:	eb07 060a 	add.w	r6, r7, sl
 8006088:	42b3      	cmp	r3, r6
 800608a:	b085      	sub	sp, #20
 800608c:	bfb8      	it	lt
 800608e:	3101      	addlt	r1, #1
 8006090:	f7ff fe90 	bl	8005db4 <_Balloc>
 8006094:	b930      	cbnz	r0, 80060a4 <__multiply+0x44>
 8006096:	4602      	mov	r2, r0
 8006098:	4b44      	ldr	r3, [pc, #272]	; (80061ac <__multiply+0x14c>)
 800609a:	4845      	ldr	r0, [pc, #276]	; (80061b0 <__multiply+0x150>)
 800609c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80060a0:	f7fe feee 	bl	8004e80 <__assert_func>
 80060a4:	f100 0514 	add.w	r5, r0, #20
 80060a8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80060ac:	462b      	mov	r3, r5
 80060ae:	2200      	movs	r2, #0
 80060b0:	4543      	cmp	r3, r8
 80060b2:	d321      	bcc.n	80060f8 <__multiply+0x98>
 80060b4:	f104 0314 	add.w	r3, r4, #20
 80060b8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80060bc:	f109 0314 	add.w	r3, r9, #20
 80060c0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80060c4:	9202      	str	r2, [sp, #8]
 80060c6:	1b3a      	subs	r2, r7, r4
 80060c8:	3a15      	subs	r2, #21
 80060ca:	f022 0203 	bic.w	r2, r2, #3
 80060ce:	3204      	adds	r2, #4
 80060d0:	f104 0115 	add.w	r1, r4, #21
 80060d4:	428f      	cmp	r7, r1
 80060d6:	bf38      	it	cc
 80060d8:	2204      	movcc	r2, #4
 80060da:	9201      	str	r2, [sp, #4]
 80060dc:	9a02      	ldr	r2, [sp, #8]
 80060de:	9303      	str	r3, [sp, #12]
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d80c      	bhi.n	80060fe <__multiply+0x9e>
 80060e4:	2e00      	cmp	r6, #0
 80060e6:	dd03      	ble.n	80060f0 <__multiply+0x90>
 80060e8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d05b      	beq.n	80061a8 <__multiply+0x148>
 80060f0:	6106      	str	r6, [r0, #16]
 80060f2:	b005      	add	sp, #20
 80060f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060f8:	f843 2b04 	str.w	r2, [r3], #4
 80060fc:	e7d8      	b.n	80060b0 <__multiply+0x50>
 80060fe:	f8b3 a000 	ldrh.w	sl, [r3]
 8006102:	f1ba 0f00 	cmp.w	sl, #0
 8006106:	d024      	beq.n	8006152 <__multiply+0xf2>
 8006108:	f104 0e14 	add.w	lr, r4, #20
 800610c:	46a9      	mov	r9, r5
 800610e:	f04f 0c00 	mov.w	ip, #0
 8006112:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006116:	f8d9 1000 	ldr.w	r1, [r9]
 800611a:	fa1f fb82 	uxth.w	fp, r2
 800611e:	b289      	uxth	r1, r1
 8006120:	fb0a 110b 	mla	r1, sl, fp, r1
 8006124:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006128:	f8d9 2000 	ldr.w	r2, [r9]
 800612c:	4461      	add	r1, ip
 800612e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006132:	fb0a c20b 	mla	r2, sl, fp, ip
 8006136:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800613a:	b289      	uxth	r1, r1
 800613c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006140:	4577      	cmp	r7, lr
 8006142:	f849 1b04 	str.w	r1, [r9], #4
 8006146:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800614a:	d8e2      	bhi.n	8006112 <__multiply+0xb2>
 800614c:	9a01      	ldr	r2, [sp, #4]
 800614e:	f845 c002 	str.w	ip, [r5, r2]
 8006152:	9a03      	ldr	r2, [sp, #12]
 8006154:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006158:	3304      	adds	r3, #4
 800615a:	f1b9 0f00 	cmp.w	r9, #0
 800615e:	d021      	beq.n	80061a4 <__multiply+0x144>
 8006160:	6829      	ldr	r1, [r5, #0]
 8006162:	f104 0c14 	add.w	ip, r4, #20
 8006166:	46ae      	mov	lr, r5
 8006168:	f04f 0a00 	mov.w	sl, #0
 800616c:	f8bc b000 	ldrh.w	fp, [ip]
 8006170:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006174:	fb09 220b 	mla	r2, r9, fp, r2
 8006178:	4452      	add	r2, sl
 800617a:	b289      	uxth	r1, r1
 800617c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006180:	f84e 1b04 	str.w	r1, [lr], #4
 8006184:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006188:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800618c:	f8be 1000 	ldrh.w	r1, [lr]
 8006190:	fb09 110a 	mla	r1, r9, sl, r1
 8006194:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006198:	4567      	cmp	r7, ip
 800619a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800619e:	d8e5      	bhi.n	800616c <__multiply+0x10c>
 80061a0:	9a01      	ldr	r2, [sp, #4]
 80061a2:	50a9      	str	r1, [r5, r2]
 80061a4:	3504      	adds	r5, #4
 80061a6:	e799      	b.n	80060dc <__multiply+0x7c>
 80061a8:	3e01      	subs	r6, #1
 80061aa:	e79b      	b.n	80060e4 <__multiply+0x84>
 80061ac:	08008569 	.word	0x08008569
 80061b0:	0800857a 	.word	0x0800857a

080061b4 <__pow5mult>:
 80061b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061b8:	4615      	mov	r5, r2
 80061ba:	f012 0203 	ands.w	r2, r2, #3
 80061be:	4606      	mov	r6, r0
 80061c0:	460f      	mov	r7, r1
 80061c2:	d007      	beq.n	80061d4 <__pow5mult+0x20>
 80061c4:	4c25      	ldr	r4, [pc, #148]	; (800625c <__pow5mult+0xa8>)
 80061c6:	3a01      	subs	r2, #1
 80061c8:	2300      	movs	r3, #0
 80061ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80061ce:	f7ff fe53 	bl	8005e78 <__multadd>
 80061d2:	4607      	mov	r7, r0
 80061d4:	10ad      	asrs	r5, r5, #2
 80061d6:	d03d      	beq.n	8006254 <__pow5mult+0xa0>
 80061d8:	69f4      	ldr	r4, [r6, #28]
 80061da:	b97c      	cbnz	r4, 80061fc <__pow5mult+0x48>
 80061dc:	2010      	movs	r0, #16
 80061de:	f7ff fd35 	bl	8005c4c <malloc>
 80061e2:	4602      	mov	r2, r0
 80061e4:	61f0      	str	r0, [r6, #28]
 80061e6:	b928      	cbnz	r0, 80061f4 <__pow5mult+0x40>
 80061e8:	4b1d      	ldr	r3, [pc, #116]	; (8006260 <__pow5mult+0xac>)
 80061ea:	481e      	ldr	r0, [pc, #120]	; (8006264 <__pow5mult+0xb0>)
 80061ec:	f240 11b3 	movw	r1, #435	; 0x1b3
 80061f0:	f7fe fe46 	bl	8004e80 <__assert_func>
 80061f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80061f8:	6004      	str	r4, [r0, #0]
 80061fa:	60c4      	str	r4, [r0, #12]
 80061fc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006200:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006204:	b94c      	cbnz	r4, 800621a <__pow5mult+0x66>
 8006206:	f240 2171 	movw	r1, #625	; 0x271
 800620a:	4630      	mov	r0, r6
 800620c:	f7ff ff12 	bl	8006034 <__i2b>
 8006210:	2300      	movs	r3, #0
 8006212:	f8c8 0008 	str.w	r0, [r8, #8]
 8006216:	4604      	mov	r4, r0
 8006218:	6003      	str	r3, [r0, #0]
 800621a:	f04f 0900 	mov.w	r9, #0
 800621e:	07eb      	lsls	r3, r5, #31
 8006220:	d50a      	bpl.n	8006238 <__pow5mult+0x84>
 8006222:	4639      	mov	r1, r7
 8006224:	4622      	mov	r2, r4
 8006226:	4630      	mov	r0, r6
 8006228:	f7ff ff1a 	bl	8006060 <__multiply>
 800622c:	4639      	mov	r1, r7
 800622e:	4680      	mov	r8, r0
 8006230:	4630      	mov	r0, r6
 8006232:	f7ff fdff 	bl	8005e34 <_Bfree>
 8006236:	4647      	mov	r7, r8
 8006238:	106d      	asrs	r5, r5, #1
 800623a:	d00b      	beq.n	8006254 <__pow5mult+0xa0>
 800623c:	6820      	ldr	r0, [r4, #0]
 800623e:	b938      	cbnz	r0, 8006250 <__pow5mult+0x9c>
 8006240:	4622      	mov	r2, r4
 8006242:	4621      	mov	r1, r4
 8006244:	4630      	mov	r0, r6
 8006246:	f7ff ff0b 	bl	8006060 <__multiply>
 800624a:	6020      	str	r0, [r4, #0]
 800624c:	f8c0 9000 	str.w	r9, [r0]
 8006250:	4604      	mov	r4, r0
 8006252:	e7e4      	b.n	800621e <__pow5mult+0x6a>
 8006254:	4638      	mov	r0, r7
 8006256:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800625a:	bf00      	nop
 800625c:	080086c8 	.word	0x080086c8
 8006260:	08008420 	.word	0x08008420
 8006264:	0800857a 	.word	0x0800857a

08006268 <__lshift>:
 8006268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800626c:	460c      	mov	r4, r1
 800626e:	6849      	ldr	r1, [r1, #4]
 8006270:	6923      	ldr	r3, [r4, #16]
 8006272:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006276:	68a3      	ldr	r3, [r4, #8]
 8006278:	4607      	mov	r7, r0
 800627a:	4691      	mov	r9, r2
 800627c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006280:	f108 0601 	add.w	r6, r8, #1
 8006284:	42b3      	cmp	r3, r6
 8006286:	db0b      	blt.n	80062a0 <__lshift+0x38>
 8006288:	4638      	mov	r0, r7
 800628a:	f7ff fd93 	bl	8005db4 <_Balloc>
 800628e:	4605      	mov	r5, r0
 8006290:	b948      	cbnz	r0, 80062a6 <__lshift+0x3e>
 8006292:	4602      	mov	r2, r0
 8006294:	4b28      	ldr	r3, [pc, #160]	; (8006338 <__lshift+0xd0>)
 8006296:	4829      	ldr	r0, [pc, #164]	; (800633c <__lshift+0xd4>)
 8006298:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800629c:	f7fe fdf0 	bl	8004e80 <__assert_func>
 80062a0:	3101      	adds	r1, #1
 80062a2:	005b      	lsls	r3, r3, #1
 80062a4:	e7ee      	b.n	8006284 <__lshift+0x1c>
 80062a6:	2300      	movs	r3, #0
 80062a8:	f100 0114 	add.w	r1, r0, #20
 80062ac:	f100 0210 	add.w	r2, r0, #16
 80062b0:	4618      	mov	r0, r3
 80062b2:	4553      	cmp	r3, sl
 80062b4:	db33      	blt.n	800631e <__lshift+0xb6>
 80062b6:	6920      	ldr	r0, [r4, #16]
 80062b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80062bc:	f104 0314 	add.w	r3, r4, #20
 80062c0:	f019 091f 	ands.w	r9, r9, #31
 80062c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80062c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80062cc:	d02b      	beq.n	8006326 <__lshift+0xbe>
 80062ce:	f1c9 0e20 	rsb	lr, r9, #32
 80062d2:	468a      	mov	sl, r1
 80062d4:	2200      	movs	r2, #0
 80062d6:	6818      	ldr	r0, [r3, #0]
 80062d8:	fa00 f009 	lsl.w	r0, r0, r9
 80062dc:	4310      	orrs	r0, r2
 80062de:	f84a 0b04 	str.w	r0, [sl], #4
 80062e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80062e6:	459c      	cmp	ip, r3
 80062e8:	fa22 f20e 	lsr.w	r2, r2, lr
 80062ec:	d8f3      	bhi.n	80062d6 <__lshift+0x6e>
 80062ee:	ebac 0304 	sub.w	r3, ip, r4
 80062f2:	3b15      	subs	r3, #21
 80062f4:	f023 0303 	bic.w	r3, r3, #3
 80062f8:	3304      	adds	r3, #4
 80062fa:	f104 0015 	add.w	r0, r4, #21
 80062fe:	4584      	cmp	ip, r0
 8006300:	bf38      	it	cc
 8006302:	2304      	movcc	r3, #4
 8006304:	50ca      	str	r2, [r1, r3]
 8006306:	b10a      	cbz	r2, 800630c <__lshift+0xa4>
 8006308:	f108 0602 	add.w	r6, r8, #2
 800630c:	3e01      	subs	r6, #1
 800630e:	4638      	mov	r0, r7
 8006310:	612e      	str	r6, [r5, #16]
 8006312:	4621      	mov	r1, r4
 8006314:	f7ff fd8e 	bl	8005e34 <_Bfree>
 8006318:	4628      	mov	r0, r5
 800631a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800631e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006322:	3301      	adds	r3, #1
 8006324:	e7c5      	b.n	80062b2 <__lshift+0x4a>
 8006326:	3904      	subs	r1, #4
 8006328:	f853 2b04 	ldr.w	r2, [r3], #4
 800632c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006330:	459c      	cmp	ip, r3
 8006332:	d8f9      	bhi.n	8006328 <__lshift+0xc0>
 8006334:	e7ea      	b.n	800630c <__lshift+0xa4>
 8006336:	bf00      	nop
 8006338:	08008569 	.word	0x08008569
 800633c:	0800857a 	.word	0x0800857a

08006340 <__mcmp>:
 8006340:	b530      	push	{r4, r5, lr}
 8006342:	6902      	ldr	r2, [r0, #16]
 8006344:	690c      	ldr	r4, [r1, #16]
 8006346:	1b12      	subs	r2, r2, r4
 8006348:	d10e      	bne.n	8006368 <__mcmp+0x28>
 800634a:	f100 0314 	add.w	r3, r0, #20
 800634e:	3114      	adds	r1, #20
 8006350:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006354:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006358:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800635c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006360:	42a5      	cmp	r5, r4
 8006362:	d003      	beq.n	800636c <__mcmp+0x2c>
 8006364:	d305      	bcc.n	8006372 <__mcmp+0x32>
 8006366:	2201      	movs	r2, #1
 8006368:	4610      	mov	r0, r2
 800636a:	bd30      	pop	{r4, r5, pc}
 800636c:	4283      	cmp	r3, r0
 800636e:	d3f3      	bcc.n	8006358 <__mcmp+0x18>
 8006370:	e7fa      	b.n	8006368 <__mcmp+0x28>
 8006372:	f04f 32ff 	mov.w	r2, #4294967295
 8006376:	e7f7      	b.n	8006368 <__mcmp+0x28>

08006378 <__mdiff>:
 8006378:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800637c:	460c      	mov	r4, r1
 800637e:	4606      	mov	r6, r0
 8006380:	4611      	mov	r1, r2
 8006382:	4620      	mov	r0, r4
 8006384:	4690      	mov	r8, r2
 8006386:	f7ff ffdb 	bl	8006340 <__mcmp>
 800638a:	1e05      	subs	r5, r0, #0
 800638c:	d110      	bne.n	80063b0 <__mdiff+0x38>
 800638e:	4629      	mov	r1, r5
 8006390:	4630      	mov	r0, r6
 8006392:	f7ff fd0f 	bl	8005db4 <_Balloc>
 8006396:	b930      	cbnz	r0, 80063a6 <__mdiff+0x2e>
 8006398:	4b3a      	ldr	r3, [pc, #232]	; (8006484 <__mdiff+0x10c>)
 800639a:	4602      	mov	r2, r0
 800639c:	f240 2137 	movw	r1, #567	; 0x237
 80063a0:	4839      	ldr	r0, [pc, #228]	; (8006488 <__mdiff+0x110>)
 80063a2:	f7fe fd6d 	bl	8004e80 <__assert_func>
 80063a6:	2301      	movs	r3, #1
 80063a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80063ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063b0:	bfa4      	itt	ge
 80063b2:	4643      	movge	r3, r8
 80063b4:	46a0      	movge	r8, r4
 80063b6:	4630      	mov	r0, r6
 80063b8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80063bc:	bfa6      	itte	ge
 80063be:	461c      	movge	r4, r3
 80063c0:	2500      	movge	r5, #0
 80063c2:	2501      	movlt	r5, #1
 80063c4:	f7ff fcf6 	bl	8005db4 <_Balloc>
 80063c8:	b920      	cbnz	r0, 80063d4 <__mdiff+0x5c>
 80063ca:	4b2e      	ldr	r3, [pc, #184]	; (8006484 <__mdiff+0x10c>)
 80063cc:	4602      	mov	r2, r0
 80063ce:	f240 2145 	movw	r1, #581	; 0x245
 80063d2:	e7e5      	b.n	80063a0 <__mdiff+0x28>
 80063d4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80063d8:	6926      	ldr	r6, [r4, #16]
 80063da:	60c5      	str	r5, [r0, #12]
 80063dc:	f104 0914 	add.w	r9, r4, #20
 80063e0:	f108 0514 	add.w	r5, r8, #20
 80063e4:	f100 0e14 	add.w	lr, r0, #20
 80063e8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80063ec:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80063f0:	f108 0210 	add.w	r2, r8, #16
 80063f4:	46f2      	mov	sl, lr
 80063f6:	2100      	movs	r1, #0
 80063f8:	f859 3b04 	ldr.w	r3, [r9], #4
 80063fc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006400:	fa11 f88b 	uxtah	r8, r1, fp
 8006404:	b299      	uxth	r1, r3
 8006406:	0c1b      	lsrs	r3, r3, #16
 8006408:	eba8 0801 	sub.w	r8, r8, r1
 800640c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006410:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006414:	fa1f f888 	uxth.w	r8, r8
 8006418:	1419      	asrs	r1, r3, #16
 800641a:	454e      	cmp	r6, r9
 800641c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006420:	f84a 3b04 	str.w	r3, [sl], #4
 8006424:	d8e8      	bhi.n	80063f8 <__mdiff+0x80>
 8006426:	1b33      	subs	r3, r6, r4
 8006428:	3b15      	subs	r3, #21
 800642a:	f023 0303 	bic.w	r3, r3, #3
 800642e:	3304      	adds	r3, #4
 8006430:	3415      	adds	r4, #21
 8006432:	42a6      	cmp	r6, r4
 8006434:	bf38      	it	cc
 8006436:	2304      	movcc	r3, #4
 8006438:	441d      	add	r5, r3
 800643a:	4473      	add	r3, lr
 800643c:	469e      	mov	lr, r3
 800643e:	462e      	mov	r6, r5
 8006440:	4566      	cmp	r6, ip
 8006442:	d30e      	bcc.n	8006462 <__mdiff+0xea>
 8006444:	f10c 0203 	add.w	r2, ip, #3
 8006448:	1b52      	subs	r2, r2, r5
 800644a:	f022 0203 	bic.w	r2, r2, #3
 800644e:	3d03      	subs	r5, #3
 8006450:	45ac      	cmp	ip, r5
 8006452:	bf38      	it	cc
 8006454:	2200      	movcc	r2, #0
 8006456:	4413      	add	r3, r2
 8006458:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800645c:	b17a      	cbz	r2, 800647e <__mdiff+0x106>
 800645e:	6107      	str	r7, [r0, #16]
 8006460:	e7a4      	b.n	80063ac <__mdiff+0x34>
 8006462:	f856 8b04 	ldr.w	r8, [r6], #4
 8006466:	fa11 f288 	uxtah	r2, r1, r8
 800646a:	1414      	asrs	r4, r2, #16
 800646c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006470:	b292      	uxth	r2, r2
 8006472:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006476:	f84e 2b04 	str.w	r2, [lr], #4
 800647a:	1421      	asrs	r1, r4, #16
 800647c:	e7e0      	b.n	8006440 <__mdiff+0xc8>
 800647e:	3f01      	subs	r7, #1
 8006480:	e7ea      	b.n	8006458 <__mdiff+0xe0>
 8006482:	bf00      	nop
 8006484:	08008569 	.word	0x08008569
 8006488:	0800857a 	.word	0x0800857a

0800648c <__ulp>:
 800648c:	b082      	sub	sp, #8
 800648e:	ed8d 0b00 	vstr	d0, [sp]
 8006492:	9a01      	ldr	r2, [sp, #4]
 8006494:	4b0f      	ldr	r3, [pc, #60]	; (80064d4 <__ulp+0x48>)
 8006496:	4013      	ands	r3, r2
 8006498:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800649c:	2b00      	cmp	r3, #0
 800649e:	dc08      	bgt.n	80064b2 <__ulp+0x26>
 80064a0:	425b      	negs	r3, r3
 80064a2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80064a6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80064aa:	da04      	bge.n	80064b6 <__ulp+0x2a>
 80064ac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80064b0:	4113      	asrs	r3, r2
 80064b2:	2200      	movs	r2, #0
 80064b4:	e008      	b.n	80064c8 <__ulp+0x3c>
 80064b6:	f1a2 0314 	sub.w	r3, r2, #20
 80064ba:	2b1e      	cmp	r3, #30
 80064bc:	bfda      	itte	le
 80064be:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80064c2:	40da      	lsrle	r2, r3
 80064c4:	2201      	movgt	r2, #1
 80064c6:	2300      	movs	r3, #0
 80064c8:	4619      	mov	r1, r3
 80064ca:	4610      	mov	r0, r2
 80064cc:	ec41 0b10 	vmov	d0, r0, r1
 80064d0:	b002      	add	sp, #8
 80064d2:	4770      	bx	lr
 80064d4:	7ff00000 	.word	0x7ff00000

080064d8 <__b2d>:
 80064d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064dc:	6906      	ldr	r6, [r0, #16]
 80064de:	f100 0814 	add.w	r8, r0, #20
 80064e2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80064e6:	1f37      	subs	r7, r6, #4
 80064e8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80064ec:	4610      	mov	r0, r2
 80064ee:	f7ff fd53 	bl	8005f98 <__hi0bits>
 80064f2:	f1c0 0320 	rsb	r3, r0, #32
 80064f6:	280a      	cmp	r0, #10
 80064f8:	600b      	str	r3, [r1, #0]
 80064fa:	491b      	ldr	r1, [pc, #108]	; (8006568 <__b2d+0x90>)
 80064fc:	dc15      	bgt.n	800652a <__b2d+0x52>
 80064fe:	f1c0 0c0b 	rsb	ip, r0, #11
 8006502:	fa22 f30c 	lsr.w	r3, r2, ip
 8006506:	45b8      	cmp	r8, r7
 8006508:	ea43 0501 	orr.w	r5, r3, r1
 800650c:	bf34      	ite	cc
 800650e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006512:	2300      	movcs	r3, #0
 8006514:	3015      	adds	r0, #21
 8006516:	fa02 f000 	lsl.w	r0, r2, r0
 800651a:	fa23 f30c 	lsr.w	r3, r3, ip
 800651e:	4303      	orrs	r3, r0
 8006520:	461c      	mov	r4, r3
 8006522:	ec45 4b10 	vmov	d0, r4, r5
 8006526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800652a:	45b8      	cmp	r8, r7
 800652c:	bf3a      	itte	cc
 800652e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006532:	f1a6 0708 	subcc.w	r7, r6, #8
 8006536:	2300      	movcs	r3, #0
 8006538:	380b      	subs	r0, #11
 800653a:	d012      	beq.n	8006562 <__b2d+0x8a>
 800653c:	f1c0 0120 	rsb	r1, r0, #32
 8006540:	fa23 f401 	lsr.w	r4, r3, r1
 8006544:	4082      	lsls	r2, r0
 8006546:	4322      	orrs	r2, r4
 8006548:	4547      	cmp	r7, r8
 800654a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800654e:	bf8c      	ite	hi
 8006550:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8006554:	2200      	movls	r2, #0
 8006556:	4083      	lsls	r3, r0
 8006558:	40ca      	lsrs	r2, r1
 800655a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800655e:	4313      	orrs	r3, r2
 8006560:	e7de      	b.n	8006520 <__b2d+0x48>
 8006562:	ea42 0501 	orr.w	r5, r2, r1
 8006566:	e7db      	b.n	8006520 <__b2d+0x48>
 8006568:	3ff00000 	.word	0x3ff00000

0800656c <__d2b>:
 800656c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006570:	460f      	mov	r7, r1
 8006572:	2101      	movs	r1, #1
 8006574:	ec59 8b10 	vmov	r8, r9, d0
 8006578:	4616      	mov	r6, r2
 800657a:	f7ff fc1b 	bl	8005db4 <_Balloc>
 800657e:	4604      	mov	r4, r0
 8006580:	b930      	cbnz	r0, 8006590 <__d2b+0x24>
 8006582:	4602      	mov	r2, r0
 8006584:	4b24      	ldr	r3, [pc, #144]	; (8006618 <__d2b+0xac>)
 8006586:	4825      	ldr	r0, [pc, #148]	; (800661c <__d2b+0xb0>)
 8006588:	f240 310f 	movw	r1, #783	; 0x30f
 800658c:	f7fe fc78 	bl	8004e80 <__assert_func>
 8006590:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006594:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006598:	bb2d      	cbnz	r5, 80065e6 <__d2b+0x7a>
 800659a:	9301      	str	r3, [sp, #4]
 800659c:	f1b8 0300 	subs.w	r3, r8, #0
 80065a0:	d026      	beq.n	80065f0 <__d2b+0x84>
 80065a2:	4668      	mov	r0, sp
 80065a4:	9300      	str	r3, [sp, #0]
 80065a6:	f7ff fd17 	bl	8005fd8 <__lo0bits>
 80065aa:	e9dd 1200 	ldrd	r1, r2, [sp]
 80065ae:	b1e8      	cbz	r0, 80065ec <__d2b+0x80>
 80065b0:	f1c0 0320 	rsb	r3, r0, #32
 80065b4:	fa02 f303 	lsl.w	r3, r2, r3
 80065b8:	430b      	orrs	r3, r1
 80065ba:	40c2      	lsrs	r2, r0
 80065bc:	6163      	str	r3, [r4, #20]
 80065be:	9201      	str	r2, [sp, #4]
 80065c0:	9b01      	ldr	r3, [sp, #4]
 80065c2:	61a3      	str	r3, [r4, #24]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	bf14      	ite	ne
 80065c8:	2202      	movne	r2, #2
 80065ca:	2201      	moveq	r2, #1
 80065cc:	6122      	str	r2, [r4, #16]
 80065ce:	b1bd      	cbz	r5, 8006600 <__d2b+0x94>
 80065d0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80065d4:	4405      	add	r5, r0
 80065d6:	603d      	str	r5, [r7, #0]
 80065d8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80065dc:	6030      	str	r0, [r6, #0]
 80065de:	4620      	mov	r0, r4
 80065e0:	b003      	add	sp, #12
 80065e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80065e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065ea:	e7d6      	b.n	800659a <__d2b+0x2e>
 80065ec:	6161      	str	r1, [r4, #20]
 80065ee:	e7e7      	b.n	80065c0 <__d2b+0x54>
 80065f0:	a801      	add	r0, sp, #4
 80065f2:	f7ff fcf1 	bl	8005fd8 <__lo0bits>
 80065f6:	9b01      	ldr	r3, [sp, #4]
 80065f8:	6163      	str	r3, [r4, #20]
 80065fa:	3020      	adds	r0, #32
 80065fc:	2201      	movs	r2, #1
 80065fe:	e7e5      	b.n	80065cc <__d2b+0x60>
 8006600:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006604:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006608:	6038      	str	r0, [r7, #0]
 800660a:	6918      	ldr	r0, [r3, #16]
 800660c:	f7ff fcc4 	bl	8005f98 <__hi0bits>
 8006610:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006614:	e7e2      	b.n	80065dc <__d2b+0x70>
 8006616:	bf00      	nop
 8006618:	08008569 	.word	0x08008569
 800661c:	0800857a 	.word	0x0800857a

08006620 <__ratio>:
 8006620:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006624:	4688      	mov	r8, r1
 8006626:	4669      	mov	r1, sp
 8006628:	4681      	mov	r9, r0
 800662a:	f7ff ff55 	bl	80064d8 <__b2d>
 800662e:	a901      	add	r1, sp, #4
 8006630:	4640      	mov	r0, r8
 8006632:	ec55 4b10 	vmov	r4, r5, d0
 8006636:	f7ff ff4f 	bl	80064d8 <__b2d>
 800663a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800663e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006642:	eba3 0c02 	sub.w	ip, r3, r2
 8006646:	e9dd 3200 	ldrd	r3, r2, [sp]
 800664a:	1a9b      	subs	r3, r3, r2
 800664c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006650:	ec51 0b10 	vmov	r0, r1, d0
 8006654:	2b00      	cmp	r3, #0
 8006656:	bfd6      	itet	le
 8006658:	460a      	movle	r2, r1
 800665a:	462a      	movgt	r2, r5
 800665c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006660:	468b      	mov	fp, r1
 8006662:	462f      	mov	r7, r5
 8006664:	bfd4      	ite	le
 8006666:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800666a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800666e:	4620      	mov	r0, r4
 8006670:	ee10 2a10 	vmov	r2, s0
 8006674:	465b      	mov	r3, fp
 8006676:	4639      	mov	r1, r7
 8006678:	f7fa f8f0 	bl	800085c <__aeabi_ddiv>
 800667c:	ec41 0b10 	vmov	d0, r0, r1
 8006680:	b003      	add	sp, #12
 8006682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006686 <__copybits>:
 8006686:	3901      	subs	r1, #1
 8006688:	b570      	push	{r4, r5, r6, lr}
 800668a:	1149      	asrs	r1, r1, #5
 800668c:	6914      	ldr	r4, [r2, #16]
 800668e:	3101      	adds	r1, #1
 8006690:	f102 0314 	add.w	r3, r2, #20
 8006694:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006698:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800669c:	1f05      	subs	r5, r0, #4
 800669e:	42a3      	cmp	r3, r4
 80066a0:	d30c      	bcc.n	80066bc <__copybits+0x36>
 80066a2:	1aa3      	subs	r3, r4, r2
 80066a4:	3b11      	subs	r3, #17
 80066a6:	f023 0303 	bic.w	r3, r3, #3
 80066aa:	3211      	adds	r2, #17
 80066ac:	42a2      	cmp	r2, r4
 80066ae:	bf88      	it	hi
 80066b0:	2300      	movhi	r3, #0
 80066b2:	4418      	add	r0, r3
 80066b4:	2300      	movs	r3, #0
 80066b6:	4288      	cmp	r0, r1
 80066b8:	d305      	bcc.n	80066c6 <__copybits+0x40>
 80066ba:	bd70      	pop	{r4, r5, r6, pc}
 80066bc:	f853 6b04 	ldr.w	r6, [r3], #4
 80066c0:	f845 6f04 	str.w	r6, [r5, #4]!
 80066c4:	e7eb      	b.n	800669e <__copybits+0x18>
 80066c6:	f840 3b04 	str.w	r3, [r0], #4
 80066ca:	e7f4      	b.n	80066b6 <__copybits+0x30>

080066cc <__any_on>:
 80066cc:	f100 0214 	add.w	r2, r0, #20
 80066d0:	6900      	ldr	r0, [r0, #16]
 80066d2:	114b      	asrs	r3, r1, #5
 80066d4:	4298      	cmp	r0, r3
 80066d6:	b510      	push	{r4, lr}
 80066d8:	db11      	blt.n	80066fe <__any_on+0x32>
 80066da:	dd0a      	ble.n	80066f2 <__any_on+0x26>
 80066dc:	f011 011f 	ands.w	r1, r1, #31
 80066e0:	d007      	beq.n	80066f2 <__any_on+0x26>
 80066e2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80066e6:	fa24 f001 	lsr.w	r0, r4, r1
 80066ea:	fa00 f101 	lsl.w	r1, r0, r1
 80066ee:	428c      	cmp	r4, r1
 80066f0:	d10b      	bne.n	800670a <__any_on+0x3e>
 80066f2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d803      	bhi.n	8006702 <__any_on+0x36>
 80066fa:	2000      	movs	r0, #0
 80066fc:	bd10      	pop	{r4, pc}
 80066fe:	4603      	mov	r3, r0
 8006700:	e7f7      	b.n	80066f2 <__any_on+0x26>
 8006702:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006706:	2900      	cmp	r1, #0
 8006708:	d0f5      	beq.n	80066f6 <__any_on+0x2a>
 800670a:	2001      	movs	r0, #1
 800670c:	e7f6      	b.n	80066fc <__any_on+0x30>

0800670e <sulp>:
 800670e:	b570      	push	{r4, r5, r6, lr}
 8006710:	4604      	mov	r4, r0
 8006712:	460d      	mov	r5, r1
 8006714:	ec45 4b10 	vmov	d0, r4, r5
 8006718:	4616      	mov	r6, r2
 800671a:	f7ff feb7 	bl	800648c <__ulp>
 800671e:	ec51 0b10 	vmov	r0, r1, d0
 8006722:	b17e      	cbz	r6, 8006744 <sulp+0x36>
 8006724:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006728:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800672c:	2b00      	cmp	r3, #0
 800672e:	dd09      	ble.n	8006744 <sulp+0x36>
 8006730:	051b      	lsls	r3, r3, #20
 8006732:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006736:	2400      	movs	r4, #0
 8006738:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800673c:	4622      	mov	r2, r4
 800673e:	462b      	mov	r3, r5
 8006740:	f7f9 ff62 	bl	8000608 <__aeabi_dmul>
 8006744:	bd70      	pop	{r4, r5, r6, pc}
	...

08006748 <_strtod_l>:
 8006748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800674c:	ed2d 8b02 	vpush	{d8}
 8006750:	b09b      	sub	sp, #108	; 0x6c
 8006752:	4604      	mov	r4, r0
 8006754:	9213      	str	r2, [sp, #76]	; 0x4c
 8006756:	2200      	movs	r2, #0
 8006758:	9216      	str	r2, [sp, #88]	; 0x58
 800675a:	460d      	mov	r5, r1
 800675c:	f04f 0800 	mov.w	r8, #0
 8006760:	f04f 0900 	mov.w	r9, #0
 8006764:	460a      	mov	r2, r1
 8006766:	9215      	str	r2, [sp, #84]	; 0x54
 8006768:	7811      	ldrb	r1, [r2, #0]
 800676a:	292b      	cmp	r1, #43	; 0x2b
 800676c:	d04c      	beq.n	8006808 <_strtod_l+0xc0>
 800676e:	d83a      	bhi.n	80067e6 <_strtod_l+0x9e>
 8006770:	290d      	cmp	r1, #13
 8006772:	d834      	bhi.n	80067de <_strtod_l+0x96>
 8006774:	2908      	cmp	r1, #8
 8006776:	d834      	bhi.n	80067e2 <_strtod_l+0x9a>
 8006778:	2900      	cmp	r1, #0
 800677a:	d03d      	beq.n	80067f8 <_strtod_l+0xb0>
 800677c:	2200      	movs	r2, #0
 800677e:	920a      	str	r2, [sp, #40]	; 0x28
 8006780:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8006782:	7832      	ldrb	r2, [r6, #0]
 8006784:	2a30      	cmp	r2, #48	; 0x30
 8006786:	f040 80b4 	bne.w	80068f2 <_strtod_l+0x1aa>
 800678a:	7872      	ldrb	r2, [r6, #1]
 800678c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8006790:	2a58      	cmp	r2, #88	; 0x58
 8006792:	d170      	bne.n	8006876 <_strtod_l+0x12e>
 8006794:	9302      	str	r3, [sp, #8]
 8006796:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006798:	9301      	str	r3, [sp, #4]
 800679a:	ab16      	add	r3, sp, #88	; 0x58
 800679c:	9300      	str	r3, [sp, #0]
 800679e:	4a8e      	ldr	r2, [pc, #568]	; (80069d8 <_strtod_l+0x290>)
 80067a0:	ab17      	add	r3, sp, #92	; 0x5c
 80067a2:	a915      	add	r1, sp, #84	; 0x54
 80067a4:	4620      	mov	r0, r4
 80067a6:	f001 fa53 	bl	8007c50 <__gethex>
 80067aa:	f010 070f 	ands.w	r7, r0, #15
 80067ae:	4605      	mov	r5, r0
 80067b0:	d005      	beq.n	80067be <_strtod_l+0x76>
 80067b2:	2f06      	cmp	r7, #6
 80067b4:	d12a      	bne.n	800680c <_strtod_l+0xc4>
 80067b6:	3601      	adds	r6, #1
 80067b8:	2300      	movs	r3, #0
 80067ba:	9615      	str	r6, [sp, #84]	; 0x54
 80067bc:	930a      	str	r3, [sp, #40]	; 0x28
 80067be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	f040 857f 	bne.w	80072c4 <_strtod_l+0xb7c>
 80067c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067c8:	b1db      	cbz	r3, 8006802 <_strtod_l+0xba>
 80067ca:	4642      	mov	r2, r8
 80067cc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80067d0:	ec43 2b10 	vmov	d0, r2, r3
 80067d4:	b01b      	add	sp, #108	; 0x6c
 80067d6:	ecbd 8b02 	vpop	{d8}
 80067da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067de:	2920      	cmp	r1, #32
 80067e0:	d1cc      	bne.n	800677c <_strtod_l+0x34>
 80067e2:	3201      	adds	r2, #1
 80067e4:	e7bf      	b.n	8006766 <_strtod_l+0x1e>
 80067e6:	292d      	cmp	r1, #45	; 0x2d
 80067e8:	d1c8      	bne.n	800677c <_strtod_l+0x34>
 80067ea:	2101      	movs	r1, #1
 80067ec:	910a      	str	r1, [sp, #40]	; 0x28
 80067ee:	1c51      	adds	r1, r2, #1
 80067f0:	9115      	str	r1, [sp, #84]	; 0x54
 80067f2:	7852      	ldrb	r2, [r2, #1]
 80067f4:	2a00      	cmp	r2, #0
 80067f6:	d1c3      	bne.n	8006780 <_strtod_l+0x38>
 80067f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80067fa:	9515      	str	r5, [sp, #84]	; 0x54
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	f040 855f 	bne.w	80072c0 <_strtod_l+0xb78>
 8006802:	4642      	mov	r2, r8
 8006804:	464b      	mov	r3, r9
 8006806:	e7e3      	b.n	80067d0 <_strtod_l+0x88>
 8006808:	2100      	movs	r1, #0
 800680a:	e7ef      	b.n	80067ec <_strtod_l+0xa4>
 800680c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800680e:	b13a      	cbz	r2, 8006820 <_strtod_l+0xd8>
 8006810:	2135      	movs	r1, #53	; 0x35
 8006812:	a818      	add	r0, sp, #96	; 0x60
 8006814:	f7ff ff37 	bl	8006686 <__copybits>
 8006818:	9916      	ldr	r1, [sp, #88]	; 0x58
 800681a:	4620      	mov	r0, r4
 800681c:	f7ff fb0a 	bl	8005e34 <_Bfree>
 8006820:	3f01      	subs	r7, #1
 8006822:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006824:	2f04      	cmp	r7, #4
 8006826:	d806      	bhi.n	8006836 <_strtod_l+0xee>
 8006828:	e8df f007 	tbb	[pc, r7]
 800682c:	201d0314 	.word	0x201d0314
 8006830:	14          	.byte	0x14
 8006831:	00          	.byte	0x00
 8006832:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8006836:	05e9      	lsls	r1, r5, #23
 8006838:	bf48      	it	mi
 800683a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800683e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006842:	0d1b      	lsrs	r3, r3, #20
 8006844:	051b      	lsls	r3, r3, #20
 8006846:	2b00      	cmp	r3, #0
 8006848:	d1b9      	bne.n	80067be <_strtod_l+0x76>
 800684a:	f7fe fae7 	bl	8004e1c <__errno>
 800684e:	2322      	movs	r3, #34	; 0x22
 8006850:	6003      	str	r3, [r0, #0]
 8006852:	e7b4      	b.n	80067be <_strtod_l+0x76>
 8006854:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8006858:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800685c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006860:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8006864:	e7e7      	b.n	8006836 <_strtod_l+0xee>
 8006866:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80069e0 <_strtod_l+0x298>
 800686a:	e7e4      	b.n	8006836 <_strtod_l+0xee>
 800686c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006870:	f04f 38ff 	mov.w	r8, #4294967295
 8006874:	e7df      	b.n	8006836 <_strtod_l+0xee>
 8006876:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006878:	1c5a      	adds	r2, r3, #1
 800687a:	9215      	str	r2, [sp, #84]	; 0x54
 800687c:	785b      	ldrb	r3, [r3, #1]
 800687e:	2b30      	cmp	r3, #48	; 0x30
 8006880:	d0f9      	beq.n	8006876 <_strtod_l+0x12e>
 8006882:	2b00      	cmp	r3, #0
 8006884:	d09b      	beq.n	80067be <_strtod_l+0x76>
 8006886:	2301      	movs	r3, #1
 8006888:	f04f 0a00 	mov.w	sl, #0
 800688c:	9304      	str	r3, [sp, #16]
 800688e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006890:	930b      	str	r3, [sp, #44]	; 0x2c
 8006892:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8006896:	46d3      	mov	fp, sl
 8006898:	220a      	movs	r2, #10
 800689a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800689c:	7806      	ldrb	r6, [r0, #0]
 800689e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80068a2:	b2d9      	uxtb	r1, r3
 80068a4:	2909      	cmp	r1, #9
 80068a6:	d926      	bls.n	80068f6 <_strtod_l+0x1ae>
 80068a8:	494c      	ldr	r1, [pc, #304]	; (80069dc <_strtod_l+0x294>)
 80068aa:	2201      	movs	r2, #1
 80068ac:	f001 f8f0 	bl	8007a90 <strncmp>
 80068b0:	2800      	cmp	r0, #0
 80068b2:	d030      	beq.n	8006916 <_strtod_l+0x1ce>
 80068b4:	2000      	movs	r0, #0
 80068b6:	4632      	mov	r2, r6
 80068b8:	9005      	str	r0, [sp, #20]
 80068ba:	465e      	mov	r6, fp
 80068bc:	4603      	mov	r3, r0
 80068be:	2a65      	cmp	r2, #101	; 0x65
 80068c0:	d001      	beq.n	80068c6 <_strtod_l+0x17e>
 80068c2:	2a45      	cmp	r2, #69	; 0x45
 80068c4:	d113      	bne.n	80068ee <_strtod_l+0x1a6>
 80068c6:	b91e      	cbnz	r6, 80068d0 <_strtod_l+0x188>
 80068c8:	9a04      	ldr	r2, [sp, #16]
 80068ca:	4302      	orrs	r2, r0
 80068cc:	d094      	beq.n	80067f8 <_strtod_l+0xb0>
 80068ce:	2600      	movs	r6, #0
 80068d0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80068d2:	1c6a      	adds	r2, r5, #1
 80068d4:	9215      	str	r2, [sp, #84]	; 0x54
 80068d6:	786a      	ldrb	r2, [r5, #1]
 80068d8:	2a2b      	cmp	r2, #43	; 0x2b
 80068da:	d074      	beq.n	80069c6 <_strtod_l+0x27e>
 80068dc:	2a2d      	cmp	r2, #45	; 0x2d
 80068de:	d078      	beq.n	80069d2 <_strtod_l+0x28a>
 80068e0:	f04f 0c00 	mov.w	ip, #0
 80068e4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80068e8:	2909      	cmp	r1, #9
 80068ea:	d97f      	bls.n	80069ec <_strtod_l+0x2a4>
 80068ec:	9515      	str	r5, [sp, #84]	; 0x54
 80068ee:	2700      	movs	r7, #0
 80068f0:	e09e      	b.n	8006a30 <_strtod_l+0x2e8>
 80068f2:	2300      	movs	r3, #0
 80068f4:	e7c8      	b.n	8006888 <_strtod_l+0x140>
 80068f6:	f1bb 0f08 	cmp.w	fp, #8
 80068fa:	bfd8      	it	le
 80068fc:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80068fe:	f100 0001 	add.w	r0, r0, #1
 8006902:	bfda      	itte	le
 8006904:	fb02 3301 	mlale	r3, r2, r1, r3
 8006908:	9309      	strle	r3, [sp, #36]	; 0x24
 800690a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800690e:	f10b 0b01 	add.w	fp, fp, #1
 8006912:	9015      	str	r0, [sp, #84]	; 0x54
 8006914:	e7c1      	b.n	800689a <_strtod_l+0x152>
 8006916:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006918:	1c5a      	adds	r2, r3, #1
 800691a:	9215      	str	r2, [sp, #84]	; 0x54
 800691c:	785a      	ldrb	r2, [r3, #1]
 800691e:	f1bb 0f00 	cmp.w	fp, #0
 8006922:	d037      	beq.n	8006994 <_strtod_l+0x24c>
 8006924:	9005      	str	r0, [sp, #20]
 8006926:	465e      	mov	r6, fp
 8006928:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800692c:	2b09      	cmp	r3, #9
 800692e:	d912      	bls.n	8006956 <_strtod_l+0x20e>
 8006930:	2301      	movs	r3, #1
 8006932:	e7c4      	b.n	80068be <_strtod_l+0x176>
 8006934:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006936:	1c5a      	adds	r2, r3, #1
 8006938:	9215      	str	r2, [sp, #84]	; 0x54
 800693a:	785a      	ldrb	r2, [r3, #1]
 800693c:	3001      	adds	r0, #1
 800693e:	2a30      	cmp	r2, #48	; 0x30
 8006940:	d0f8      	beq.n	8006934 <_strtod_l+0x1ec>
 8006942:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006946:	2b08      	cmp	r3, #8
 8006948:	f200 84c1 	bhi.w	80072ce <_strtod_l+0xb86>
 800694c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800694e:	9005      	str	r0, [sp, #20]
 8006950:	2000      	movs	r0, #0
 8006952:	930b      	str	r3, [sp, #44]	; 0x2c
 8006954:	4606      	mov	r6, r0
 8006956:	3a30      	subs	r2, #48	; 0x30
 8006958:	f100 0301 	add.w	r3, r0, #1
 800695c:	d014      	beq.n	8006988 <_strtod_l+0x240>
 800695e:	9905      	ldr	r1, [sp, #20]
 8006960:	4419      	add	r1, r3
 8006962:	9105      	str	r1, [sp, #20]
 8006964:	4633      	mov	r3, r6
 8006966:	eb00 0c06 	add.w	ip, r0, r6
 800696a:	210a      	movs	r1, #10
 800696c:	4563      	cmp	r3, ip
 800696e:	d113      	bne.n	8006998 <_strtod_l+0x250>
 8006970:	1833      	adds	r3, r6, r0
 8006972:	2b08      	cmp	r3, #8
 8006974:	f106 0601 	add.w	r6, r6, #1
 8006978:	4406      	add	r6, r0
 800697a:	dc1a      	bgt.n	80069b2 <_strtod_l+0x26a>
 800697c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800697e:	230a      	movs	r3, #10
 8006980:	fb03 2301 	mla	r3, r3, r1, r2
 8006984:	9309      	str	r3, [sp, #36]	; 0x24
 8006986:	2300      	movs	r3, #0
 8006988:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800698a:	1c51      	adds	r1, r2, #1
 800698c:	9115      	str	r1, [sp, #84]	; 0x54
 800698e:	7852      	ldrb	r2, [r2, #1]
 8006990:	4618      	mov	r0, r3
 8006992:	e7c9      	b.n	8006928 <_strtod_l+0x1e0>
 8006994:	4658      	mov	r0, fp
 8006996:	e7d2      	b.n	800693e <_strtod_l+0x1f6>
 8006998:	2b08      	cmp	r3, #8
 800699a:	f103 0301 	add.w	r3, r3, #1
 800699e:	dc03      	bgt.n	80069a8 <_strtod_l+0x260>
 80069a0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80069a2:	434f      	muls	r7, r1
 80069a4:	9709      	str	r7, [sp, #36]	; 0x24
 80069a6:	e7e1      	b.n	800696c <_strtod_l+0x224>
 80069a8:	2b10      	cmp	r3, #16
 80069aa:	bfd8      	it	le
 80069ac:	fb01 fa0a 	mulle.w	sl, r1, sl
 80069b0:	e7dc      	b.n	800696c <_strtod_l+0x224>
 80069b2:	2e10      	cmp	r6, #16
 80069b4:	bfdc      	itt	le
 80069b6:	230a      	movle	r3, #10
 80069b8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80069bc:	e7e3      	b.n	8006986 <_strtod_l+0x23e>
 80069be:	2300      	movs	r3, #0
 80069c0:	9305      	str	r3, [sp, #20]
 80069c2:	2301      	movs	r3, #1
 80069c4:	e780      	b.n	80068c8 <_strtod_l+0x180>
 80069c6:	f04f 0c00 	mov.w	ip, #0
 80069ca:	1caa      	adds	r2, r5, #2
 80069cc:	9215      	str	r2, [sp, #84]	; 0x54
 80069ce:	78aa      	ldrb	r2, [r5, #2]
 80069d0:	e788      	b.n	80068e4 <_strtod_l+0x19c>
 80069d2:	f04f 0c01 	mov.w	ip, #1
 80069d6:	e7f8      	b.n	80069ca <_strtod_l+0x282>
 80069d8:	080086d8 	.word	0x080086d8
 80069dc:	080086d4 	.word	0x080086d4
 80069e0:	7ff00000 	.word	0x7ff00000
 80069e4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80069e6:	1c51      	adds	r1, r2, #1
 80069e8:	9115      	str	r1, [sp, #84]	; 0x54
 80069ea:	7852      	ldrb	r2, [r2, #1]
 80069ec:	2a30      	cmp	r2, #48	; 0x30
 80069ee:	d0f9      	beq.n	80069e4 <_strtod_l+0x29c>
 80069f0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80069f4:	2908      	cmp	r1, #8
 80069f6:	f63f af7a 	bhi.w	80068ee <_strtod_l+0x1a6>
 80069fa:	3a30      	subs	r2, #48	; 0x30
 80069fc:	9208      	str	r2, [sp, #32]
 80069fe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006a00:	920c      	str	r2, [sp, #48]	; 0x30
 8006a02:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006a04:	1c57      	adds	r7, r2, #1
 8006a06:	9715      	str	r7, [sp, #84]	; 0x54
 8006a08:	7852      	ldrb	r2, [r2, #1]
 8006a0a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006a0e:	f1be 0f09 	cmp.w	lr, #9
 8006a12:	d938      	bls.n	8006a86 <_strtod_l+0x33e>
 8006a14:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006a16:	1a7f      	subs	r7, r7, r1
 8006a18:	2f08      	cmp	r7, #8
 8006a1a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8006a1e:	dc03      	bgt.n	8006a28 <_strtod_l+0x2e0>
 8006a20:	9908      	ldr	r1, [sp, #32]
 8006a22:	428f      	cmp	r7, r1
 8006a24:	bfa8      	it	ge
 8006a26:	460f      	movge	r7, r1
 8006a28:	f1bc 0f00 	cmp.w	ip, #0
 8006a2c:	d000      	beq.n	8006a30 <_strtod_l+0x2e8>
 8006a2e:	427f      	negs	r7, r7
 8006a30:	2e00      	cmp	r6, #0
 8006a32:	d14f      	bne.n	8006ad4 <_strtod_l+0x38c>
 8006a34:	9904      	ldr	r1, [sp, #16]
 8006a36:	4301      	orrs	r1, r0
 8006a38:	f47f aec1 	bne.w	80067be <_strtod_l+0x76>
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	f47f aedb 	bne.w	80067f8 <_strtod_l+0xb0>
 8006a42:	2a69      	cmp	r2, #105	; 0x69
 8006a44:	d029      	beq.n	8006a9a <_strtod_l+0x352>
 8006a46:	dc26      	bgt.n	8006a96 <_strtod_l+0x34e>
 8006a48:	2a49      	cmp	r2, #73	; 0x49
 8006a4a:	d026      	beq.n	8006a9a <_strtod_l+0x352>
 8006a4c:	2a4e      	cmp	r2, #78	; 0x4e
 8006a4e:	f47f aed3 	bne.w	80067f8 <_strtod_l+0xb0>
 8006a52:	499b      	ldr	r1, [pc, #620]	; (8006cc0 <_strtod_l+0x578>)
 8006a54:	a815      	add	r0, sp, #84	; 0x54
 8006a56:	f001 fb3b 	bl	80080d0 <__match>
 8006a5a:	2800      	cmp	r0, #0
 8006a5c:	f43f aecc 	beq.w	80067f8 <_strtod_l+0xb0>
 8006a60:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	2b28      	cmp	r3, #40	; 0x28
 8006a66:	d12f      	bne.n	8006ac8 <_strtod_l+0x380>
 8006a68:	4996      	ldr	r1, [pc, #600]	; (8006cc4 <_strtod_l+0x57c>)
 8006a6a:	aa18      	add	r2, sp, #96	; 0x60
 8006a6c:	a815      	add	r0, sp, #84	; 0x54
 8006a6e:	f001 fb43 	bl	80080f8 <__hexnan>
 8006a72:	2805      	cmp	r0, #5
 8006a74:	d128      	bne.n	8006ac8 <_strtod_l+0x380>
 8006a76:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006a78:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006a7c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006a80:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8006a84:	e69b      	b.n	80067be <_strtod_l+0x76>
 8006a86:	9f08      	ldr	r7, [sp, #32]
 8006a88:	210a      	movs	r1, #10
 8006a8a:	fb01 2107 	mla	r1, r1, r7, r2
 8006a8e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8006a92:	9208      	str	r2, [sp, #32]
 8006a94:	e7b5      	b.n	8006a02 <_strtod_l+0x2ba>
 8006a96:	2a6e      	cmp	r2, #110	; 0x6e
 8006a98:	e7d9      	b.n	8006a4e <_strtod_l+0x306>
 8006a9a:	498b      	ldr	r1, [pc, #556]	; (8006cc8 <_strtod_l+0x580>)
 8006a9c:	a815      	add	r0, sp, #84	; 0x54
 8006a9e:	f001 fb17 	bl	80080d0 <__match>
 8006aa2:	2800      	cmp	r0, #0
 8006aa4:	f43f aea8 	beq.w	80067f8 <_strtod_l+0xb0>
 8006aa8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006aaa:	4988      	ldr	r1, [pc, #544]	; (8006ccc <_strtod_l+0x584>)
 8006aac:	3b01      	subs	r3, #1
 8006aae:	a815      	add	r0, sp, #84	; 0x54
 8006ab0:	9315      	str	r3, [sp, #84]	; 0x54
 8006ab2:	f001 fb0d 	bl	80080d0 <__match>
 8006ab6:	b910      	cbnz	r0, 8006abe <_strtod_l+0x376>
 8006ab8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006aba:	3301      	adds	r3, #1
 8006abc:	9315      	str	r3, [sp, #84]	; 0x54
 8006abe:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8006cdc <_strtod_l+0x594>
 8006ac2:	f04f 0800 	mov.w	r8, #0
 8006ac6:	e67a      	b.n	80067be <_strtod_l+0x76>
 8006ac8:	4881      	ldr	r0, [pc, #516]	; (8006cd0 <_strtod_l+0x588>)
 8006aca:	f001 f835 	bl	8007b38 <nan>
 8006ace:	ec59 8b10 	vmov	r8, r9, d0
 8006ad2:	e674      	b.n	80067be <_strtod_l+0x76>
 8006ad4:	9b05      	ldr	r3, [sp, #20]
 8006ad6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ad8:	1afb      	subs	r3, r7, r3
 8006ada:	f1bb 0f00 	cmp.w	fp, #0
 8006ade:	bf08      	it	eq
 8006ae0:	46b3      	moveq	fp, r6
 8006ae2:	2e10      	cmp	r6, #16
 8006ae4:	9308      	str	r3, [sp, #32]
 8006ae6:	4635      	mov	r5, r6
 8006ae8:	bfa8      	it	ge
 8006aea:	2510      	movge	r5, #16
 8006aec:	f7f9 fd12 	bl	8000514 <__aeabi_ui2d>
 8006af0:	2e09      	cmp	r6, #9
 8006af2:	4680      	mov	r8, r0
 8006af4:	4689      	mov	r9, r1
 8006af6:	dd13      	ble.n	8006b20 <_strtod_l+0x3d8>
 8006af8:	4b76      	ldr	r3, [pc, #472]	; (8006cd4 <_strtod_l+0x58c>)
 8006afa:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006afe:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006b02:	f7f9 fd81 	bl	8000608 <__aeabi_dmul>
 8006b06:	4680      	mov	r8, r0
 8006b08:	4650      	mov	r0, sl
 8006b0a:	4689      	mov	r9, r1
 8006b0c:	f7f9 fd02 	bl	8000514 <__aeabi_ui2d>
 8006b10:	4602      	mov	r2, r0
 8006b12:	460b      	mov	r3, r1
 8006b14:	4640      	mov	r0, r8
 8006b16:	4649      	mov	r1, r9
 8006b18:	f7f9 fbc0 	bl	800029c <__adddf3>
 8006b1c:	4680      	mov	r8, r0
 8006b1e:	4689      	mov	r9, r1
 8006b20:	2e0f      	cmp	r6, #15
 8006b22:	dc38      	bgt.n	8006b96 <_strtod_l+0x44e>
 8006b24:	9b08      	ldr	r3, [sp, #32]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	f43f ae49 	beq.w	80067be <_strtod_l+0x76>
 8006b2c:	dd24      	ble.n	8006b78 <_strtod_l+0x430>
 8006b2e:	2b16      	cmp	r3, #22
 8006b30:	dc0b      	bgt.n	8006b4a <_strtod_l+0x402>
 8006b32:	4968      	ldr	r1, [pc, #416]	; (8006cd4 <_strtod_l+0x58c>)
 8006b34:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006b38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b3c:	4642      	mov	r2, r8
 8006b3e:	464b      	mov	r3, r9
 8006b40:	f7f9 fd62 	bl	8000608 <__aeabi_dmul>
 8006b44:	4680      	mov	r8, r0
 8006b46:	4689      	mov	r9, r1
 8006b48:	e639      	b.n	80067be <_strtod_l+0x76>
 8006b4a:	9a08      	ldr	r2, [sp, #32]
 8006b4c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8006b50:	4293      	cmp	r3, r2
 8006b52:	db20      	blt.n	8006b96 <_strtod_l+0x44e>
 8006b54:	4c5f      	ldr	r4, [pc, #380]	; (8006cd4 <_strtod_l+0x58c>)
 8006b56:	f1c6 060f 	rsb	r6, r6, #15
 8006b5a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8006b5e:	4642      	mov	r2, r8
 8006b60:	464b      	mov	r3, r9
 8006b62:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b66:	f7f9 fd4f 	bl	8000608 <__aeabi_dmul>
 8006b6a:	9b08      	ldr	r3, [sp, #32]
 8006b6c:	1b9e      	subs	r6, r3, r6
 8006b6e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8006b72:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006b76:	e7e3      	b.n	8006b40 <_strtod_l+0x3f8>
 8006b78:	9b08      	ldr	r3, [sp, #32]
 8006b7a:	3316      	adds	r3, #22
 8006b7c:	db0b      	blt.n	8006b96 <_strtod_l+0x44e>
 8006b7e:	9b05      	ldr	r3, [sp, #20]
 8006b80:	1bdf      	subs	r7, r3, r7
 8006b82:	4b54      	ldr	r3, [pc, #336]	; (8006cd4 <_strtod_l+0x58c>)
 8006b84:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006b88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b8c:	4640      	mov	r0, r8
 8006b8e:	4649      	mov	r1, r9
 8006b90:	f7f9 fe64 	bl	800085c <__aeabi_ddiv>
 8006b94:	e7d6      	b.n	8006b44 <_strtod_l+0x3fc>
 8006b96:	9b08      	ldr	r3, [sp, #32]
 8006b98:	1b75      	subs	r5, r6, r5
 8006b9a:	441d      	add	r5, r3
 8006b9c:	2d00      	cmp	r5, #0
 8006b9e:	dd70      	ble.n	8006c82 <_strtod_l+0x53a>
 8006ba0:	f015 030f 	ands.w	r3, r5, #15
 8006ba4:	d00a      	beq.n	8006bbc <_strtod_l+0x474>
 8006ba6:	494b      	ldr	r1, [pc, #300]	; (8006cd4 <_strtod_l+0x58c>)
 8006ba8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006bac:	4642      	mov	r2, r8
 8006bae:	464b      	mov	r3, r9
 8006bb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bb4:	f7f9 fd28 	bl	8000608 <__aeabi_dmul>
 8006bb8:	4680      	mov	r8, r0
 8006bba:	4689      	mov	r9, r1
 8006bbc:	f035 050f 	bics.w	r5, r5, #15
 8006bc0:	d04d      	beq.n	8006c5e <_strtod_l+0x516>
 8006bc2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8006bc6:	dd22      	ble.n	8006c0e <_strtod_l+0x4c6>
 8006bc8:	2500      	movs	r5, #0
 8006bca:	46ab      	mov	fp, r5
 8006bcc:	9509      	str	r5, [sp, #36]	; 0x24
 8006bce:	9505      	str	r5, [sp, #20]
 8006bd0:	2322      	movs	r3, #34	; 0x22
 8006bd2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8006cdc <_strtod_l+0x594>
 8006bd6:	6023      	str	r3, [r4, #0]
 8006bd8:	f04f 0800 	mov.w	r8, #0
 8006bdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	f43f aded 	beq.w	80067be <_strtod_l+0x76>
 8006be4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006be6:	4620      	mov	r0, r4
 8006be8:	f7ff f924 	bl	8005e34 <_Bfree>
 8006bec:	9905      	ldr	r1, [sp, #20]
 8006bee:	4620      	mov	r0, r4
 8006bf0:	f7ff f920 	bl	8005e34 <_Bfree>
 8006bf4:	4659      	mov	r1, fp
 8006bf6:	4620      	mov	r0, r4
 8006bf8:	f7ff f91c 	bl	8005e34 <_Bfree>
 8006bfc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006bfe:	4620      	mov	r0, r4
 8006c00:	f7ff f918 	bl	8005e34 <_Bfree>
 8006c04:	4629      	mov	r1, r5
 8006c06:	4620      	mov	r0, r4
 8006c08:	f7ff f914 	bl	8005e34 <_Bfree>
 8006c0c:	e5d7      	b.n	80067be <_strtod_l+0x76>
 8006c0e:	4b32      	ldr	r3, [pc, #200]	; (8006cd8 <_strtod_l+0x590>)
 8006c10:	9304      	str	r3, [sp, #16]
 8006c12:	2300      	movs	r3, #0
 8006c14:	112d      	asrs	r5, r5, #4
 8006c16:	4640      	mov	r0, r8
 8006c18:	4649      	mov	r1, r9
 8006c1a:	469a      	mov	sl, r3
 8006c1c:	2d01      	cmp	r5, #1
 8006c1e:	dc21      	bgt.n	8006c64 <_strtod_l+0x51c>
 8006c20:	b10b      	cbz	r3, 8006c26 <_strtod_l+0x4de>
 8006c22:	4680      	mov	r8, r0
 8006c24:	4689      	mov	r9, r1
 8006c26:	492c      	ldr	r1, [pc, #176]	; (8006cd8 <_strtod_l+0x590>)
 8006c28:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006c2c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006c30:	4642      	mov	r2, r8
 8006c32:	464b      	mov	r3, r9
 8006c34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c38:	f7f9 fce6 	bl	8000608 <__aeabi_dmul>
 8006c3c:	4b27      	ldr	r3, [pc, #156]	; (8006cdc <_strtod_l+0x594>)
 8006c3e:	460a      	mov	r2, r1
 8006c40:	400b      	ands	r3, r1
 8006c42:	4927      	ldr	r1, [pc, #156]	; (8006ce0 <_strtod_l+0x598>)
 8006c44:	428b      	cmp	r3, r1
 8006c46:	4680      	mov	r8, r0
 8006c48:	d8be      	bhi.n	8006bc8 <_strtod_l+0x480>
 8006c4a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006c4e:	428b      	cmp	r3, r1
 8006c50:	bf86      	itte	hi
 8006c52:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8006ce4 <_strtod_l+0x59c>
 8006c56:	f04f 38ff 	movhi.w	r8, #4294967295
 8006c5a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8006c5e:	2300      	movs	r3, #0
 8006c60:	9304      	str	r3, [sp, #16]
 8006c62:	e07b      	b.n	8006d5c <_strtod_l+0x614>
 8006c64:	07ea      	lsls	r2, r5, #31
 8006c66:	d505      	bpl.n	8006c74 <_strtod_l+0x52c>
 8006c68:	9b04      	ldr	r3, [sp, #16]
 8006c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c6e:	f7f9 fccb 	bl	8000608 <__aeabi_dmul>
 8006c72:	2301      	movs	r3, #1
 8006c74:	9a04      	ldr	r2, [sp, #16]
 8006c76:	3208      	adds	r2, #8
 8006c78:	f10a 0a01 	add.w	sl, sl, #1
 8006c7c:	106d      	asrs	r5, r5, #1
 8006c7e:	9204      	str	r2, [sp, #16]
 8006c80:	e7cc      	b.n	8006c1c <_strtod_l+0x4d4>
 8006c82:	d0ec      	beq.n	8006c5e <_strtod_l+0x516>
 8006c84:	426d      	negs	r5, r5
 8006c86:	f015 020f 	ands.w	r2, r5, #15
 8006c8a:	d00a      	beq.n	8006ca2 <_strtod_l+0x55a>
 8006c8c:	4b11      	ldr	r3, [pc, #68]	; (8006cd4 <_strtod_l+0x58c>)
 8006c8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c92:	4640      	mov	r0, r8
 8006c94:	4649      	mov	r1, r9
 8006c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c9a:	f7f9 fddf 	bl	800085c <__aeabi_ddiv>
 8006c9e:	4680      	mov	r8, r0
 8006ca0:	4689      	mov	r9, r1
 8006ca2:	112d      	asrs	r5, r5, #4
 8006ca4:	d0db      	beq.n	8006c5e <_strtod_l+0x516>
 8006ca6:	2d1f      	cmp	r5, #31
 8006ca8:	dd1e      	ble.n	8006ce8 <_strtod_l+0x5a0>
 8006caa:	2500      	movs	r5, #0
 8006cac:	46ab      	mov	fp, r5
 8006cae:	9509      	str	r5, [sp, #36]	; 0x24
 8006cb0:	9505      	str	r5, [sp, #20]
 8006cb2:	2322      	movs	r3, #34	; 0x22
 8006cb4:	f04f 0800 	mov.w	r8, #0
 8006cb8:	f04f 0900 	mov.w	r9, #0
 8006cbc:	6023      	str	r3, [r4, #0]
 8006cbe:	e78d      	b.n	8006bdc <_strtod_l+0x494>
 8006cc0:	0800849c 	.word	0x0800849c
 8006cc4:	080086ec 	.word	0x080086ec
 8006cc8:	08008494 	.word	0x08008494
 8006ccc:	08008507 	.word	0x08008507
 8006cd0:	08008503 	.word	0x08008503
 8006cd4:	08008600 	.word	0x08008600
 8006cd8:	080085d8 	.word	0x080085d8
 8006cdc:	7ff00000 	.word	0x7ff00000
 8006ce0:	7ca00000 	.word	0x7ca00000
 8006ce4:	7fefffff 	.word	0x7fefffff
 8006ce8:	f015 0310 	ands.w	r3, r5, #16
 8006cec:	bf18      	it	ne
 8006cee:	236a      	movne	r3, #106	; 0x6a
 8006cf0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8007094 <_strtod_l+0x94c>
 8006cf4:	9304      	str	r3, [sp, #16]
 8006cf6:	4640      	mov	r0, r8
 8006cf8:	4649      	mov	r1, r9
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	07ea      	lsls	r2, r5, #31
 8006cfe:	d504      	bpl.n	8006d0a <_strtod_l+0x5c2>
 8006d00:	e9da 2300 	ldrd	r2, r3, [sl]
 8006d04:	f7f9 fc80 	bl	8000608 <__aeabi_dmul>
 8006d08:	2301      	movs	r3, #1
 8006d0a:	106d      	asrs	r5, r5, #1
 8006d0c:	f10a 0a08 	add.w	sl, sl, #8
 8006d10:	d1f4      	bne.n	8006cfc <_strtod_l+0x5b4>
 8006d12:	b10b      	cbz	r3, 8006d18 <_strtod_l+0x5d0>
 8006d14:	4680      	mov	r8, r0
 8006d16:	4689      	mov	r9, r1
 8006d18:	9b04      	ldr	r3, [sp, #16]
 8006d1a:	b1bb      	cbz	r3, 8006d4c <_strtod_l+0x604>
 8006d1c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8006d20:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	4649      	mov	r1, r9
 8006d28:	dd10      	ble.n	8006d4c <_strtod_l+0x604>
 8006d2a:	2b1f      	cmp	r3, #31
 8006d2c:	f340 811e 	ble.w	8006f6c <_strtod_l+0x824>
 8006d30:	2b34      	cmp	r3, #52	; 0x34
 8006d32:	bfde      	ittt	le
 8006d34:	f04f 33ff 	movle.w	r3, #4294967295
 8006d38:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006d3c:	4093      	lslle	r3, r2
 8006d3e:	f04f 0800 	mov.w	r8, #0
 8006d42:	bfcc      	ite	gt
 8006d44:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006d48:	ea03 0901 	andle.w	r9, r3, r1
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	2300      	movs	r3, #0
 8006d50:	4640      	mov	r0, r8
 8006d52:	4649      	mov	r1, r9
 8006d54:	f7f9 fec0 	bl	8000ad8 <__aeabi_dcmpeq>
 8006d58:	2800      	cmp	r0, #0
 8006d5a:	d1a6      	bne.n	8006caa <_strtod_l+0x562>
 8006d5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d5e:	9300      	str	r3, [sp, #0]
 8006d60:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006d62:	4633      	mov	r3, r6
 8006d64:	465a      	mov	r2, fp
 8006d66:	4620      	mov	r0, r4
 8006d68:	f7ff f8cc 	bl	8005f04 <__s2b>
 8006d6c:	9009      	str	r0, [sp, #36]	; 0x24
 8006d6e:	2800      	cmp	r0, #0
 8006d70:	f43f af2a 	beq.w	8006bc8 <_strtod_l+0x480>
 8006d74:	9a08      	ldr	r2, [sp, #32]
 8006d76:	9b05      	ldr	r3, [sp, #20]
 8006d78:	2a00      	cmp	r2, #0
 8006d7a:	eba3 0307 	sub.w	r3, r3, r7
 8006d7e:	bfa8      	it	ge
 8006d80:	2300      	movge	r3, #0
 8006d82:	930c      	str	r3, [sp, #48]	; 0x30
 8006d84:	2500      	movs	r5, #0
 8006d86:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006d8a:	9312      	str	r3, [sp, #72]	; 0x48
 8006d8c:	46ab      	mov	fp, r5
 8006d8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d90:	4620      	mov	r0, r4
 8006d92:	6859      	ldr	r1, [r3, #4]
 8006d94:	f7ff f80e 	bl	8005db4 <_Balloc>
 8006d98:	9005      	str	r0, [sp, #20]
 8006d9a:	2800      	cmp	r0, #0
 8006d9c:	f43f af18 	beq.w	8006bd0 <_strtod_l+0x488>
 8006da0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006da2:	691a      	ldr	r2, [r3, #16]
 8006da4:	3202      	adds	r2, #2
 8006da6:	f103 010c 	add.w	r1, r3, #12
 8006daa:	0092      	lsls	r2, r2, #2
 8006dac:	300c      	adds	r0, #12
 8006dae:	f000 feb3 	bl	8007b18 <memcpy>
 8006db2:	ec49 8b10 	vmov	d0, r8, r9
 8006db6:	aa18      	add	r2, sp, #96	; 0x60
 8006db8:	a917      	add	r1, sp, #92	; 0x5c
 8006dba:	4620      	mov	r0, r4
 8006dbc:	f7ff fbd6 	bl	800656c <__d2b>
 8006dc0:	ec49 8b18 	vmov	d8, r8, r9
 8006dc4:	9016      	str	r0, [sp, #88]	; 0x58
 8006dc6:	2800      	cmp	r0, #0
 8006dc8:	f43f af02 	beq.w	8006bd0 <_strtod_l+0x488>
 8006dcc:	2101      	movs	r1, #1
 8006dce:	4620      	mov	r0, r4
 8006dd0:	f7ff f930 	bl	8006034 <__i2b>
 8006dd4:	4683      	mov	fp, r0
 8006dd6:	2800      	cmp	r0, #0
 8006dd8:	f43f aefa 	beq.w	8006bd0 <_strtod_l+0x488>
 8006ddc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006dde:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006de0:	2e00      	cmp	r6, #0
 8006de2:	bfab      	itete	ge
 8006de4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8006de6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8006de8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8006dea:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8006dee:	bfac      	ite	ge
 8006df0:	eb06 0a03 	addge.w	sl, r6, r3
 8006df4:	1b9f      	sublt	r7, r3, r6
 8006df6:	9b04      	ldr	r3, [sp, #16]
 8006df8:	1af6      	subs	r6, r6, r3
 8006dfa:	4416      	add	r6, r2
 8006dfc:	4ba0      	ldr	r3, [pc, #640]	; (8007080 <_strtod_l+0x938>)
 8006dfe:	3e01      	subs	r6, #1
 8006e00:	429e      	cmp	r6, r3
 8006e02:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006e06:	f280 80c4 	bge.w	8006f92 <_strtod_l+0x84a>
 8006e0a:	1b9b      	subs	r3, r3, r6
 8006e0c:	2b1f      	cmp	r3, #31
 8006e0e:	eba2 0203 	sub.w	r2, r2, r3
 8006e12:	f04f 0101 	mov.w	r1, #1
 8006e16:	f300 80b0 	bgt.w	8006f7a <_strtod_l+0x832>
 8006e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8006e1e:	930e      	str	r3, [sp, #56]	; 0x38
 8006e20:	2300      	movs	r3, #0
 8006e22:	930d      	str	r3, [sp, #52]	; 0x34
 8006e24:	eb0a 0602 	add.w	r6, sl, r2
 8006e28:	9b04      	ldr	r3, [sp, #16]
 8006e2a:	45b2      	cmp	sl, r6
 8006e2c:	4417      	add	r7, r2
 8006e2e:	441f      	add	r7, r3
 8006e30:	4653      	mov	r3, sl
 8006e32:	bfa8      	it	ge
 8006e34:	4633      	movge	r3, r6
 8006e36:	42bb      	cmp	r3, r7
 8006e38:	bfa8      	it	ge
 8006e3a:	463b      	movge	r3, r7
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	bfc2      	ittt	gt
 8006e40:	1af6      	subgt	r6, r6, r3
 8006e42:	1aff      	subgt	r7, r7, r3
 8006e44:	ebaa 0a03 	subgt.w	sl, sl, r3
 8006e48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	dd17      	ble.n	8006e7e <_strtod_l+0x736>
 8006e4e:	4659      	mov	r1, fp
 8006e50:	461a      	mov	r2, r3
 8006e52:	4620      	mov	r0, r4
 8006e54:	f7ff f9ae 	bl	80061b4 <__pow5mult>
 8006e58:	4683      	mov	fp, r0
 8006e5a:	2800      	cmp	r0, #0
 8006e5c:	f43f aeb8 	beq.w	8006bd0 <_strtod_l+0x488>
 8006e60:	4601      	mov	r1, r0
 8006e62:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006e64:	4620      	mov	r0, r4
 8006e66:	f7ff f8fb 	bl	8006060 <__multiply>
 8006e6a:	900b      	str	r0, [sp, #44]	; 0x2c
 8006e6c:	2800      	cmp	r0, #0
 8006e6e:	f43f aeaf 	beq.w	8006bd0 <_strtod_l+0x488>
 8006e72:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006e74:	4620      	mov	r0, r4
 8006e76:	f7fe ffdd 	bl	8005e34 <_Bfree>
 8006e7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e7c:	9316      	str	r3, [sp, #88]	; 0x58
 8006e7e:	2e00      	cmp	r6, #0
 8006e80:	f300 808c 	bgt.w	8006f9c <_strtod_l+0x854>
 8006e84:	9b08      	ldr	r3, [sp, #32]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	dd08      	ble.n	8006e9c <_strtod_l+0x754>
 8006e8a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006e8c:	9905      	ldr	r1, [sp, #20]
 8006e8e:	4620      	mov	r0, r4
 8006e90:	f7ff f990 	bl	80061b4 <__pow5mult>
 8006e94:	9005      	str	r0, [sp, #20]
 8006e96:	2800      	cmp	r0, #0
 8006e98:	f43f ae9a 	beq.w	8006bd0 <_strtod_l+0x488>
 8006e9c:	2f00      	cmp	r7, #0
 8006e9e:	dd08      	ble.n	8006eb2 <_strtod_l+0x76a>
 8006ea0:	9905      	ldr	r1, [sp, #20]
 8006ea2:	463a      	mov	r2, r7
 8006ea4:	4620      	mov	r0, r4
 8006ea6:	f7ff f9df 	bl	8006268 <__lshift>
 8006eaa:	9005      	str	r0, [sp, #20]
 8006eac:	2800      	cmp	r0, #0
 8006eae:	f43f ae8f 	beq.w	8006bd0 <_strtod_l+0x488>
 8006eb2:	f1ba 0f00 	cmp.w	sl, #0
 8006eb6:	dd08      	ble.n	8006eca <_strtod_l+0x782>
 8006eb8:	4659      	mov	r1, fp
 8006eba:	4652      	mov	r2, sl
 8006ebc:	4620      	mov	r0, r4
 8006ebe:	f7ff f9d3 	bl	8006268 <__lshift>
 8006ec2:	4683      	mov	fp, r0
 8006ec4:	2800      	cmp	r0, #0
 8006ec6:	f43f ae83 	beq.w	8006bd0 <_strtod_l+0x488>
 8006eca:	9a05      	ldr	r2, [sp, #20]
 8006ecc:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006ece:	4620      	mov	r0, r4
 8006ed0:	f7ff fa52 	bl	8006378 <__mdiff>
 8006ed4:	4605      	mov	r5, r0
 8006ed6:	2800      	cmp	r0, #0
 8006ed8:	f43f ae7a 	beq.w	8006bd0 <_strtod_l+0x488>
 8006edc:	68c3      	ldr	r3, [r0, #12]
 8006ede:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	60c3      	str	r3, [r0, #12]
 8006ee4:	4659      	mov	r1, fp
 8006ee6:	f7ff fa2b 	bl	8006340 <__mcmp>
 8006eea:	2800      	cmp	r0, #0
 8006eec:	da60      	bge.n	8006fb0 <_strtod_l+0x868>
 8006eee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ef0:	ea53 0308 	orrs.w	r3, r3, r8
 8006ef4:	f040 8084 	bne.w	8007000 <_strtod_l+0x8b8>
 8006ef8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d17f      	bne.n	8007000 <_strtod_l+0x8b8>
 8006f00:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006f04:	0d1b      	lsrs	r3, r3, #20
 8006f06:	051b      	lsls	r3, r3, #20
 8006f08:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006f0c:	d978      	bls.n	8007000 <_strtod_l+0x8b8>
 8006f0e:	696b      	ldr	r3, [r5, #20]
 8006f10:	b913      	cbnz	r3, 8006f18 <_strtod_l+0x7d0>
 8006f12:	692b      	ldr	r3, [r5, #16]
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	dd73      	ble.n	8007000 <_strtod_l+0x8b8>
 8006f18:	4629      	mov	r1, r5
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	4620      	mov	r0, r4
 8006f1e:	f7ff f9a3 	bl	8006268 <__lshift>
 8006f22:	4659      	mov	r1, fp
 8006f24:	4605      	mov	r5, r0
 8006f26:	f7ff fa0b 	bl	8006340 <__mcmp>
 8006f2a:	2800      	cmp	r0, #0
 8006f2c:	dd68      	ble.n	8007000 <_strtod_l+0x8b8>
 8006f2e:	9904      	ldr	r1, [sp, #16]
 8006f30:	4a54      	ldr	r2, [pc, #336]	; (8007084 <_strtod_l+0x93c>)
 8006f32:	464b      	mov	r3, r9
 8006f34:	2900      	cmp	r1, #0
 8006f36:	f000 8084 	beq.w	8007042 <_strtod_l+0x8fa>
 8006f3a:	ea02 0109 	and.w	r1, r2, r9
 8006f3e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006f42:	dc7e      	bgt.n	8007042 <_strtod_l+0x8fa>
 8006f44:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006f48:	f77f aeb3 	ble.w	8006cb2 <_strtod_l+0x56a>
 8006f4c:	4b4e      	ldr	r3, [pc, #312]	; (8007088 <_strtod_l+0x940>)
 8006f4e:	4640      	mov	r0, r8
 8006f50:	4649      	mov	r1, r9
 8006f52:	2200      	movs	r2, #0
 8006f54:	f7f9 fb58 	bl	8000608 <__aeabi_dmul>
 8006f58:	4b4a      	ldr	r3, [pc, #296]	; (8007084 <_strtod_l+0x93c>)
 8006f5a:	400b      	ands	r3, r1
 8006f5c:	4680      	mov	r8, r0
 8006f5e:	4689      	mov	r9, r1
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	f47f ae3f 	bne.w	8006be4 <_strtod_l+0x49c>
 8006f66:	2322      	movs	r3, #34	; 0x22
 8006f68:	6023      	str	r3, [r4, #0]
 8006f6a:	e63b      	b.n	8006be4 <_strtod_l+0x49c>
 8006f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8006f70:	fa02 f303 	lsl.w	r3, r2, r3
 8006f74:	ea03 0808 	and.w	r8, r3, r8
 8006f78:	e6e8      	b.n	8006d4c <_strtod_l+0x604>
 8006f7a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8006f7e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8006f82:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8006f86:	36e2      	adds	r6, #226	; 0xe2
 8006f88:	fa01 f306 	lsl.w	r3, r1, r6
 8006f8c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8006f90:	e748      	b.n	8006e24 <_strtod_l+0x6dc>
 8006f92:	2100      	movs	r1, #0
 8006f94:	2301      	movs	r3, #1
 8006f96:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8006f9a:	e743      	b.n	8006e24 <_strtod_l+0x6dc>
 8006f9c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006f9e:	4632      	mov	r2, r6
 8006fa0:	4620      	mov	r0, r4
 8006fa2:	f7ff f961 	bl	8006268 <__lshift>
 8006fa6:	9016      	str	r0, [sp, #88]	; 0x58
 8006fa8:	2800      	cmp	r0, #0
 8006faa:	f47f af6b 	bne.w	8006e84 <_strtod_l+0x73c>
 8006fae:	e60f      	b.n	8006bd0 <_strtod_l+0x488>
 8006fb0:	46ca      	mov	sl, r9
 8006fb2:	d171      	bne.n	8007098 <_strtod_l+0x950>
 8006fb4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006fb6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006fba:	b352      	cbz	r2, 8007012 <_strtod_l+0x8ca>
 8006fbc:	4a33      	ldr	r2, [pc, #204]	; (800708c <_strtod_l+0x944>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d12a      	bne.n	8007018 <_strtod_l+0x8d0>
 8006fc2:	9b04      	ldr	r3, [sp, #16]
 8006fc4:	4641      	mov	r1, r8
 8006fc6:	b1fb      	cbz	r3, 8007008 <_strtod_l+0x8c0>
 8006fc8:	4b2e      	ldr	r3, [pc, #184]	; (8007084 <_strtod_l+0x93c>)
 8006fca:	ea09 0303 	and.w	r3, r9, r3
 8006fce:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006fd2:	f04f 32ff 	mov.w	r2, #4294967295
 8006fd6:	d81a      	bhi.n	800700e <_strtod_l+0x8c6>
 8006fd8:	0d1b      	lsrs	r3, r3, #20
 8006fda:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006fde:	fa02 f303 	lsl.w	r3, r2, r3
 8006fe2:	4299      	cmp	r1, r3
 8006fe4:	d118      	bne.n	8007018 <_strtod_l+0x8d0>
 8006fe6:	4b2a      	ldr	r3, [pc, #168]	; (8007090 <_strtod_l+0x948>)
 8006fe8:	459a      	cmp	sl, r3
 8006fea:	d102      	bne.n	8006ff2 <_strtod_l+0x8aa>
 8006fec:	3101      	adds	r1, #1
 8006fee:	f43f adef 	beq.w	8006bd0 <_strtod_l+0x488>
 8006ff2:	4b24      	ldr	r3, [pc, #144]	; (8007084 <_strtod_l+0x93c>)
 8006ff4:	ea0a 0303 	and.w	r3, sl, r3
 8006ff8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8006ffc:	f04f 0800 	mov.w	r8, #0
 8007000:	9b04      	ldr	r3, [sp, #16]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d1a2      	bne.n	8006f4c <_strtod_l+0x804>
 8007006:	e5ed      	b.n	8006be4 <_strtod_l+0x49c>
 8007008:	f04f 33ff 	mov.w	r3, #4294967295
 800700c:	e7e9      	b.n	8006fe2 <_strtod_l+0x89a>
 800700e:	4613      	mov	r3, r2
 8007010:	e7e7      	b.n	8006fe2 <_strtod_l+0x89a>
 8007012:	ea53 0308 	orrs.w	r3, r3, r8
 8007016:	d08a      	beq.n	8006f2e <_strtod_l+0x7e6>
 8007018:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800701a:	b1e3      	cbz	r3, 8007056 <_strtod_l+0x90e>
 800701c:	ea13 0f0a 	tst.w	r3, sl
 8007020:	d0ee      	beq.n	8007000 <_strtod_l+0x8b8>
 8007022:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007024:	9a04      	ldr	r2, [sp, #16]
 8007026:	4640      	mov	r0, r8
 8007028:	4649      	mov	r1, r9
 800702a:	b1c3      	cbz	r3, 800705e <_strtod_l+0x916>
 800702c:	f7ff fb6f 	bl	800670e <sulp>
 8007030:	4602      	mov	r2, r0
 8007032:	460b      	mov	r3, r1
 8007034:	ec51 0b18 	vmov	r0, r1, d8
 8007038:	f7f9 f930 	bl	800029c <__adddf3>
 800703c:	4680      	mov	r8, r0
 800703e:	4689      	mov	r9, r1
 8007040:	e7de      	b.n	8007000 <_strtod_l+0x8b8>
 8007042:	4013      	ands	r3, r2
 8007044:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007048:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800704c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007050:	f04f 38ff 	mov.w	r8, #4294967295
 8007054:	e7d4      	b.n	8007000 <_strtod_l+0x8b8>
 8007056:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007058:	ea13 0f08 	tst.w	r3, r8
 800705c:	e7e0      	b.n	8007020 <_strtod_l+0x8d8>
 800705e:	f7ff fb56 	bl	800670e <sulp>
 8007062:	4602      	mov	r2, r0
 8007064:	460b      	mov	r3, r1
 8007066:	ec51 0b18 	vmov	r0, r1, d8
 800706a:	f7f9 f915 	bl	8000298 <__aeabi_dsub>
 800706e:	2200      	movs	r2, #0
 8007070:	2300      	movs	r3, #0
 8007072:	4680      	mov	r8, r0
 8007074:	4689      	mov	r9, r1
 8007076:	f7f9 fd2f 	bl	8000ad8 <__aeabi_dcmpeq>
 800707a:	2800      	cmp	r0, #0
 800707c:	d0c0      	beq.n	8007000 <_strtod_l+0x8b8>
 800707e:	e618      	b.n	8006cb2 <_strtod_l+0x56a>
 8007080:	fffffc02 	.word	0xfffffc02
 8007084:	7ff00000 	.word	0x7ff00000
 8007088:	39500000 	.word	0x39500000
 800708c:	000fffff 	.word	0x000fffff
 8007090:	7fefffff 	.word	0x7fefffff
 8007094:	08008700 	.word	0x08008700
 8007098:	4659      	mov	r1, fp
 800709a:	4628      	mov	r0, r5
 800709c:	f7ff fac0 	bl	8006620 <__ratio>
 80070a0:	ec57 6b10 	vmov	r6, r7, d0
 80070a4:	ee10 0a10 	vmov	r0, s0
 80070a8:	2200      	movs	r2, #0
 80070aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80070ae:	4639      	mov	r1, r7
 80070b0:	f7f9 fd26 	bl	8000b00 <__aeabi_dcmple>
 80070b4:	2800      	cmp	r0, #0
 80070b6:	d071      	beq.n	800719c <_strtod_l+0xa54>
 80070b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d17c      	bne.n	80071b8 <_strtod_l+0xa70>
 80070be:	f1b8 0f00 	cmp.w	r8, #0
 80070c2:	d15a      	bne.n	800717a <_strtod_l+0xa32>
 80070c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d15d      	bne.n	8007188 <_strtod_l+0xa40>
 80070cc:	4b90      	ldr	r3, [pc, #576]	; (8007310 <_strtod_l+0xbc8>)
 80070ce:	2200      	movs	r2, #0
 80070d0:	4630      	mov	r0, r6
 80070d2:	4639      	mov	r1, r7
 80070d4:	f7f9 fd0a 	bl	8000aec <__aeabi_dcmplt>
 80070d8:	2800      	cmp	r0, #0
 80070da:	d15c      	bne.n	8007196 <_strtod_l+0xa4e>
 80070dc:	4630      	mov	r0, r6
 80070de:	4639      	mov	r1, r7
 80070e0:	4b8c      	ldr	r3, [pc, #560]	; (8007314 <_strtod_l+0xbcc>)
 80070e2:	2200      	movs	r2, #0
 80070e4:	f7f9 fa90 	bl	8000608 <__aeabi_dmul>
 80070e8:	4606      	mov	r6, r0
 80070ea:	460f      	mov	r7, r1
 80070ec:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80070f0:	9606      	str	r6, [sp, #24]
 80070f2:	9307      	str	r3, [sp, #28]
 80070f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80070f8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80070fc:	4b86      	ldr	r3, [pc, #536]	; (8007318 <_strtod_l+0xbd0>)
 80070fe:	ea0a 0303 	and.w	r3, sl, r3
 8007102:	930d      	str	r3, [sp, #52]	; 0x34
 8007104:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007106:	4b85      	ldr	r3, [pc, #532]	; (800731c <_strtod_l+0xbd4>)
 8007108:	429a      	cmp	r2, r3
 800710a:	f040 8090 	bne.w	800722e <_strtod_l+0xae6>
 800710e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8007112:	ec49 8b10 	vmov	d0, r8, r9
 8007116:	f7ff f9b9 	bl	800648c <__ulp>
 800711a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800711e:	ec51 0b10 	vmov	r0, r1, d0
 8007122:	f7f9 fa71 	bl	8000608 <__aeabi_dmul>
 8007126:	4642      	mov	r2, r8
 8007128:	464b      	mov	r3, r9
 800712a:	f7f9 f8b7 	bl	800029c <__adddf3>
 800712e:	460b      	mov	r3, r1
 8007130:	4979      	ldr	r1, [pc, #484]	; (8007318 <_strtod_l+0xbd0>)
 8007132:	4a7b      	ldr	r2, [pc, #492]	; (8007320 <_strtod_l+0xbd8>)
 8007134:	4019      	ands	r1, r3
 8007136:	4291      	cmp	r1, r2
 8007138:	4680      	mov	r8, r0
 800713a:	d944      	bls.n	80071c6 <_strtod_l+0xa7e>
 800713c:	ee18 2a90 	vmov	r2, s17
 8007140:	4b78      	ldr	r3, [pc, #480]	; (8007324 <_strtod_l+0xbdc>)
 8007142:	429a      	cmp	r2, r3
 8007144:	d104      	bne.n	8007150 <_strtod_l+0xa08>
 8007146:	ee18 3a10 	vmov	r3, s16
 800714a:	3301      	adds	r3, #1
 800714c:	f43f ad40 	beq.w	8006bd0 <_strtod_l+0x488>
 8007150:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8007324 <_strtod_l+0xbdc>
 8007154:	f04f 38ff 	mov.w	r8, #4294967295
 8007158:	9916      	ldr	r1, [sp, #88]	; 0x58
 800715a:	4620      	mov	r0, r4
 800715c:	f7fe fe6a 	bl	8005e34 <_Bfree>
 8007160:	9905      	ldr	r1, [sp, #20]
 8007162:	4620      	mov	r0, r4
 8007164:	f7fe fe66 	bl	8005e34 <_Bfree>
 8007168:	4659      	mov	r1, fp
 800716a:	4620      	mov	r0, r4
 800716c:	f7fe fe62 	bl	8005e34 <_Bfree>
 8007170:	4629      	mov	r1, r5
 8007172:	4620      	mov	r0, r4
 8007174:	f7fe fe5e 	bl	8005e34 <_Bfree>
 8007178:	e609      	b.n	8006d8e <_strtod_l+0x646>
 800717a:	f1b8 0f01 	cmp.w	r8, #1
 800717e:	d103      	bne.n	8007188 <_strtod_l+0xa40>
 8007180:	f1b9 0f00 	cmp.w	r9, #0
 8007184:	f43f ad95 	beq.w	8006cb2 <_strtod_l+0x56a>
 8007188:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80072e0 <_strtod_l+0xb98>
 800718c:	4f60      	ldr	r7, [pc, #384]	; (8007310 <_strtod_l+0xbc8>)
 800718e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007192:	2600      	movs	r6, #0
 8007194:	e7ae      	b.n	80070f4 <_strtod_l+0x9ac>
 8007196:	4f5f      	ldr	r7, [pc, #380]	; (8007314 <_strtod_l+0xbcc>)
 8007198:	2600      	movs	r6, #0
 800719a:	e7a7      	b.n	80070ec <_strtod_l+0x9a4>
 800719c:	4b5d      	ldr	r3, [pc, #372]	; (8007314 <_strtod_l+0xbcc>)
 800719e:	4630      	mov	r0, r6
 80071a0:	4639      	mov	r1, r7
 80071a2:	2200      	movs	r2, #0
 80071a4:	f7f9 fa30 	bl	8000608 <__aeabi_dmul>
 80071a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071aa:	4606      	mov	r6, r0
 80071ac:	460f      	mov	r7, r1
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d09c      	beq.n	80070ec <_strtod_l+0x9a4>
 80071b2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80071b6:	e79d      	b.n	80070f4 <_strtod_l+0x9ac>
 80071b8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80072e8 <_strtod_l+0xba0>
 80071bc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80071c0:	ec57 6b17 	vmov	r6, r7, d7
 80071c4:	e796      	b.n	80070f4 <_strtod_l+0x9ac>
 80071c6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80071ca:	9b04      	ldr	r3, [sp, #16]
 80071cc:	46ca      	mov	sl, r9
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d1c2      	bne.n	8007158 <_strtod_l+0xa10>
 80071d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80071d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80071d8:	0d1b      	lsrs	r3, r3, #20
 80071da:	051b      	lsls	r3, r3, #20
 80071dc:	429a      	cmp	r2, r3
 80071de:	d1bb      	bne.n	8007158 <_strtod_l+0xa10>
 80071e0:	4630      	mov	r0, r6
 80071e2:	4639      	mov	r1, r7
 80071e4:	f7f9 fd58 	bl	8000c98 <__aeabi_d2lz>
 80071e8:	f7f9 f9e0 	bl	80005ac <__aeabi_l2d>
 80071ec:	4602      	mov	r2, r0
 80071ee:	460b      	mov	r3, r1
 80071f0:	4630      	mov	r0, r6
 80071f2:	4639      	mov	r1, r7
 80071f4:	f7f9 f850 	bl	8000298 <__aeabi_dsub>
 80071f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80071fa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80071fe:	ea43 0308 	orr.w	r3, r3, r8
 8007202:	4313      	orrs	r3, r2
 8007204:	4606      	mov	r6, r0
 8007206:	460f      	mov	r7, r1
 8007208:	d054      	beq.n	80072b4 <_strtod_l+0xb6c>
 800720a:	a339      	add	r3, pc, #228	; (adr r3, 80072f0 <_strtod_l+0xba8>)
 800720c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007210:	f7f9 fc6c 	bl	8000aec <__aeabi_dcmplt>
 8007214:	2800      	cmp	r0, #0
 8007216:	f47f ace5 	bne.w	8006be4 <_strtod_l+0x49c>
 800721a:	a337      	add	r3, pc, #220	; (adr r3, 80072f8 <_strtod_l+0xbb0>)
 800721c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007220:	4630      	mov	r0, r6
 8007222:	4639      	mov	r1, r7
 8007224:	f7f9 fc80 	bl	8000b28 <__aeabi_dcmpgt>
 8007228:	2800      	cmp	r0, #0
 800722a:	d095      	beq.n	8007158 <_strtod_l+0xa10>
 800722c:	e4da      	b.n	8006be4 <_strtod_l+0x49c>
 800722e:	9b04      	ldr	r3, [sp, #16]
 8007230:	b333      	cbz	r3, 8007280 <_strtod_l+0xb38>
 8007232:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007234:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007238:	d822      	bhi.n	8007280 <_strtod_l+0xb38>
 800723a:	a331      	add	r3, pc, #196	; (adr r3, 8007300 <_strtod_l+0xbb8>)
 800723c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007240:	4630      	mov	r0, r6
 8007242:	4639      	mov	r1, r7
 8007244:	f7f9 fc5c 	bl	8000b00 <__aeabi_dcmple>
 8007248:	b1a0      	cbz	r0, 8007274 <_strtod_l+0xb2c>
 800724a:	4639      	mov	r1, r7
 800724c:	4630      	mov	r0, r6
 800724e:	f7f9 fcb3 	bl	8000bb8 <__aeabi_d2uiz>
 8007252:	2801      	cmp	r0, #1
 8007254:	bf38      	it	cc
 8007256:	2001      	movcc	r0, #1
 8007258:	f7f9 f95c 	bl	8000514 <__aeabi_ui2d>
 800725c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800725e:	4606      	mov	r6, r0
 8007260:	460f      	mov	r7, r1
 8007262:	bb23      	cbnz	r3, 80072ae <_strtod_l+0xb66>
 8007264:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007268:	9010      	str	r0, [sp, #64]	; 0x40
 800726a:	9311      	str	r3, [sp, #68]	; 0x44
 800726c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007270:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007274:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007276:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007278:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800727c:	1a9b      	subs	r3, r3, r2
 800727e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007280:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007284:	eeb0 0a48 	vmov.f32	s0, s16
 8007288:	eef0 0a68 	vmov.f32	s1, s17
 800728c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007290:	f7ff f8fc 	bl	800648c <__ulp>
 8007294:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007298:	ec53 2b10 	vmov	r2, r3, d0
 800729c:	f7f9 f9b4 	bl	8000608 <__aeabi_dmul>
 80072a0:	ec53 2b18 	vmov	r2, r3, d8
 80072a4:	f7f8 fffa 	bl	800029c <__adddf3>
 80072a8:	4680      	mov	r8, r0
 80072aa:	4689      	mov	r9, r1
 80072ac:	e78d      	b.n	80071ca <_strtod_l+0xa82>
 80072ae:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80072b2:	e7db      	b.n	800726c <_strtod_l+0xb24>
 80072b4:	a314      	add	r3, pc, #80	; (adr r3, 8007308 <_strtod_l+0xbc0>)
 80072b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ba:	f7f9 fc17 	bl	8000aec <__aeabi_dcmplt>
 80072be:	e7b3      	b.n	8007228 <_strtod_l+0xae0>
 80072c0:	2300      	movs	r3, #0
 80072c2:	930a      	str	r3, [sp, #40]	; 0x28
 80072c4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80072c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80072c8:	6013      	str	r3, [r2, #0]
 80072ca:	f7ff ba7c 	b.w	80067c6 <_strtod_l+0x7e>
 80072ce:	2a65      	cmp	r2, #101	; 0x65
 80072d0:	f43f ab75 	beq.w	80069be <_strtod_l+0x276>
 80072d4:	2a45      	cmp	r2, #69	; 0x45
 80072d6:	f43f ab72 	beq.w	80069be <_strtod_l+0x276>
 80072da:	2301      	movs	r3, #1
 80072dc:	f7ff bbaa 	b.w	8006a34 <_strtod_l+0x2ec>
 80072e0:	00000000 	.word	0x00000000
 80072e4:	bff00000 	.word	0xbff00000
 80072e8:	00000000 	.word	0x00000000
 80072ec:	3ff00000 	.word	0x3ff00000
 80072f0:	94a03595 	.word	0x94a03595
 80072f4:	3fdfffff 	.word	0x3fdfffff
 80072f8:	35afe535 	.word	0x35afe535
 80072fc:	3fe00000 	.word	0x3fe00000
 8007300:	ffc00000 	.word	0xffc00000
 8007304:	41dfffff 	.word	0x41dfffff
 8007308:	94a03595 	.word	0x94a03595
 800730c:	3fcfffff 	.word	0x3fcfffff
 8007310:	3ff00000 	.word	0x3ff00000
 8007314:	3fe00000 	.word	0x3fe00000
 8007318:	7ff00000 	.word	0x7ff00000
 800731c:	7fe00000 	.word	0x7fe00000
 8007320:	7c9fffff 	.word	0x7c9fffff
 8007324:	7fefffff 	.word	0x7fefffff

08007328 <_strtod_r>:
 8007328:	4b01      	ldr	r3, [pc, #4]	; (8007330 <_strtod_r+0x8>)
 800732a:	f7ff ba0d 	b.w	8006748 <_strtod_l>
 800732e:	bf00      	nop
 8007330:	20000068 	.word	0x20000068

08007334 <_strtol_l.constprop.0>:
 8007334:	2b01      	cmp	r3, #1
 8007336:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800733a:	d001      	beq.n	8007340 <_strtol_l.constprop.0+0xc>
 800733c:	2b24      	cmp	r3, #36	; 0x24
 800733e:	d906      	bls.n	800734e <_strtol_l.constprop.0+0x1a>
 8007340:	f7fd fd6c 	bl	8004e1c <__errno>
 8007344:	2316      	movs	r3, #22
 8007346:	6003      	str	r3, [r0, #0]
 8007348:	2000      	movs	r0, #0
 800734a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800734e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007434 <_strtol_l.constprop.0+0x100>
 8007352:	460d      	mov	r5, r1
 8007354:	462e      	mov	r6, r5
 8007356:	f815 4b01 	ldrb.w	r4, [r5], #1
 800735a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800735e:	f017 0708 	ands.w	r7, r7, #8
 8007362:	d1f7      	bne.n	8007354 <_strtol_l.constprop.0+0x20>
 8007364:	2c2d      	cmp	r4, #45	; 0x2d
 8007366:	d132      	bne.n	80073ce <_strtol_l.constprop.0+0x9a>
 8007368:	782c      	ldrb	r4, [r5, #0]
 800736a:	2701      	movs	r7, #1
 800736c:	1cb5      	adds	r5, r6, #2
 800736e:	2b00      	cmp	r3, #0
 8007370:	d05b      	beq.n	800742a <_strtol_l.constprop.0+0xf6>
 8007372:	2b10      	cmp	r3, #16
 8007374:	d109      	bne.n	800738a <_strtol_l.constprop.0+0x56>
 8007376:	2c30      	cmp	r4, #48	; 0x30
 8007378:	d107      	bne.n	800738a <_strtol_l.constprop.0+0x56>
 800737a:	782c      	ldrb	r4, [r5, #0]
 800737c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007380:	2c58      	cmp	r4, #88	; 0x58
 8007382:	d14d      	bne.n	8007420 <_strtol_l.constprop.0+0xec>
 8007384:	786c      	ldrb	r4, [r5, #1]
 8007386:	2310      	movs	r3, #16
 8007388:	3502      	adds	r5, #2
 800738a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800738e:	f108 38ff 	add.w	r8, r8, #4294967295
 8007392:	f04f 0e00 	mov.w	lr, #0
 8007396:	fbb8 f9f3 	udiv	r9, r8, r3
 800739a:	4676      	mov	r6, lr
 800739c:	fb03 8a19 	mls	sl, r3, r9, r8
 80073a0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80073a4:	f1bc 0f09 	cmp.w	ip, #9
 80073a8:	d816      	bhi.n	80073d8 <_strtol_l.constprop.0+0xa4>
 80073aa:	4664      	mov	r4, ip
 80073ac:	42a3      	cmp	r3, r4
 80073ae:	dd24      	ble.n	80073fa <_strtol_l.constprop.0+0xc6>
 80073b0:	f1be 3fff 	cmp.w	lr, #4294967295
 80073b4:	d008      	beq.n	80073c8 <_strtol_l.constprop.0+0x94>
 80073b6:	45b1      	cmp	r9, r6
 80073b8:	d31c      	bcc.n	80073f4 <_strtol_l.constprop.0+0xc0>
 80073ba:	d101      	bne.n	80073c0 <_strtol_l.constprop.0+0x8c>
 80073bc:	45a2      	cmp	sl, r4
 80073be:	db19      	blt.n	80073f4 <_strtol_l.constprop.0+0xc0>
 80073c0:	fb06 4603 	mla	r6, r6, r3, r4
 80073c4:	f04f 0e01 	mov.w	lr, #1
 80073c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80073cc:	e7e8      	b.n	80073a0 <_strtol_l.constprop.0+0x6c>
 80073ce:	2c2b      	cmp	r4, #43	; 0x2b
 80073d0:	bf04      	itt	eq
 80073d2:	782c      	ldrbeq	r4, [r5, #0]
 80073d4:	1cb5      	addeq	r5, r6, #2
 80073d6:	e7ca      	b.n	800736e <_strtol_l.constprop.0+0x3a>
 80073d8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80073dc:	f1bc 0f19 	cmp.w	ip, #25
 80073e0:	d801      	bhi.n	80073e6 <_strtol_l.constprop.0+0xb2>
 80073e2:	3c37      	subs	r4, #55	; 0x37
 80073e4:	e7e2      	b.n	80073ac <_strtol_l.constprop.0+0x78>
 80073e6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80073ea:	f1bc 0f19 	cmp.w	ip, #25
 80073ee:	d804      	bhi.n	80073fa <_strtol_l.constprop.0+0xc6>
 80073f0:	3c57      	subs	r4, #87	; 0x57
 80073f2:	e7db      	b.n	80073ac <_strtol_l.constprop.0+0x78>
 80073f4:	f04f 3eff 	mov.w	lr, #4294967295
 80073f8:	e7e6      	b.n	80073c8 <_strtol_l.constprop.0+0x94>
 80073fa:	f1be 3fff 	cmp.w	lr, #4294967295
 80073fe:	d105      	bne.n	800740c <_strtol_l.constprop.0+0xd8>
 8007400:	2322      	movs	r3, #34	; 0x22
 8007402:	6003      	str	r3, [r0, #0]
 8007404:	4646      	mov	r6, r8
 8007406:	b942      	cbnz	r2, 800741a <_strtol_l.constprop.0+0xe6>
 8007408:	4630      	mov	r0, r6
 800740a:	e79e      	b.n	800734a <_strtol_l.constprop.0+0x16>
 800740c:	b107      	cbz	r7, 8007410 <_strtol_l.constprop.0+0xdc>
 800740e:	4276      	negs	r6, r6
 8007410:	2a00      	cmp	r2, #0
 8007412:	d0f9      	beq.n	8007408 <_strtol_l.constprop.0+0xd4>
 8007414:	f1be 0f00 	cmp.w	lr, #0
 8007418:	d000      	beq.n	800741c <_strtol_l.constprop.0+0xe8>
 800741a:	1e69      	subs	r1, r5, #1
 800741c:	6011      	str	r1, [r2, #0]
 800741e:	e7f3      	b.n	8007408 <_strtol_l.constprop.0+0xd4>
 8007420:	2430      	movs	r4, #48	; 0x30
 8007422:	2b00      	cmp	r3, #0
 8007424:	d1b1      	bne.n	800738a <_strtol_l.constprop.0+0x56>
 8007426:	2308      	movs	r3, #8
 8007428:	e7af      	b.n	800738a <_strtol_l.constprop.0+0x56>
 800742a:	2c30      	cmp	r4, #48	; 0x30
 800742c:	d0a5      	beq.n	800737a <_strtol_l.constprop.0+0x46>
 800742e:	230a      	movs	r3, #10
 8007430:	e7ab      	b.n	800738a <_strtol_l.constprop.0+0x56>
 8007432:	bf00      	nop
 8007434:	08008729 	.word	0x08008729

08007438 <_strtol_r>:
 8007438:	f7ff bf7c 	b.w	8007334 <_strtol_l.constprop.0>

0800743c <__ssputs_r>:
 800743c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007440:	688e      	ldr	r6, [r1, #8]
 8007442:	461f      	mov	r7, r3
 8007444:	42be      	cmp	r6, r7
 8007446:	680b      	ldr	r3, [r1, #0]
 8007448:	4682      	mov	sl, r0
 800744a:	460c      	mov	r4, r1
 800744c:	4690      	mov	r8, r2
 800744e:	d82c      	bhi.n	80074aa <__ssputs_r+0x6e>
 8007450:	898a      	ldrh	r2, [r1, #12]
 8007452:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007456:	d026      	beq.n	80074a6 <__ssputs_r+0x6a>
 8007458:	6965      	ldr	r5, [r4, #20]
 800745a:	6909      	ldr	r1, [r1, #16]
 800745c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007460:	eba3 0901 	sub.w	r9, r3, r1
 8007464:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007468:	1c7b      	adds	r3, r7, #1
 800746a:	444b      	add	r3, r9
 800746c:	106d      	asrs	r5, r5, #1
 800746e:	429d      	cmp	r5, r3
 8007470:	bf38      	it	cc
 8007472:	461d      	movcc	r5, r3
 8007474:	0553      	lsls	r3, r2, #21
 8007476:	d527      	bpl.n	80074c8 <__ssputs_r+0x8c>
 8007478:	4629      	mov	r1, r5
 800747a:	f7fe fc0f 	bl	8005c9c <_malloc_r>
 800747e:	4606      	mov	r6, r0
 8007480:	b360      	cbz	r0, 80074dc <__ssputs_r+0xa0>
 8007482:	6921      	ldr	r1, [r4, #16]
 8007484:	464a      	mov	r2, r9
 8007486:	f000 fb47 	bl	8007b18 <memcpy>
 800748a:	89a3      	ldrh	r3, [r4, #12]
 800748c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007490:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007494:	81a3      	strh	r3, [r4, #12]
 8007496:	6126      	str	r6, [r4, #16]
 8007498:	6165      	str	r5, [r4, #20]
 800749a:	444e      	add	r6, r9
 800749c:	eba5 0509 	sub.w	r5, r5, r9
 80074a0:	6026      	str	r6, [r4, #0]
 80074a2:	60a5      	str	r5, [r4, #8]
 80074a4:	463e      	mov	r6, r7
 80074a6:	42be      	cmp	r6, r7
 80074a8:	d900      	bls.n	80074ac <__ssputs_r+0x70>
 80074aa:	463e      	mov	r6, r7
 80074ac:	6820      	ldr	r0, [r4, #0]
 80074ae:	4632      	mov	r2, r6
 80074b0:	4641      	mov	r1, r8
 80074b2:	f000 fad3 	bl	8007a5c <memmove>
 80074b6:	68a3      	ldr	r3, [r4, #8]
 80074b8:	1b9b      	subs	r3, r3, r6
 80074ba:	60a3      	str	r3, [r4, #8]
 80074bc:	6823      	ldr	r3, [r4, #0]
 80074be:	4433      	add	r3, r6
 80074c0:	6023      	str	r3, [r4, #0]
 80074c2:	2000      	movs	r0, #0
 80074c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074c8:	462a      	mov	r2, r5
 80074ca:	f000 fec2 	bl	8008252 <_realloc_r>
 80074ce:	4606      	mov	r6, r0
 80074d0:	2800      	cmp	r0, #0
 80074d2:	d1e0      	bne.n	8007496 <__ssputs_r+0x5a>
 80074d4:	6921      	ldr	r1, [r4, #16]
 80074d6:	4650      	mov	r0, sl
 80074d8:	f7fe fb6c 	bl	8005bb4 <_free_r>
 80074dc:	230c      	movs	r3, #12
 80074de:	f8ca 3000 	str.w	r3, [sl]
 80074e2:	89a3      	ldrh	r3, [r4, #12]
 80074e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074e8:	81a3      	strh	r3, [r4, #12]
 80074ea:	f04f 30ff 	mov.w	r0, #4294967295
 80074ee:	e7e9      	b.n	80074c4 <__ssputs_r+0x88>

080074f0 <_svfiprintf_r>:
 80074f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074f4:	4698      	mov	r8, r3
 80074f6:	898b      	ldrh	r3, [r1, #12]
 80074f8:	061b      	lsls	r3, r3, #24
 80074fa:	b09d      	sub	sp, #116	; 0x74
 80074fc:	4607      	mov	r7, r0
 80074fe:	460d      	mov	r5, r1
 8007500:	4614      	mov	r4, r2
 8007502:	d50e      	bpl.n	8007522 <_svfiprintf_r+0x32>
 8007504:	690b      	ldr	r3, [r1, #16]
 8007506:	b963      	cbnz	r3, 8007522 <_svfiprintf_r+0x32>
 8007508:	2140      	movs	r1, #64	; 0x40
 800750a:	f7fe fbc7 	bl	8005c9c <_malloc_r>
 800750e:	6028      	str	r0, [r5, #0]
 8007510:	6128      	str	r0, [r5, #16]
 8007512:	b920      	cbnz	r0, 800751e <_svfiprintf_r+0x2e>
 8007514:	230c      	movs	r3, #12
 8007516:	603b      	str	r3, [r7, #0]
 8007518:	f04f 30ff 	mov.w	r0, #4294967295
 800751c:	e0d0      	b.n	80076c0 <_svfiprintf_r+0x1d0>
 800751e:	2340      	movs	r3, #64	; 0x40
 8007520:	616b      	str	r3, [r5, #20]
 8007522:	2300      	movs	r3, #0
 8007524:	9309      	str	r3, [sp, #36]	; 0x24
 8007526:	2320      	movs	r3, #32
 8007528:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800752c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007530:	2330      	movs	r3, #48	; 0x30
 8007532:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80076d8 <_svfiprintf_r+0x1e8>
 8007536:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800753a:	f04f 0901 	mov.w	r9, #1
 800753e:	4623      	mov	r3, r4
 8007540:	469a      	mov	sl, r3
 8007542:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007546:	b10a      	cbz	r2, 800754c <_svfiprintf_r+0x5c>
 8007548:	2a25      	cmp	r2, #37	; 0x25
 800754a:	d1f9      	bne.n	8007540 <_svfiprintf_r+0x50>
 800754c:	ebba 0b04 	subs.w	fp, sl, r4
 8007550:	d00b      	beq.n	800756a <_svfiprintf_r+0x7a>
 8007552:	465b      	mov	r3, fp
 8007554:	4622      	mov	r2, r4
 8007556:	4629      	mov	r1, r5
 8007558:	4638      	mov	r0, r7
 800755a:	f7ff ff6f 	bl	800743c <__ssputs_r>
 800755e:	3001      	adds	r0, #1
 8007560:	f000 80a9 	beq.w	80076b6 <_svfiprintf_r+0x1c6>
 8007564:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007566:	445a      	add	r2, fp
 8007568:	9209      	str	r2, [sp, #36]	; 0x24
 800756a:	f89a 3000 	ldrb.w	r3, [sl]
 800756e:	2b00      	cmp	r3, #0
 8007570:	f000 80a1 	beq.w	80076b6 <_svfiprintf_r+0x1c6>
 8007574:	2300      	movs	r3, #0
 8007576:	f04f 32ff 	mov.w	r2, #4294967295
 800757a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800757e:	f10a 0a01 	add.w	sl, sl, #1
 8007582:	9304      	str	r3, [sp, #16]
 8007584:	9307      	str	r3, [sp, #28]
 8007586:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800758a:	931a      	str	r3, [sp, #104]	; 0x68
 800758c:	4654      	mov	r4, sl
 800758e:	2205      	movs	r2, #5
 8007590:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007594:	4850      	ldr	r0, [pc, #320]	; (80076d8 <_svfiprintf_r+0x1e8>)
 8007596:	f7f8 fe23 	bl	80001e0 <memchr>
 800759a:	9a04      	ldr	r2, [sp, #16]
 800759c:	b9d8      	cbnz	r0, 80075d6 <_svfiprintf_r+0xe6>
 800759e:	06d0      	lsls	r0, r2, #27
 80075a0:	bf44      	itt	mi
 80075a2:	2320      	movmi	r3, #32
 80075a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075a8:	0711      	lsls	r1, r2, #28
 80075aa:	bf44      	itt	mi
 80075ac:	232b      	movmi	r3, #43	; 0x2b
 80075ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075b2:	f89a 3000 	ldrb.w	r3, [sl]
 80075b6:	2b2a      	cmp	r3, #42	; 0x2a
 80075b8:	d015      	beq.n	80075e6 <_svfiprintf_r+0xf6>
 80075ba:	9a07      	ldr	r2, [sp, #28]
 80075bc:	4654      	mov	r4, sl
 80075be:	2000      	movs	r0, #0
 80075c0:	f04f 0c0a 	mov.w	ip, #10
 80075c4:	4621      	mov	r1, r4
 80075c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075ca:	3b30      	subs	r3, #48	; 0x30
 80075cc:	2b09      	cmp	r3, #9
 80075ce:	d94d      	bls.n	800766c <_svfiprintf_r+0x17c>
 80075d0:	b1b0      	cbz	r0, 8007600 <_svfiprintf_r+0x110>
 80075d2:	9207      	str	r2, [sp, #28]
 80075d4:	e014      	b.n	8007600 <_svfiprintf_r+0x110>
 80075d6:	eba0 0308 	sub.w	r3, r0, r8
 80075da:	fa09 f303 	lsl.w	r3, r9, r3
 80075de:	4313      	orrs	r3, r2
 80075e0:	9304      	str	r3, [sp, #16]
 80075e2:	46a2      	mov	sl, r4
 80075e4:	e7d2      	b.n	800758c <_svfiprintf_r+0x9c>
 80075e6:	9b03      	ldr	r3, [sp, #12]
 80075e8:	1d19      	adds	r1, r3, #4
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	9103      	str	r1, [sp, #12]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	bfbb      	ittet	lt
 80075f2:	425b      	neglt	r3, r3
 80075f4:	f042 0202 	orrlt.w	r2, r2, #2
 80075f8:	9307      	strge	r3, [sp, #28]
 80075fa:	9307      	strlt	r3, [sp, #28]
 80075fc:	bfb8      	it	lt
 80075fe:	9204      	strlt	r2, [sp, #16]
 8007600:	7823      	ldrb	r3, [r4, #0]
 8007602:	2b2e      	cmp	r3, #46	; 0x2e
 8007604:	d10c      	bne.n	8007620 <_svfiprintf_r+0x130>
 8007606:	7863      	ldrb	r3, [r4, #1]
 8007608:	2b2a      	cmp	r3, #42	; 0x2a
 800760a:	d134      	bne.n	8007676 <_svfiprintf_r+0x186>
 800760c:	9b03      	ldr	r3, [sp, #12]
 800760e:	1d1a      	adds	r2, r3, #4
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	9203      	str	r2, [sp, #12]
 8007614:	2b00      	cmp	r3, #0
 8007616:	bfb8      	it	lt
 8007618:	f04f 33ff 	movlt.w	r3, #4294967295
 800761c:	3402      	adds	r4, #2
 800761e:	9305      	str	r3, [sp, #20]
 8007620:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80076e8 <_svfiprintf_r+0x1f8>
 8007624:	7821      	ldrb	r1, [r4, #0]
 8007626:	2203      	movs	r2, #3
 8007628:	4650      	mov	r0, sl
 800762a:	f7f8 fdd9 	bl	80001e0 <memchr>
 800762e:	b138      	cbz	r0, 8007640 <_svfiprintf_r+0x150>
 8007630:	9b04      	ldr	r3, [sp, #16]
 8007632:	eba0 000a 	sub.w	r0, r0, sl
 8007636:	2240      	movs	r2, #64	; 0x40
 8007638:	4082      	lsls	r2, r0
 800763a:	4313      	orrs	r3, r2
 800763c:	3401      	adds	r4, #1
 800763e:	9304      	str	r3, [sp, #16]
 8007640:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007644:	4825      	ldr	r0, [pc, #148]	; (80076dc <_svfiprintf_r+0x1ec>)
 8007646:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800764a:	2206      	movs	r2, #6
 800764c:	f7f8 fdc8 	bl	80001e0 <memchr>
 8007650:	2800      	cmp	r0, #0
 8007652:	d038      	beq.n	80076c6 <_svfiprintf_r+0x1d6>
 8007654:	4b22      	ldr	r3, [pc, #136]	; (80076e0 <_svfiprintf_r+0x1f0>)
 8007656:	bb1b      	cbnz	r3, 80076a0 <_svfiprintf_r+0x1b0>
 8007658:	9b03      	ldr	r3, [sp, #12]
 800765a:	3307      	adds	r3, #7
 800765c:	f023 0307 	bic.w	r3, r3, #7
 8007660:	3308      	adds	r3, #8
 8007662:	9303      	str	r3, [sp, #12]
 8007664:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007666:	4433      	add	r3, r6
 8007668:	9309      	str	r3, [sp, #36]	; 0x24
 800766a:	e768      	b.n	800753e <_svfiprintf_r+0x4e>
 800766c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007670:	460c      	mov	r4, r1
 8007672:	2001      	movs	r0, #1
 8007674:	e7a6      	b.n	80075c4 <_svfiprintf_r+0xd4>
 8007676:	2300      	movs	r3, #0
 8007678:	3401      	adds	r4, #1
 800767a:	9305      	str	r3, [sp, #20]
 800767c:	4619      	mov	r1, r3
 800767e:	f04f 0c0a 	mov.w	ip, #10
 8007682:	4620      	mov	r0, r4
 8007684:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007688:	3a30      	subs	r2, #48	; 0x30
 800768a:	2a09      	cmp	r2, #9
 800768c:	d903      	bls.n	8007696 <_svfiprintf_r+0x1a6>
 800768e:	2b00      	cmp	r3, #0
 8007690:	d0c6      	beq.n	8007620 <_svfiprintf_r+0x130>
 8007692:	9105      	str	r1, [sp, #20]
 8007694:	e7c4      	b.n	8007620 <_svfiprintf_r+0x130>
 8007696:	fb0c 2101 	mla	r1, ip, r1, r2
 800769a:	4604      	mov	r4, r0
 800769c:	2301      	movs	r3, #1
 800769e:	e7f0      	b.n	8007682 <_svfiprintf_r+0x192>
 80076a0:	ab03      	add	r3, sp, #12
 80076a2:	9300      	str	r3, [sp, #0]
 80076a4:	462a      	mov	r2, r5
 80076a6:	4b0f      	ldr	r3, [pc, #60]	; (80076e4 <_svfiprintf_r+0x1f4>)
 80076a8:	a904      	add	r1, sp, #16
 80076aa:	4638      	mov	r0, r7
 80076ac:	f7fc fab6 	bl	8003c1c <_printf_float>
 80076b0:	1c42      	adds	r2, r0, #1
 80076b2:	4606      	mov	r6, r0
 80076b4:	d1d6      	bne.n	8007664 <_svfiprintf_r+0x174>
 80076b6:	89ab      	ldrh	r3, [r5, #12]
 80076b8:	065b      	lsls	r3, r3, #25
 80076ba:	f53f af2d 	bmi.w	8007518 <_svfiprintf_r+0x28>
 80076be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80076c0:	b01d      	add	sp, #116	; 0x74
 80076c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076c6:	ab03      	add	r3, sp, #12
 80076c8:	9300      	str	r3, [sp, #0]
 80076ca:	462a      	mov	r2, r5
 80076cc:	4b05      	ldr	r3, [pc, #20]	; (80076e4 <_svfiprintf_r+0x1f4>)
 80076ce:	a904      	add	r1, sp, #16
 80076d0:	4638      	mov	r0, r7
 80076d2:	f7fc fd47 	bl	8004164 <_printf_i>
 80076d6:	e7eb      	b.n	80076b0 <_svfiprintf_r+0x1c0>
 80076d8:	08008829 	.word	0x08008829
 80076dc:	08008833 	.word	0x08008833
 80076e0:	08003c1d 	.word	0x08003c1d
 80076e4:	0800743d 	.word	0x0800743d
 80076e8:	0800882f 	.word	0x0800882f

080076ec <__sfputc_r>:
 80076ec:	6893      	ldr	r3, [r2, #8]
 80076ee:	3b01      	subs	r3, #1
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	b410      	push	{r4}
 80076f4:	6093      	str	r3, [r2, #8]
 80076f6:	da08      	bge.n	800770a <__sfputc_r+0x1e>
 80076f8:	6994      	ldr	r4, [r2, #24]
 80076fa:	42a3      	cmp	r3, r4
 80076fc:	db01      	blt.n	8007702 <__sfputc_r+0x16>
 80076fe:	290a      	cmp	r1, #10
 8007700:	d103      	bne.n	800770a <__sfputc_r+0x1e>
 8007702:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007706:	f7fd baa2 	b.w	8004c4e <__swbuf_r>
 800770a:	6813      	ldr	r3, [r2, #0]
 800770c:	1c58      	adds	r0, r3, #1
 800770e:	6010      	str	r0, [r2, #0]
 8007710:	7019      	strb	r1, [r3, #0]
 8007712:	4608      	mov	r0, r1
 8007714:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007718:	4770      	bx	lr

0800771a <__sfputs_r>:
 800771a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800771c:	4606      	mov	r6, r0
 800771e:	460f      	mov	r7, r1
 8007720:	4614      	mov	r4, r2
 8007722:	18d5      	adds	r5, r2, r3
 8007724:	42ac      	cmp	r4, r5
 8007726:	d101      	bne.n	800772c <__sfputs_r+0x12>
 8007728:	2000      	movs	r0, #0
 800772a:	e007      	b.n	800773c <__sfputs_r+0x22>
 800772c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007730:	463a      	mov	r2, r7
 8007732:	4630      	mov	r0, r6
 8007734:	f7ff ffda 	bl	80076ec <__sfputc_r>
 8007738:	1c43      	adds	r3, r0, #1
 800773a:	d1f3      	bne.n	8007724 <__sfputs_r+0xa>
 800773c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007740 <_vfiprintf_r>:
 8007740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007744:	460d      	mov	r5, r1
 8007746:	b09d      	sub	sp, #116	; 0x74
 8007748:	4614      	mov	r4, r2
 800774a:	4698      	mov	r8, r3
 800774c:	4606      	mov	r6, r0
 800774e:	b118      	cbz	r0, 8007758 <_vfiprintf_r+0x18>
 8007750:	6a03      	ldr	r3, [r0, #32]
 8007752:	b90b      	cbnz	r3, 8007758 <_vfiprintf_r+0x18>
 8007754:	f7fd f974 	bl	8004a40 <__sinit>
 8007758:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800775a:	07d9      	lsls	r1, r3, #31
 800775c:	d405      	bmi.n	800776a <_vfiprintf_r+0x2a>
 800775e:	89ab      	ldrh	r3, [r5, #12]
 8007760:	059a      	lsls	r2, r3, #22
 8007762:	d402      	bmi.n	800776a <_vfiprintf_r+0x2a>
 8007764:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007766:	f7fd fb83 	bl	8004e70 <__retarget_lock_acquire_recursive>
 800776a:	89ab      	ldrh	r3, [r5, #12]
 800776c:	071b      	lsls	r3, r3, #28
 800776e:	d501      	bpl.n	8007774 <_vfiprintf_r+0x34>
 8007770:	692b      	ldr	r3, [r5, #16]
 8007772:	b99b      	cbnz	r3, 800779c <_vfiprintf_r+0x5c>
 8007774:	4629      	mov	r1, r5
 8007776:	4630      	mov	r0, r6
 8007778:	f7fd faa6 	bl	8004cc8 <__swsetup_r>
 800777c:	b170      	cbz	r0, 800779c <_vfiprintf_r+0x5c>
 800777e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007780:	07dc      	lsls	r4, r3, #31
 8007782:	d504      	bpl.n	800778e <_vfiprintf_r+0x4e>
 8007784:	f04f 30ff 	mov.w	r0, #4294967295
 8007788:	b01d      	add	sp, #116	; 0x74
 800778a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800778e:	89ab      	ldrh	r3, [r5, #12]
 8007790:	0598      	lsls	r0, r3, #22
 8007792:	d4f7      	bmi.n	8007784 <_vfiprintf_r+0x44>
 8007794:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007796:	f7fd fb6c 	bl	8004e72 <__retarget_lock_release_recursive>
 800779a:	e7f3      	b.n	8007784 <_vfiprintf_r+0x44>
 800779c:	2300      	movs	r3, #0
 800779e:	9309      	str	r3, [sp, #36]	; 0x24
 80077a0:	2320      	movs	r3, #32
 80077a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80077a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80077aa:	2330      	movs	r3, #48	; 0x30
 80077ac:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007960 <_vfiprintf_r+0x220>
 80077b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80077b4:	f04f 0901 	mov.w	r9, #1
 80077b8:	4623      	mov	r3, r4
 80077ba:	469a      	mov	sl, r3
 80077bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077c0:	b10a      	cbz	r2, 80077c6 <_vfiprintf_r+0x86>
 80077c2:	2a25      	cmp	r2, #37	; 0x25
 80077c4:	d1f9      	bne.n	80077ba <_vfiprintf_r+0x7a>
 80077c6:	ebba 0b04 	subs.w	fp, sl, r4
 80077ca:	d00b      	beq.n	80077e4 <_vfiprintf_r+0xa4>
 80077cc:	465b      	mov	r3, fp
 80077ce:	4622      	mov	r2, r4
 80077d0:	4629      	mov	r1, r5
 80077d2:	4630      	mov	r0, r6
 80077d4:	f7ff ffa1 	bl	800771a <__sfputs_r>
 80077d8:	3001      	adds	r0, #1
 80077da:	f000 80a9 	beq.w	8007930 <_vfiprintf_r+0x1f0>
 80077de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077e0:	445a      	add	r2, fp
 80077e2:	9209      	str	r2, [sp, #36]	; 0x24
 80077e4:	f89a 3000 	ldrb.w	r3, [sl]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	f000 80a1 	beq.w	8007930 <_vfiprintf_r+0x1f0>
 80077ee:	2300      	movs	r3, #0
 80077f0:	f04f 32ff 	mov.w	r2, #4294967295
 80077f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077f8:	f10a 0a01 	add.w	sl, sl, #1
 80077fc:	9304      	str	r3, [sp, #16]
 80077fe:	9307      	str	r3, [sp, #28]
 8007800:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007804:	931a      	str	r3, [sp, #104]	; 0x68
 8007806:	4654      	mov	r4, sl
 8007808:	2205      	movs	r2, #5
 800780a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800780e:	4854      	ldr	r0, [pc, #336]	; (8007960 <_vfiprintf_r+0x220>)
 8007810:	f7f8 fce6 	bl	80001e0 <memchr>
 8007814:	9a04      	ldr	r2, [sp, #16]
 8007816:	b9d8      	cbnz	r0, 8007850 <_vfiprintf_r+0x110>
 8007818:	06d1      	lsls	r1, r2, #27
 800781a:	bf44      	itt	mi
 800781c:	2320      	movmi	r3, #32
 800781e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007822:	0713      	lsls	r3, r2, #28
 8007824:	bf44      	itt	mi
 8007826:	232b      	movmi	r3, #43	; 0x2b
 8007828:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800782c:	f89a 3000 	ldrb.w	r3, [sl]
 8007830:	2b2a      	cmp	r3, #42	; 0x2a
 8007832:	d015      	beq.n	8007860 <_vfiprintf_r+0x120>
 8007834:	9a07      	ldr	r2, [sp, #28]
 8007836:	4654      	mov	r4, sl
 8007838:	2000      	movs	r0, #0
 800783a:	f04f 0c0a 	mov.w	ip, #10
 800783e:	4621      	mov	r1, r4
 8007840:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007844:	3b30      	subs	r3, #48	; 0x30
 8007846:	2b09      	cmp	r3, #9
 8007848:	d94d      	bls.n	80078e6 <_vfiprintf_r+0x1a6>
 800784a:	b1b0      	cbz	r0, 800787a <_vfiprintf_r+0x13a>
 800784c:	9207      	str	r2, [sp, #28]
 800784e:	e014      	b.n	800787a <_vfiprintf_r+0x13a>
 8007850:	eba0 0308 	sub.w	r3, r0, r8
 8007854:	fa09 f303 	lsl.w	r3, r9, r3
 8007858:	4313      	orrs	r3, r2
 800785a:	9304      	str	r3, [sp, #16]
 800785c:	46a2      	mov	sl, r4
 800785e:	e7d2      	b.n	8007806 <_vfiprintf_r+0xc6>
 8007860:	9b03      	ldr	r3, [sp, #12]
 8007862:	1d19      	adds	r1, r3, #4
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	9103      	str	r1, [sp, #12]
 8007868:	2b00      	cmp	r3, #0
 800786a:	bfbb      	ittet	lt
 800786c:	425b      	neglt	r3, r3
 800786e:	f042 0202 	orrlt.w	r2, r2, #2
 8007872:	9307      	strge	r3, [sp, #28]
 8007874:	9307      	strlt	r3, [sp, #28]
 8007876:	bfb8      	it	lt
 8007878:	9204      	strlt	r2, [sp, #16]
 800787a:	7823      	ldrb	r3, [r4, #0]
 800787c:	2b2e      	cmp	r3, #46	; 0x2e
 800787e:	d10c      	bne.n	800789a <_vfiprintf_r+0x15a>
 8007880:	7863      	ldrb	r3, [r4, #1]
 8007882:	2b2a      	cmp	r3, #42	; 0x2a
 8007884:	d134      	bne.n	80078f0 <_vfiprintf_r+0x1b0>
 8007886:	9b03      	ldr	r3, [sp, #12]
 8007888:	1d1a      	adds	r2, r3, #4
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	9203      	str	r2, [sp, #12]
 800788e:	2b00      	cmp	r3, #0
 8007890:	bfb8      	it	lt
 8007892:	f04f 33ff 	movlt.w	r3, #4294967295
 8007896:	3402      	adds	r4, #2
 8007898:	9305      	str	r3, [sp, #20]
 800789a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007970 <_vfiprintf_r+0x230>
 800789e:	7821      	ldrb	r1, [r4, #0]
 80078a0:	2203      	movs	r2, #3
 80078a2:	4650      	mov	r0, sl
 80078a4:	f7f8 fc9c 	bl	80001e0 <memchr>
 80078a8:	b138      	cbz	r0, 80078ba <_vfiprintf_r+0x17a>
 80078aa:	9b04      	ldr	r3, [sp, #16]
 80078ac:	eba0 000a 	sub.w	r0, r0, sl
 80078b0:	2240      	movs	r2, #64	; 0x40
 80078b2:	4082      	lsls	r2, r0
 80078b4:	4313      	orrs	r3, r2
 80078b6:	3401      	adds	r4, #1
 80078b8:	9304      	str	r3, [sp, #16]
 80078ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078be:	4829      	ldr	r0, [pc, #164]	; (8007964 <_vfiprintf_r+0x224>)
 80078c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80078c4:	2206      	movs	r2, #6
 80078c6:	f7f8 fc8b 	bl	80001e0 <memchr>
 80078ca:	2800      	cmp	r0, #0
 80078cc:	d03f      	beq.n	800794e <_vfiprintf_r+0x20e>
 80078ce:	4b26      	ldr	r3, [pc, #152]	; (8007968 <_vfiprintf_r+0x228>)
 80078d0:	bb1b      	cbnz	r3, 800791a <_vfiprintf_r+0x1da>
 80078d2:	9b03      	ldr	r3, [sp, #12]
 80078d4:	3307      	adds	r3, #7
 80078d6:	f023 0307 	bic.w	r3, r3, #7
 80078da:	3308      	adds	r3, #8
 80078dc:	9303      	str	r3, [sp, #12]
 80078de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078e0:	443b      	add	r3, r7
 80078e2:	9309      	str	r3, [sp, #36]	; 0x24
 80078e4:	e768      	b.n	80077b8 <_vfiprintf_r+0x78>
 80078e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80078ea:	460c      	mov	r4, r1
 80078ec:	2001      	movs	r0, #1
 80078ee:	e7a6      	b.n	800783e <_vfiprintf_r+0xfe>
 80078f0:	2300      	movs	r3, #0
 80078f2:	3401      	adds	r4, #1
 80078f4:	9305      	str	r3, [sp, #20]
 80078f6:	4619      	mov	r1, r3
 80078f8:	f04f 0c0a 	mov.w	ip, #10
 80078fc:	4620      	mov	r0, r4
 80078fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007902:	3a30      	subs	r2, #48	; 0x30
 8007904:	2a09      	cmp	r2, #9
 8007906:	d903      	bls.n	8007910 <_vfiprintf_r+0x1d0>
 8007908:	2b00      	cmp	r3, #0
 800790a:	d0c6      	beq.n	800789a <_vfiprintf_r+0x15a>
 800790c:	9105      	str	r1, [sp, #20]
 800790e:	e7c4      	b.n	800789a <_vfiprintf_r+0x15a>
 8007910:	fb0c 2101 	mla	r1, ip, r1, r2
 8007914:	4604      	mov	r4, r0
 8007916:	2301      	movs	r3, #1
 8007918:	e7f0      	b.n	80078fc <_vfiprintf_r+0x1bc>
 800791a:	ab03      	add	r3, sp, #12
 800791c:	9300      	str	r3, [sp, #0]
 800791e:	462a      	mov	r2, r5
 8007920:	4b12      	ldr	r3, [pc, #72]	; (800796c <_vfiprintf_r+0x22c>)
 8007922:	a904      	add	r1, sp, #16
 8007924:	4630      	mov	r0, r6
 8007926:	f7fc f979 	bl	8003c1c <_printf_float>
 800792a:	4607      	mov	r7, r0
 800792c:	1c78      	adds	r0, r7, #1
 800792e:	d1d6      	bne.n	80078de <_vfiprintf_r+0x19e>
 8007930:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007932:	07d9      	lsls	r1, r3, #31
 8007934:	d405      	bmi.n	8007942 <_vfiprintf_r+0x202>
 8007936:	89ab      	ldrh	r3, [r5, #12]
 8007938:	059a      	lsls	r2, r3, #22
 800793a:	d402      	bmi.n	8007942 <_vfiprintf_r+0x202>
 800793c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800793e:	f7fd fa98 	bl	8004e72 <__retarget_lock_release_recursive>
 8007942:	89ab      	ldrh	r3, [r5, #12]
 8007944:	065b      	lsls	r3, r3, #25
 8007946:	f53f af1d 	bmi.w	8007784 <_vfiprintf_r+0x44>
 800794a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800794c:	e71c      	b.n	8007788 <_vfiprintf_r+0x48>
 800794e:	ab03      	add	r3, sp, #12
 8007950:	9300      	str	r3, [sp, #0]
 8007952:	462a      	mov	r2, r5
 8007954:	4b05      	ldr	r3, [pc, #20]	; (800796c <_vfiprintf_r+0x22c>)
 8007956:	a904      	add	r1, sp, #16
 8007958:	4630      	mov	r0, r6
 800795a:	f7fc fc03 	bl	8004164 <_printf_i>
 800795e:	e7e4      	b.n	800792a <_vfiprintf_r+0x1ea>
 8007960:	08008829 	.word	0x08008829
 8007964:	08008833 	.word	0x08008833
 8007968:	08003c1d 	.word	0x08003c1d
 800796c:	0800771b 	.word	0x0800771b
 8007970:	0800882f 	.word	0x0800882f

08007974 <fiprintf>:
 8007974:	b40e      	push	{r1, r2, r3}
 8007976:	b503      	push	{r0, r1, lr}
 8007978:	4601      	mov	r1, r0
 800797a:	ab03      	add	r3, sp, #12
 800797c:	4805      	ldr	r0, [pc, #20]	; (8007994 <fiprintf+0x20>)
 800797e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007982:	6800      	ldr	r0, [r0, #0]
 8007984:	9301      	str	r3, [sp, #4]
 8007986:	f7ff fedb 	bl	8007740 <_vfiprintf_r>
 800798a:	b002      	add	sp, #8
 800798c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007990:	b003      	add	sp, #12
 8007992:	4770      	bx	lr
 8007994:	20000064 	.word	0x20000064

08007998 <__swhatbuf_r>:
 8007998:	b570      	push	{r4, r5, r6, lr}
 800799a:	460c      	mov	r4, r1
 800799c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079a0:	2900      	cmp	r1, #0
 80079a2:	b096      	sub	sp, #88	; 0x58
 80079a4:	4615      	mov	r5, r2
 80079a6:	461e      	mov	r6, r3
 80079a8:	da0d      	bge.n	80079c6 <__swhatbuf_r+0x2e>
 80079aa:	89a3      	ldrh	r3, [r4, #12]
 80079ac:	f013 0f80 	tst.w	r3, #128	; 0x80
 80079b0:	f04f 0100 	mov.w	r1, #0
 80079b4:	bf0c      	ite	eq
 80079b6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80079ba:	2340      	movne	r3, #64	; 0x40
 80079bc:	2000      	movs	r0, #0
 80079be:	6031      	str	r1, [r6, #0]
 80079c0:	602b      	str	r3, [r5, #0]
 80079c2:	b016      	add	sp, #88	; 0x58
 80079c4:	bd70      	pop	{r4, r5, r6, pc}
 80079c6:	466a      	mov	r2, sp
 80079c8:	f000 f874 	bl	8007ab4 <_fstat_r>
 80079cc:	2800      	cmp	r0, #0
 80079ce:	dbec      	blt.n	80079aa <__swhatbuf_r+0x12>
 80079d0:	9901      	ldr	r1, [sp, #4]
 80079d2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80079d6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80079da:	4259      	negs	r1, r3
 80079dc:	4159      	adcs	r1, r3
 80079de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079e2:	e7eb      	b.n	80079bc <__swhatbuf_r+0x24>

080079e4 <__smakebuf_r>:
 80079e4:	898b      	ldrh	r3, [r1, #12]
 80079e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80079e8:	079d      	lsls	r5, r3, #30
 80079ea:	4606      	mov	r6, r0
 80079ec:	460c      	mov	r4, r1
 80079ee:	d507      	bpl.n	8007a00 <__smakebuf_r+0x1c>
 80079f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80079f4:	6023      	str	r3, [r4, #0]
 80079f6:	6123      	str	r3, [r4, #16]
 80079f8:	2301      	movs	r3, #1
 80079fa:	6163      	str	r3, [r4, #20]
 80079fc:	b002      	add	sp, #8
 80079fe:	bd70      	pop	{r4, r5, r6, pc}
 8007a00:	ab01      	add	r3, sp, #4
 8007a02:	466a      	mov	r2, sp
 8007a04:	f7ff ffc8 	bl	8007998 <__swhatbuf_r>
 8007a08:	9900      	ldr	r1, [sp, #0]
 8007a0a:	4605      	mov	r5, r0
 8007a0c:	4630      	mov	r0, r6
 8007a0e:	f7fe f945 	bl	8005c9c <_malloc_r>
 8007a12:	b948      	cbnz	r0, 8007a28 <__smakebuf_r+0x44>
 8007a14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a18:	059a      	lsls	r2, r3, #22
 8007a1a:	d4ef      	bmi.n	80079fc <__smakebuf_r+0x18>
 8007a1c:	f023 0303 	bic.w	r3, r3, #3
 8007a20:	f043 0302 	orr.w	r3, r3, #2
 8007a24:	81a3      	strh	r3, [r4, #12]
 8007a26:	e7e3      	b.n	80079f0 <__smakebuf_r+0xc>
 8007a28:	89a3      	ldrh	r3, [r4, #12]
 8007a2a:	6020      	str	r0, [r4, #0]
 8007a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a30:	81a3      	strh	r3, [r4, #12]
 8007a32:	9b00      	ldr	r3, [sp, #0]
 8007a34:	6163      	str	r3, [r4, #20]
 8007a36:	9b01      	ldr	r3, [sp, #4]
 8007a38:	6120      	str	r0, [r4, #16]
 8007a3a:	b15b      	cbz	r3, 8007a54 <__smakebuf_r+0x70>
 8007a3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a40:	4630      	mov	r0, r6
 8007a42:	f000 f849 	bl	8007ad8 <_isatty_r>
 8007a46:	b128      	cbz	r0, 8007a54 <__smakebuf_r+0x70>
 8007a48:	89a3      	ldrh	r3, [r4, #12]
 8007a4a:	f023 0303 	bic.w	r3, r3, #3
 8007a4e:	f043 0301 	orr.w	r3, r3, #1
 8007a52:	81a3      	strh	r3, [r4, #12]
 8007a54:	89a3      	ldrh	r3, [r4, #12]
 8007a56:	431d      	orrs	r5, r3
 8007a58:	81a5      	strh	r5, [r4, #12]
 8007a5a:	e7cf      	b.n	80079fc <__smakebuf_r+0x18>

08007a5c <memmove>:
 8007a5c:	4288      	cmp	r0, r1
 8007a5e:	b510      	push	{r4, lr}
 8007a60:	eb01 0402 	add.w	r4, r1, r2
 8007a64:	d902      	bls.n	8007a6c <memmove+0x10>
 8007a66:	4284      	cmp	r4, r0
 8007a68:	4623      	mov	r3, r4
 8007a6a:	d807      	bhi.n	8007a7c <memmove+0x20>
 8007a6c:	1e43      	subs	r3, r0, #1
 8007a6e:	42a1      	cmp	r1, r4
 8007a70:	d008      	beq.n	8007a84 <memmove+0x28>
 8007a72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007a7a:	e7f8      	b.n	8007a6e <memmove+0x12>
 8007a7c:	4402      	add	r2, r0
 8007a7e:	4601      	mov	r1, r0
 8007a80:	428a      	cmp	r2, r1
 8007a82:	d100      	bne.n	8007a86 <memmove+0x2a>
 8007a84:	bd10      	pop	{r4, pc}
 8007a86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007a8e:	e7f7      	b.n	8007a80 <memmove+0x24>

08007a90 <strncmp>:
 8007a90:	b510      	push	{r4, lr}
 8007a92:	b16a      	cbz	r2, 8007ab0 <strncmp+0x20>
 8007a94:	3901      	subs	r1, #1
 8007a96:	1884      	adds	r4, r0, r2
 8007a98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a9c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d103      	bne.n	8007aac <strncmp+0x1c>
 8007aa4:	42a0      	cmp	r0, r4
 8007aa6:	d001      	beq.n	8007aac <strncmp+0x1c>
 8007aa8:	2a00      	cmp	r2, #0
 8007aaa:	d1f5      	bne.n	8007a98 <strncmp+0x8>
 8007aac:	1ad0      	subs	r0, r2, r3
 8007aae:	bd10      	pop	{r4, pc}
 8007ab0:	4610      	mov	r0, r2
 8007ab2:	e7fc      	b.n	8007aae <strncmp+0x1e>

08007ab4 <_fstat_r>:
 8007ab4:	b538      	push	{r3, r4, r5, lr}
 8007ab6:	4d07      	ldr	r5, [pc, #28]	; (8007ad4 <_fstat_r+0x20>)
 8007ab8:	2300      	movs	r3, #0
 8007aba:	4604      	mov	r4, r0
 8007abc:	4608      	mov	r0, r1
 8007abe:	4611      	mov	r1, r2
 8007ac0:	602b      	str	r3, [r5, #0]
 8007ac2:	f7fa f9a2 	bl	8001e0a <_fstat>
 8007ac6:	1c43      	adds	r3, r0, #1
 8007ac8:	d102      	bne.n	8007ad0 <_fstat_r+0x1c>
 8007aca:	682b      	ldr	r3, [r5, #0]
 8007acc:	b103      	cbz	r3, 8007ad0 <_fstat_r+0x1c>
 8007ace:	6023      	str	r3, [r4, #0]
 8007ad0:	bd38      	pop	{r3, r4, r5, pc}
 8007ad2:	bf00      	nop
 8007ad4:	200003b0 	.word	0x200003b0

08007ad8 <_isatty_r>:
 8007ad8:	b538      	push	{r3, r4, r5, lr}
 8007ada:	4d06      	ldr	r5, [pc, #24]	; (8007af4 <_isatty_r+0x1c>)
 8007adc:	2300      	movs	r3, #0
 8007ade:	4604      	mov	r4, r0
 8007ae0:	4608      	mov	r0, r1
 8007ae2:	602b      	str	r3, [r5, #0]
 8007ae4:	f7fa f9a1 	bl	8001e2a <_isatty>
 8007ae8:	1c43      	adds	r3, r0, #1
 8007aea:	d102      	bne.n	8007af2 <_isatty_r+0x1a>
 8007aec:	682b      	ldr	r3, [r5, #0]
 8007aee:	b103      	cbz	r3, 8007af2 <_isatty_r+0x1a>
 8007af0:	6023      	str	r3, [r4, #0]
 8007af2:	bd38      	pop	{r3, r4, r5, pc}
 8007af4:	200003b0 	.word	0x200003b0

08007af8 <_sbrk_r>:
 8007af8:	b538      	push	{r3, r4, r5, lr}
 8007afa:	4d06      	ldr	r5, [pc, #24]	; (8007b14 <_sbrk_r+0x1c>)
 8007afc:	2300      	movs	r3, #0
 8007afe:	4604      	mov	r4, r0
 8007b00:	4608      	mov	r0, r1
 8007b02:	602b      	str	r3, [r5, #0]
 8007b04:	f7fa f9aa 	bl	8001e5c <_sbrk>
 8007b08:	1c43      	adds	r3, r0, #1
 8007b0a:	d102      	bne.n	8007b12 <_sbrk_r+0x1a>
 8007b0c:	682b      	ldr	r3, [r5, #0]
 8007b0e:	b103      	cbz	r3, 8007b12 <_sbrk_r+0x1a>
 8007b10:	6023      	str	r3, [r4, #0]
 8007b12:	bd38      	pop	{r3, r4, r5, pc}
 8007b14:	200003b0 	.word	0x200003b0

08007b18 <memcpy>:
 8007b18:	440a      	add	r2, r1
 8007b1a:	4291      	cmp	r1, r2
 8007b1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b20:	d100      	bne.n	8007b24 <memcpy+0xc>
 8007b22:	4770      	bx	lr
 8007b24:	b510      	push	{r4, lr}
 8007b26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b2e:	4291      	cmp	r1, r2
 8007b30:	d1f9      	bne.n	8007b26 <memcpy+0xe>
 8007b32:	bd10      	pop	{r4, pc}
 8007b34:	0000      	movs	r0, r0
	...

08007b38 <nan>:
 8007b38:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007b40 <nan+0x8>
 8007b3c:	4770      	bx	lr
 8007b3e:	bf00      	nop
 8007b40:	00000000 	.word	0x00000000
 8007b44:	7ff80000 	.word	0x7ff80000

08007b48 <abort>:
 8007b48:	b508      	push	{r3, lr}
 8007b4a:	2006      	movs	r0, #6
 8007b4c:	f000 fbe6 	bl	800831c <raise>
 8007b50:	2001      	movs	r0, #1
 8007b52:	f7fa f90b 	bl	8001d6c <_exit>

08007b56 <_calloc_r>:
 8007b56:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b58:	fba1 2402 	umull	r2, r4, r1, r2
 8007b5c:	b94c      	cbnz	r4, 8007b72 <_calloc_r+0x1c>
 8007b5e:	4611      	mov	r1, r2
 8007b60:	9201      	str	r2, [sp, #4]
 8007b62:	f7fe f89b 	bl	8005c9c <_malloc_r>
 8007b66:	9a01      	ldr	r2, [sp, #4]
 8007b68:	4605      	mov	r5, r0
 8007b6a:	b930      	cbnz	r0, 8007b7a <_calloc_r+0x24>
 8007b6c:	4628      	mov	r0, r5
 8007b6e:	b003      	add	sp, #12
 8007b70:	bd30      	pop	{r4, r5, pc}
 8007b72:	220c      	movs	r2, #12
 8007b74:	6002      	str	r2, [r0, #0]
 8007b76:	2500      	movs	r5, #0
 8007b78:	e7f8      	b.n	8007b6c <_calloc_r+0x16>
 8007b7a:	4621      	mov	r1, r4
 8007b7c:	f7fd f8fc 	bl	8004d78 <memset>
 8007b80:	e7f4      	b.n	8007b6c <_calloc_r+0x16>

08007b82 <rshift>:
 8007b82:	6903      	ldr	r3, [r0, #16]
 8007b84:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007b88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007b8c:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007b90:	f100 0414 	add.w	r4, r0, #20
 8007b94:	dd45      	ble.n	8007c22 <rshift+0xa0>
 8007b96:	f011 011f 	ands.w	r1, r1, #31
 8007b9a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007b9e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007ba2:	d10c      	bne.n	8007bbe <rshift+0x3c>
 8007ba4:	f100 0710 	add.w	r7, r0, #16
 8007ba8:	4629      	mov	r1, r5
 8007baa:	42b1      	cmp	r1, r6
 8007bac:	d334      	bcc.n	8007c18 <rshift+0x96>
 8007bae:	1a9b      	subs	r3, r3, r2
 8007bb0:	009b      	lsls	r3, r3, #2
 8007bb2:	1eea      	subs	r2, r5, #3
 8007bb4:	4296      	cmp	r6, r2
 8007bb6:	bf38      	it	cc
 8007bb8:	2300      	movcc	r3, #0
 8007bba:	4423      	add	r3, r4
 8007bbc:	e015      	b.n	8007bea <rshift+0x68>
 8007bbe:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007bc2:	f1c1 0820 	rsb	r8, r1, #32
 8007bc6:	40cf      	lsrs	r7, r1
 8007bc8:	f105 0e04 	add.w	lr, r5, #4
 8007bcc:	46a1      	mov	r9, r4
 8007bce:	4576      	cmp	r6, lr
 8007bd0:	46f4      	mov	ip, lr
 8007bd2:	d815      	bhi.n	8007c00 <rshift+0x7e>
 8007bd4:	1a9a      	subs	r2, r3, r2
 8007bd6:	0092      	lsls	r2, r2, #2
 8007bd8:	3a04      	subs	r2, #4
 8007bda:	3501      	adds	r5, #1
 8007bdc:	42ae      	cmp	r6, r5
 8007bde:	bf38      	it	cc
 8007be0:	2200      	movcc	r2, #0
 8007be2:	18a3      	adds	r3, r4, r2
 8007be4:	50a7      	str	r7, [r4, r2]
 8007be6:	b107      	cbz	r7, 8007bea <rshift+0x68>
 8007be8:	3304      	adds	r3, #4
 8007bea:	1b1a      	subs	r2, r3, r4
 8007bec:	42a3      	cmp	r3, r4
 8007bee:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007bf2:	bf08      	it	eq
 8007bf4:	2300      	moveq	r3, #0
 8007bf6:	6102      	str	r2, [r0, #16]
 8007bf8:	bf08      	it	eq
 8007bfa:	6143      	streq	r3, [r0, #20]
 8007bfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c00:	f8dc c000 	ldr.w	ip, [ip]
 8007c04:	fa0c fc08 	lsl.w	ip, ip, r8
 8007c08:	ea4c 0707 	orr.w	r7, ip, r7
 8007c0c:	f849 7b04 	str.w	r7, [r9], #4
 8007c10:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007c14:	40cf      	lsrs	r7, r1
 8007c16:	e7da      	b.n	8007bce <rshift+0x4c>
 8007c18:	f851 cb04 	ldr.w	ip, [r1], #4
 8007c1c:	f847 cf04 	str.w	ip, [r7, #4]!
 8007c20:	e7c3      	b.n	8007baa <rshift+0x28>
 8007c22:	4623      	mov	r3, r4
 8007c24:	e7e1      	b.n	8007bea <rshift+0x68>

08007c26 <__hexdig_fun>:
 8007c26:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007c2a:	2b09      	cmp	r3, #9
 8007c2c:	d802      	bhi.n	8007c34 <__hexdig_fun+0xe>
 8007c2e:	3820      	subs	r0, #32
 8007c30:	b2c0      	uxtb	r0, r0
 8007c32:	4770      	bx	lr
 8007c34:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007c38:	2b05      	cmp	r3, #5
 8007c3a:	d801      	bhi.n	8007c40 <__hexdig_fun+0x1a>
 8007c3c:	3847      	subs	r0, #71	; 0x47
 8007c3e:	e7f7      	b.n	8007c30 <__hexdig_fun+0xa>
 8007c40:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007c44:	2b05      	cmp	r3, #5
 8007c46:	d801      	bhi.n	8007c4c <__hexdig_fun+0x26>
 8007c48:	3827      	subs	r0, #39	; 0x27
 8007c4a:	e7f1      	b.n	8007c30 <__hexdig_fun+0xa>
 8007c4c:	2000      	movs	r0, #0
 8007c4e:	4770      	bx	lr

08007c50 <__gethex>:
 8007c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c54:	4617      	mov	r7, r2
 8007c56:	680a      	ldr	r2, [r1, #0]
 8007c58:	b085      	sub	sp, #20
 8007c5a:	f102 0b02 	add.w	fp, r2, #2
 8007c5e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007c62:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007c66:	4681      	mov	r9, r0
 8007c68:	468a      	mov	sl, r1
 8007c6a:	9302      	str	r3, [sp, #8]
 8007c6c:	32fe      	adds	r2, #254	; 0xfe
 8007c6e:	eb02 030b 	add.w	r3, r2, fp
 8007c72:	46d8      	mov	r8, fp
 8007c74:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8007c78:	9301      	str	r3, [sp, #4]
 8007c7a:	2830      	cmp	r0, #48	; 0x30
 8007c7c:	d0f7      	beq.n	8007c6e <__gethex+0x1e>
 8007c7e:	f7ff ffd2 	bl	8007c26 <__hexdig_fun>
 8007c82:	4604      	mov	r4, r0
 8007c84:	2800      	cmp	r0, #0
 8007c86:	d138      	bne.n	8007cfa <__gethex+0xaa>
 8007c88:	49a7      	ldr	r1, [pc, #668]	; (8007f28 <__gethex+0x2d8>)
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	4640      	mov	r0, r8
 8007c8e:	f7ff feff 	bl	8007a90 <strncmp>
 8007c92:	4606      	mov	r6, r0
 8007c94:	2800      	cmp	r0, #0
 8007c96:	d169      	bne.n	8007d6c <__gethex+0x11c>
 8007c98:	f898 0001 	ldrb.w	r0, [r8, #1]
 8007c9c:	465d      	mov	r5, fp
 8007c9e:	f7ff ffc2 	bl	8007c26 <__hexdig_fun>
 8007ca2:	2800      	cmp	r0, #0
 8007ca4:	d064      	beq.n	8007d70 <__gethex+0x120>
 8007ca6:	465a      	mov	r2, fp
 8007ca8:	7810      	ldrb	r0, [r2, #0]
 8007caa:	2830      	cmp	r0, #48	; 0x30
 8007cac:	4690      	mov	r8, r2
 8007cae:	f102 0201 	add.w	r2, r2, #1
 8007cb2:	d0f9      	beq.n	8007ca8 <__gethex+0x58>
 8007cb4:	f7ff ffb7 	bl	8007c26 <__hexdig_fun>
 8007cb8:	2301      	movs	r3, #1
 8007cba:	fab0 f480 	clz	r4, r0
 8007cbe:	0964      	lsrs	r4, r4, #5
 8007cc0:	465e      	mov	r6, fp
 8007cc2:	9301      	str	r3, [sp, #4]
 8007cc4:	4642      	mov	r2, r8
 8007cc6:	4615      	mov	r5, r2
 8007cc8:	3201      	adds	r2, #1
 8007cca:	7828      	ldrb	r0, [r5, #0]
 8007ccc:	f7ff ffab 	bl	8007c26 <__hexdig_fun>
 8007cd0:	2800      	cmp	r0, #0
 8007cd2:	d1f8      	bne.n	8007cc6 <__gethex+0x76>
 8007cd4:	4994      	ldr	r1, [pc, #592]	; (8007f28 <__gethex+0x2d8>)
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	4628      	mov	r0, r5
 8007cda:	f7ff fed9 	bl	8007a90 <strncmp>
 8007cde:	b978      	cbnz	r0, 8007d00 <__gethex+0xb0>
 8007ce0:	b946      	cbnz	r6, 8007cf4 <__gethex+0xa4>
 8007ce2:	1c6e      	adds	r6, r5, #1
 8007ce4:	4632      	mov	r2, r6
 8007ce6:	4615      	mov	r5, r2
 8007ce8:	3201      	adds	r2, #1
 8007cea:	7828      	ldrb	r0, [r5, #0]
 8007cec:	f7ff ff9b 	bl	8007c26 <__hexdig_fun>
 8007cf0:	2800      	cmp	r0, #0
 8007cf2:	d1f8      	bne.n	8007ce6 <__gethex+0x96>
 8007cf4:	1b73      	subs	r3, r6, r5
 8007cf6:	009e      	lsls	r6, r3, #2
 8007cf8:	e004      	b.n	8007d04 <__gethex+0xb4>
 8007cfa:	2400      	movs	r4, #0
 8007cfc:	4626      	mov	r6, r4
 8007cfe:	e7e1      	b.n	8007cc4 <__gethex+0x74>
 8007d00:	2e00      	cmp	r6, #0
 8007d02:	d1f7      	bne.n	8007cf4 <__gethex+0xa4>
 8007d04:	782b      	ldrb	r3, [r5, #0]
 8007d06:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007d0a:	2b50      	cmp	r3, #80	; 0x50
 8007d0c:	d13d      	bne.n	8007d8a <__gethex+0x13a>
 8007d0e:	786b      	ldrb	r3, [r5, #1]
 8007d10:	2b2b      	cmp	r3, #43	; 0x2b
 8007d12:	d02f      	beq.n	8007d74 <__gethex+0x124>
 8007d14:	2b2d      	cmp	r3, #45	; 0x2d
 8007d16:	d031      	beq.n	8007d7c <__gethex+0x12c>
 8007d18:	1c69      	adds	r1, r5, #1
 8007d1a:	f04f 0b00 	mov.w	fp, #0
 8007d1e:	7808      	ldrb	r0, [r1, #0]
 8007d20:	f7ff ff81 	bl	8007c26 <__hexdig_fun>
 8007d24:	1e42      	subs	r2, r0, #1
 8007d26:	b2d2      	uxtb	r2, r2
 8007d28:	2a18      	cmp	r2, #24
 8007d2a:	d82e      	bhi.n	8007d8a <__gethex+0x13a>
 8007d2c:	f1a0 0210 	sub.w	r2, r0, #16
 8007d30:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007d34:	f7ff ff77 	bl	8007c26 <__hexdig_fun>
 8007d38:	f100 3cff 	add.w	ip, r0, #4294967295
 8007d3c:	fa5f fc8c 	uxtb.w	ip, ip
 8007d40:	f1bc 0f18 	cmp.w	ip, #24
 8007d44:	d91d      	bls.n	8007d82 <__gethex+0x132>
 8007d46:	f1bb 0f00 	cmp.w	fp, #0
 8007d4a:	d000      	beq.n	8007d4e <__gethex+0xfe>
 8007d4c:	4252      	negs	r2, r2
 8007d4e:	4416      	add	r6, r2
 8007d50:	f8ca 1000 	str.w	r1, [sl]
 8007d54:	b1dc      	cbz	r4, 8007d8e <__gethex+0x13e>
 8007d56:	9b01      	ldr	r3, [sp, #4]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	bf14      	ite	ne
 8007d5c:	f04f 0800 	movne.w	r8, #0
 8007d60:	f04f 0806 	moveq.w	r8, #6
 8007d64:	4640      	mov	r0, r8
 8007d66:	b005      	add	sp, #20
 8007d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d6c:	4645      	mov	r5, r8
 8007d6e:	4626      	mov	r6, r4
 8007d70:	2401      	movs	r4, #1
 8007d72:	e7c7      	b.n	8007d04 <__gethex+0xb4>
 8007d74:	f04f 0b00 	mov.w	fp, #0
 8007d78:	1ca9      	adds	r1, r5, #2
 8007d7a:	e7d0      	b.n	8007d1e <__gethex+0xce>
 8007d7c:	f04f 0b01 	mov.w	fp, #1
 8007d80:	e7fa      	b.n	8007d78 <__gethex+0x128>
 8007d82:	230a      	movs	r3, #10
 8007d84:	fb03 0002 	mla	r0, r3, r2, r0
 8007d88:	e7d0      	b.n	8007d2c <__gethex+0xdc>
 8007d8a:	4629      	mov	r1, r5
 8007d8c:	e7e0      	b.n	8007d50 <__gethex+0x100>
 8007d8e:	eba5 0308 	sub.w	r3, r5, r8
 8007d92:	3b01      	subs	r3, #1
 8007d94:	4621      	mov	r1, r4
 8007d96:	2b07      	cmp	r3, #7
 8007d98:	dc0a      	bgt.n	8007db0 <__gethex+0x160>
 8007d9a:	4648      	mov	r0, r9
 8007d9c:	f7fe f80a 	bl	8005db4 <_Balloc>
 8007da0:	4604      	mov	r4, r0
 8007da2:	b940      	cbnz	r0, 8007db6 <__gethex+0x166>
 8007da4:	4b61      	ldr	r3, [pc, #388]	; (8007f2c <__gethex+0x2dc>)
 8007da6:	4602      	mov	r2, r0
 8007da8:	21e4      	movs	r1, #228	; 0xe4
 8007daa:	4861      	ldr	r0, [pc, #388]	; (8007f30 <__gethex+0x2e0>)
 8007dac:	f7fd f868 	bl	8004e80 <__assert_func>
 8007db0:	3101      	adds	r1, #1
 8007db2:	105b      	asrs	r3, r3, #1
 8007db4:	e7ef      	b.n	8007d96 <__gethex+0x146>
 8007db6:	f100 0a14 	add.w	sl, r0, #20
 8007dba:	2300      	movs	r3, #0
 8007dbc:	495a      	ldr	r1, [pc, #360]	; (8007f28 <__gethex+0x2d8>)
 8007dbe:	f8cd a004 	str.w	sl, [sp, #4]
 8007dc2:	469b      	mov	fp, r3
 8007dc4:	45a8      	cmp	r8, r5
 8007dc6:	d342      	bcc.n	8007e4e <__gethex+0x1fe>
 8007dc8:	9801      	ldr	r0, [sp, #4]
 8007dca:	f840 bb04 	str.w	fp, [r0], #4
 8007dce:	eba0 000a 	sub.w	r0, r0, sl
 8007dd2:	1080      	asrs	r0, r0, #2
 8007dd4:	6120      	str	r0, [r4, #16]
 8007dd6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8007dda:	4658      	mov	r0, fp
 8007ddc:	f7fe f8dc 	bl	8005f98 <__hi0bits>
 8007de0:	683d      	ldr	r5, [r7, #0]
 8007de2:	eba8 0000 	sub.w	r0, r8, r0
 8007de6:	42a8      	cmp	r0, r5
 8007de8:	dd59      	ble.n	8007e9e <__gethex+0x24e>
 8007dea:	eba0 0805 	sub.w	r8, r0, r5
 8007dee:	4641      	mov	r1, r8
 8007df0:	4620      	mov	r0, r4
 8007df2:	f7fe fc6b 	bl	80066cc <__any_on>
 8007df6:	4683      	mov	fp, r0
 8007df8:	b1b8      	cbz	r0, 8007e2a <__gethex+0x1da>
 8007dfa:	f108 33ff 	add.w	r3, r8, #4294967295
 8007dfe:	1159      	asrs	r1, r3, #5
 8007e00:	f003 021f 	and.w	r2, r3, #31
 8007e04:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007e08:	f04f 0b01 	mov.w	fp, #1
 8007e0c:	fa0b f202 	lsl.w	r2, fp, r2
 8007e10:	420a      	tst	r2, r1
 8007e12:	d00a      	beq.n	8007e2a <__gethex+0x1da>
 8007e14:	455b      	cmp	r3, fp
 8007e16:	dd06      	ble.n	8007e26 <__gethex+0x1d6>
 8007e18:	f1a8 0102 	sub.w	r1, r8, #2
 8007e1c:	4620      	mov	r0, r4
 8007e1e:	f7fe fc55 	bl	80066cc <__any_on>
 8007e22:	2800      	cmp	r0, #0
 8007e24:	d138      	bne.n	8007e98 <__gethex+0x248>
 8007e26:	f04f 0b02 	mov.w	fp, #2
 8007e2a:	4641      	mov	r1, r8
 8007e2c:	4620      	mov	r0, r4
 8007e2e:	f7ff fea8 	bl	8007b82 <rshift>
 8007e32:	4446      	add	r6, r8
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	42b3      	cmp	r3, r6
 8007e38:	da41      	bge.n	8007ebe <__gethex+0x26e>
 8007e3a:	4621      	mov	r1, r4
 8007e3c:	4648      	mov	r0, r9
 8007e3e:	f7fd fff9 	bl	8005e34 <_Bfree>
 8007e42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e44:	2300      	movs	r3, #0
 8007e46:	6013      	str	r3, [r2, #0]
 8007e48:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8007e4c:	e78a      	b.n	8007d64 <__gethex+0x114>
 8007e4e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8007e52:	2a2e      	cmp	r2, #46	; 0x2e
 8007e54:	d014      	beq.n	8007e80 <__gethex+0x230>
 8007e56:	2b20      	cmp	r3, #32
 8007e58:	d106      	bne.n	8007e68 <__gethex+0x218>
 8007e5a:	9b01      	ldr	r3, [sp, #4]
 8007e5c:	f843 bb04 	str.w	fp, [r3], #4
 8007e60:	f04f 0b00 	mov.w	fp, #0
 8007e64:	9301      	str	r3, [sp, #4]
 8007e66:	465b      	mov	r3, fp
 8007e68:	7828      	ldrb	r0, [r5, #0]
 8007e6a:	9303      	str	r3, [sp, #12]
 8007e6c:	f7ff fedb 	bl	8007c26 <__hexdig_fun>
 8007e70:	9b03      	ldr	r3, [sp, #12]
 8007e72:	f000 000f 	and.w	r0, r0, #15
 8007e76:	4098      	lsls	r0, r3
 8007e78:	ea4b 0b00 	orr.w	fp, fp, r0
 8007e7c:	3304      	adds	r3, #4
 8007e7e:	e7a1      	b.n	8007dc4 <__gethex+0x174>
 8007e80:	45a8      	cmp	r8, r5
 8007e82:	d8e8      	bhi.n	8007e56 <__gethex+0x206>
 8007e84:	2201      	movs	r2, #1
 8007e86:	4628      	mov	r0, r5
 8007e88:	9303      	str	r3, [sp, #12]
 8007e8a:	f7ff fe01 	bl	8007a90 <strncmp>
 8007e8e:	4926      	ldr	r1, [pc, #152]	; (8007f28 <__gethex+0x2d8>)
 8007e90:	9b03      	ldr	r3, [sp, #12]
 8007e92:	2800      	cmp	r0, #0
 8007e94:	d1df      	bne.n	8007e56 <__gethex+0x206>
 8007e96:	e795      	b.n	8007dc4 <__gethex+0x174>
 8007e98:	f04f 0b03 	mov.w	fp, #3
 8007e9c:	e7c5      	b.n	8007e2a <__gethex+0x1da>
 8007e9e:	da0b      	bge.n	8007eb8 <__gethex+0x268>
 8007ea0:	eba5 0800 	sub.w	r8, r5, r0
 8007ea4:	4621      	mov	r1, r4
 8007ea6:	4642      	mov	r2, r8
 8007ea8:	4648      	mov	r0, r9
 8007eaa:	f7fe f9dd 	bl	8006268 <__lshift>
 8007eae:	eba6 0608 	sub.w	r6, r6, r8
 8007eb2:	4604      	mov	r4, r0
 8007eb4:	f100 0a14 	add.w	sl, r0, #20
 8007eb8:	f04f 0b00 	mov.w	fp, #0
 8007ebc:	e7ba      	b.n	8007e34 <__gethex+0x1e4>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	42b3      	cmp	r3, r6
 8007ec2:	dd73      	ble.n	8007fac <__gethex+0x35c>
 8007ec4:	1b9e      	subs	r6, r3, r6
 8007ec6:	42b5      	cmp	r5, r6
 8007ec8:	dc34      	bgt.n	8007f34 <__gethex+0x2e4>
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2b02      	cmp	r3, #2
 8007ece:	d023      	beq.n	8007f18 <__gethex+0x2c8>
 8007ed0:	2b03      	cmp	r3, #3
 8007ed2:	d025      	beq.n	8007f20 <__gethex+0x2d0>
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d115      	bne.n	8007f04 <__gethex+0x2b4>
 8007ed8:	42b5      	cmp	r5, r6
 8007eda:	d113      	bne.n	8007f04 <__gethex+0x2b4>
 8007edc:	2d01      	cmp	r5, #1
 8007ede:	d10b      	bne.n	8007ef8 <__gethex+0x2a8>
 8007ee0:	9a02      	ldr	r2, [sp, #8]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6013      	str	r3, [r2, #0]
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	6123      	str	r3, [r4, #16]
 8007eea:	f8ca 3000 	str.w	r3, [sl]
 8007eee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ef0:	f04f 0862 	mov.w	r8, #98	; 0x62
 8007ef4:	601c      	str	r4, [r3, #0]
 8007ef6:	e735      	b.n	8007d64 <__gethex+0x114>
 8007ef8:	1e69      	subs	r1, r5, #1
 8007efa:	4620      	mov	r0, r4
 8007efc:	f7fe fbe6 	bl	80066cc <__any_on>
 8007f00:	2800      	cmp	r0, #0
 8007f02:	d1ed      	bne.n	8007ee0 <__gethex+0x290>
 8007f04:	4621      	mov	r1, r4
 8007f06:	4648      	mov	r0, r9
 8007f08:	f7fd ff94 	bl	8005e34 <_Bfree>
 8007f0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007f0e:	2300      	movs	r3, #0
 8007f10:	6013      	str	r3, [r2, #0]
 8007f12:	f04f 0850 	mov.w	r8, #80	; 0x50
 8007f16:	e725      	b.n	8007d64 <__gethex+0x114>
 8007f18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d1f2      	bne.n	8007f04 <__gethex+0x2b4>
 8007f1e:	e7df      	b.n	8007ee0 <__gethex+0x290>
 8007f20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d1dc      	bne.n	8007ee0 <__gethex+0x290>
 8007f26:	e7ed      	b.n	8007f04 <__gethex+0x2b4>
 8007f28:	080086d4 	.word	0x080086d4
 8007f2c:	08008569 	.word	0x08008569
 8007f30:	08008842 	.word	0x08008842
 8007f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8007f38:	f1bb 0f00 	cmp.w	fp, #0
 8007f3c:	d133      	bne.n	8007fa6 <__gethex+0x356>
 8007f3e:	f1b8 0f00 	cmp.w	r8, #0
 8007f42:	d004      	beq.n	8007f4e <__gethex+0x2fe>
 8007f44:	4641      	mov	r1, r8
 8007f46:	4620      	mov	r0, r4
 8007f48:	f7fe fbc0 	bl	80066cc <__any_on>
 8007f4c:	4683      	mov	fp, r0
 8007f4e:	ea4f 1268 	mov.w	r2, r8, asr #5
 8007f52:	2301      	movs	r3, #1
 8007f54:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007f58:	f008 081f 	and.w	r8, r8, #31
 8007f5c:	fa03 f308 	lsl.w	r3, r3, r8
 8007f60:	4213      	tst	r3, r2
 8007f62:	4631      	mov	r1, r6
 8007f64:	4620      	mov	r0, r4
 8007f66:	bf18      	it	ne
 8007f68:	f04b 0b02 	orrne.w	fp, fp, #2
 8007f6c:	1bad      	subs	r5, r5, r6
 8007f6e:	f7ff fe08 	bl	8007b82 <rshift>
 8007f72:	687e      	ldr	r6, [r7, #4]
 8007f74:	f04f 0802 	mov.w	r8, #2
 8007f78:	f1bb 0f00 	cmp.w	fp, #0
 8007f7c:	d04a      	beq.n	8008014 <__gethex+0x3c4>
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2b02      	cmp	r3, #2
 8007f82:	d016      	beq.n	8007fb2 <__gethex+0x362>
 8007f84:	2b03      	cmp	r3, #3
 8007f86:	d018      	beq.n	8007fba <__gethex+0x36a>
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d109      	bne.n	8007fa0 <__gethex+0x350>
 8007f8c:	f01b 0f02 	tst.w	fp, #2
 8007f90:	d006      	beq.n	8007fa0 <__gethex+0x350>
 8007f92:	f8da 3000 	ldr.w	r3, [sl]
 8007f96:	ea4b 0b03 	orr.w	fp, fp, r3
 8007f9a:	f01b 0f01 	tst.w	fp, #1
 8007f9e:	d10f      	bne.n	8007fc0 <__gethex+0x370>
 8007fa0:	f048 0810 	orr.w	r8, r8, #16
 8007fa4:	e036      	b.n	8008014 <__gethex+0x3c4>
 8007fa6:	f04f 0b01 	mov.w	fp, #1
 8007faa:	e7d0      	b.n	8007f4e <__gethex+0x2fe>
 8007fac:	f04f 0801 	mov.w	r8, #1
 8007fb0:	e7e2      	b.n	8007f78 <__gethex+0x328>
 8007fb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007fb4:	f1c3 0301 	rsb	r3, r3, #1
 8007fb8:	930f      	str	r3, [sp, #60]	; 0x3c
 8007fba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d0ef      	beq.n	8007fa0 <__gethex+0x350>
 8007fc0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007fc4:	f104 0214 	add.w	r2, r4, #20
 8007fc8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8007fcc:	9301      	str	r3, [sp, #4]
 8007fce:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	4694      	mov	ip, r2
 8007fd6:	f852 1b04 	ldr.w	r1, [r2], #4
 8007fda:	f1b1 3fff 	cmp.w	r1, #4294967295
 8007fde:	d01e      	beq.n	800801e <__gethex+0x3ce>
 8007fe0:	3101      	adds	r1, #1
 8007fe2:	f8cc 1000 	str.w	r1, [ip]
 8007fe6:	f1b8 0f02 	cmp.w	r8, #2
 8007fea:	f104 0214 	add.w	r2, r4, #20
 8007fee:	d13d      	bne.n	800806c <__gethex+0x41c>
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	3b01      	subs	r3, #1
 8007ff4:	42ab      	cmp	r3, r5
 8007ff6:	d10b      	bne.n	8008010 <__gethex+0x3c0>
 8007ff8:	1169      	asrs	r1, r5, #5
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	f005 051f 	and.w	r5, r5, #31
 8008000:	fa03 f505 	lsl.w	r5, r3, r5
 8008004:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008008:	421d      	tst	r5, r3
 800800a:	bf18      	it	ne
 800800c:	f04f 0801 	movne.w	r8, #1
 8008010:	f048 0820 	orr.w	r8, r8, #32
 8008014:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008016:	601c      	str	r4, [r3, #0]
 8008018:	9b02      	ldr	r3, [sp, #8]
 800801a:	601e      	str	r6, [r3, #0]
 800801c:	e6a2      	b.n	8007d64 <__gethex+0x114>
 800801e:	4290      	cmp	r0, r2
 8008020:	f842 3c04 	str.w	r3, [r2, #-4]
 8008024:	d8d6      	bhi.n	8007fd4 <__gethex+0x384>
 8008026:	68a2      	ldr	r2, [r4, #8]
 8008028:	4593      	cmp	fp, r2
 800802a:	db17      	blt.n	800805c <__gethex+0x40c>
 800802c:	6861      	ldr	r1, [r4, #4]
 800802e:	4648      	mov	r0, r9
 8008030:	3101      	adds	r1, #1
 8008032:	f7fd febf 	bl	8005db4 <_Balloc>
 8008036:	4682      	mov	sl, r0
 8008038:	b918      	cbnz	r0, 8008042 <__gethex+0x3f2>
 800803a:	4b1b      	ldr	r3, [pc, #108]	; (80080a8 <__gethex+0x458>)
 800803c:	4602      	mov	r2, r0
 800803e:	2184      	movs	r1, #132	; 0x84
 8008040:	e6b3      	b.n	8007daa <__gethex+0x15a>
 8008042:	6922      	ldr	r2, [r4, #16]
 8008044:	3202      	adds	r2, #2
 8008046:	f104 010c 	add.w	r1, r4, #12
 800804a:	0092      	lsls	r2, r2, #2
 800804c:	300c      	adds	r0, #12
 800804e:	f7ff fd63 	bl	8007b18 <memcpy>
 8008052:	4621      	mov	r1, r4
 8008054:	4648      	mov	r0, r9
 8008056:	f7fd feed 	bl	8005e34 <_Bfree>
 800805a:	4654      	mov	r4, sl
 800805c:	6922      	ldr	r2, [r4, #16]
 800805e:	1c51      	adds	r1, r2, #1
 8008060:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008064:	6121      	str	r1, [r4, #16]
 8008066:	2101      	movs	r1, #1
 8008068:	6151      	str	r1, [r2, #20]
 800806a:	e7bc      	b.n	8007fe6 <__gethex+0x396>
 800806c:	6921      	ldr	r1, [r4, #16]
 800806e:	4559      	cmp	r1, fp
 8008070:	dd0b      	ble.n	800808a <__gethex+0x43a>
 8008072:	2101      	movs	r1, #1
 8008074:	4620      	mov	r0, r4
 8008076:	f7ff fd84 	bl	8007b82 <rshift>
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	3601      	adds	r6, #1
 800807e:	42b3      	cmp	r3, r6
 8008080:	f6ff aedb 	blt.w	8007e3a <__gethex+0x1ea>
 8008084:	f04f 0801 	mov.w	r8, #1
 8008088:	e7c2      	b.n	8008010 <__gethex+0x3c0>
 800808a:	f015 051f 	ands.w	r5, r5, #31
 800808e:	d0f9      	beq.n	8008084 <__gethex+0x434>
 8008090:	9b01      	ldr	r3, [sp, #4]
 8008092:	441a      	add	r2, r3
 8008094:	f1c5 0520 	rsb	r5, r5, #32
 8008098:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800809c:	f7fd ff7c 	bl	8005f98 <__hi0bits>
 80080a0:	42a8      	cmp	r0, r5
 80080a2:	dbe6      	blt.n	8008072 <__gethex+0x422>
 80080a4:	e7ee      	b.n	8008084 <__gethex+0x434>
 80080a6:	bf00      	nop
 80080a8:	08008569 	.word	0x08008569

080080ac <L_shift>:
 80080ac:	f1c2 0208 	rsb	r2, r2, #8
 80080b0:	0092      	lsls	r2, r2, #2
 80080b2:	b570      	push	{r4, r5, r6, lr}
 80080b4:	f1c2 0620 	rsb	r6, r2, #32
 80080b8:	6843      	ldr	r3, [r0, #4]
 80080ba:	6804      	ldr	r4, [r0, #0]
 80080bc:	fa03 f506 	lsl.w	r5, r3, r6
 80080c0:	432c      	orrs	r4, r5
 80080c2:	40d3      	lsrs	r3, r2
 80080c4:	6004      	str	r4, [r0, #0]
 80080c6:	f840 3f04 	str.w	r3, [r0, #4]!
 80080ca:	4288      	cmp	r0, r1
 80080cc:	d3f4      	bcc.n	80080b8 <L_shift+0xc>
 80080ce:	bd70      	pop	{r4, r5, r6, pc}

080080d0 <__match>:
 80080d0:	b530      	push	{r4, r5, lr}
 80080d2:	6803      	ldr	r3, [r0, #0]
 80080d4:	3301      	adds	r3, #1
 80080d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080da:	b914      	cbnz	r4, 80080e2 <__match+0x12>
 80080dc:	6003      	str	r3, [r0, #0]
 80080de:	2001      	movs	r0, #1
 80080e0:	bd30      	pop	{r4, r5, pc}
 80080e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080e6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80080ea:	2d19      	cmp	r5, #25
 80080ec:	bf98      	it	ls
 80080ee:	3220      	addls	r2, #32
 80080f0:	42a2      	cmp	r2, r4
 80080f2:	d0f0      	beq.n	80080d6 <__match+0x6>
 80080f4:	2000      	movs	r0, #0
 80080f6:	e7f3      	b.n	80080e0 <__match+0x10>

080080f8 <__hexnan>:
 80080f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080fc:	680b      	ldr	r3, [r1, #0]
 80080fe:	6801      	ldr	r1, [r0, #0]
 8008100:	115e      	asrs	r6, r3, #5
 8008102:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008106:	f013 031f 	ands.w	r3, r3, #31
 800810a:	b087      	sub	sp, #28
 800810c:	bf18      	it	ne
 800810e:	3604      	addne	r6, #4
 8008110:	2500      	movs	r5, #0
 8008112:	1f37      	subs	r7, r6, #4
 8008114:	4682      	mov	sl, r0
 8008116:	4690      	mov	r8, r2
 8008118:	9301      	str	r3, [sp, #4]
 800811a:	f846 5c04 	str.w	r5, [r6, #-4]
 800811e:	46b9      	mov	r9, r7
 8008120:	463c      	mov	r4, r7
 8008122:	9502      	str	r5, [sp, #8]
 8008124:	46ab      	mov	fp, r5
 8008126:	784a      	ldrb	r2, [r1, #1]
 8008128:	1c4b      	adds	r3, r1, #1
 800812a:	9303      	str	r3, [sp, #12]
 800812c:	b342      	cbz	r2, 8008180 <__hexnan+0x88>
 800812e:	4610      	mov	r0, r2
 8008130:	9105      	str	r1, [sp, #20]
 8008132:	9204      	str	r2, [sp, #16]
 8008134:	f7ff fd77 	bl	8007c26 <__hexdig_fun>
 8008138:	2800      	cmp	r0, #0
 800813a:	d14f      	bne.n	80081dc <__hexnan+0xe4>
 800813c:	9a04      	ldr	r2, [sp, #16]
 800813e:	9905      	ldr	r1, [sp, #20]
 8008140:	2a20      	cmp	r2, #32
 8008142:	d818      	bhi.n	8008176 <__hexnan+0x7e>
 8008144:	9b02      	ldr	r3, [sp, #8]
 8008146:	459b      	cmp	fp, r3
 8008148:	dd13      	ble.n	8008172 <__hexnan+0x7a>
 800814a:	454c      	cmp	r4, r9
 800814c:	d206      	bcs.n	800815c <__hexnan+0x64>
 800814e:	2d07      	cmp	r5, #7
 8008150:	dc04      	bgt.n	800815c <__hexnan+0x64>
 8008152:	462a      	mov	r2, r5
 8008154:	4649      	mov	r1, r9
 8008156:	4620      	mov	r0, r4
 8008158:	f7ff ffa8 	bl	80080ac <L_shift>
 800815c:	4544      	cmp	r4, r8
 800815e:	d950      	bls.n	8008202 <__hexnan+0x10a>
 8008160:	2300      	movs	r3, #0
 8008162:	f1a4 0904 	sub.w	r9, r4, #4
 8008166:	f844 3c04 	str.w	r3, [r4, #-4]
 800816a:	f8cd b008 	str.w	fp, [sp, #8]
 800816e:	464c      	mov	r4, r9
 8008170:	461d      	mov	r5, r3
 8008172:	9903      	ldr	r1, [sp, #12]
 8008174:	e7d7      	b.n	8008126 <__hexnan+0x2e>
 8008176:	2a29      	cmp	r2, #41	; 0x29
 8008178:	d155      	bne.n	8008226 <__hexnan+0x12e>
 800817a:	3102      	adds	r1, #2
 800817c:	f8ca 1000 	str.w	r1, [sl]
 8008180:	f1bb 0f00 	cmp.w	fp, #0
 8008184:	d04f      	beq.n	8008226 <__hexnan+0x12e>
 8008186:	454c      	cmp	r4, r9
 8008188:	d206      	bcs.n	8008198 <__hexnan+0xa0>
 800818a:	2d07      	cmp	r5, #7
 800818c:	dc04      	bgt.n	8008198 <__hexnan+0xa0>
 800818e:	462a      	mov	r2, r5
 8008190:	4649      	mov	r1, r9
 8008192:	4620      	mov	r0, r4
 8008194:	f7ff ff8a 	bl	80080ac <L_shift>
 8008198:	4544      	cmp	r4, r8
 800819a:	d934      	bls.n	8008206 <__hexnan+0x10e>
 800819c:	f1a8 0204 	sub.w	r2, r8, #4
 80081a0:	4623      	mov	r3, r4
 80081a2:	f853 1b04 	ldr.w	r1, [r3], #4
 80081a6:	f842 1f04 	str.w	r1, [r2, #4]!
 80081aa:	429f      	cmp	r7, r3
 80081ac:	d2f9      	bcs.n	80081a2 <__hexnan+0xaa>
 80081ae:	1b3b      	subs	r3, r7, r4
 80081b0:	f023 0303 	bic.w	r3, r3, #3
 80081b4:	3304      	adds	r3, #4
 80081b6:	3e03      	subs	r6, #3
 80081b8:	3401      	adds	r4, #1
 80081ba:	42a6      	cmp	r6, r4
 80081bc:	bf38      	it	cc
 80081be:	2304      	movcc	r3, #4
 80081c0:	4443      	add	r3, r8
 80081c2:	2200      	movs	r2, #0
 80081c4:	f843 2b04 	str.w	r2, [r3], #4
 80081c8:	429f      	cmp	r7, r3
 80081ca:	d2fb      	bcs.n	80081c4 <__hexnan+0xcc>
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	b91b      	cbnz	r3, 80081d8 <__hexnan+0xe0>
 80081d0:	4547      	cmp	r7, r8
 80081d2:	d126      	bne.n	8008222 <__hexnan+0x12a>
 80081d4:	2301      	movs	r3, #1
 80081d6:	603b      	str	r3, [r7, #0]
 80081d8:	2005      	movs	r0, #5
 80081da:	e025      	b.n	8008228 <__hexnan+0x130>
 80081dc:	3501      	adds	r5, #1
 80081de:	2d08      	cmp	r5, #8
 80081e0:	f10b 0b01 	add.w	fp, fp, #1
 80081e4:	dd06      	ble.n	80081f4 <__hexnan+0xfc>
 80081e6:	4544      	cmp	r4, r8
 80081e8:	d9c3      	bls.n	8008172 <__hexnan+0x7a>
 80081ea:	2300      	movs	r3, #0
 80081ec:	f844 3c04 	str.w	r3, [r4, #-4]
 80081f0:	2501      	movs	r5, #1
 80081f2:	3c04      	subs	r4, #4
 80081f4:	6822      	ldr	r2, [r4, #0]
 80081f6:	f000 000f 	and.w	r0, r0, #15
 80081fa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80081fe:	6020      	str	r0, [r4, #0]
 8008200:	e7b7      	b.n	8008172 <__hexnan+0x7a>
 8008202:	2508      	movs	r5, #8
 8008204:	e7b5      	b.n	8008172 <__hexnan+0x7a>
 8008206:	9b01      	ldr	r3, [sp, #4]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d0df      	beq.n	80081cc <__hexnan+0xd4>
 800820c:	f1c3 0320 	rsb	r3, r3, #32
 8008210:	f04f 32ff 	mov.w	r2, #4294967295
 8008214:	40da      	lsrs	r2, r3
 8008216:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800821a:	4013      	ands	r3, r2
 800821c:	f846 3c04 	str.w	r3, [r6, #-4]
 8008220:	e7d4      	b.n	80081cc <__hexnan+0xd4>
 8008222:	3f04      	subs	r7, #4
 8008224:	e7d2      	b.n	80081cc <__hexnan+0xd4>
 8008226:	2004      	movs	r0, #4
 8008228:	b007      	add	sp, #28
 800822a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800822e <__ascii_mbtowc>:
 800822e:	b082      	sub	sp, #8
 8008230:	b901      	cbnz	r1, 8008234 <__ascii_mbtowc+0x6>
 8008232:	a901      	add	r1, sp, #4
 8008234:	b142      	cbz	r2, 8008248 <__ascii_mbtowc+0x1a>
 8008236:	b14b      	cbz	r3, 800824c <__ascii_mbtowc+0x1e>
 8008238:	7813      	ldrb	r3, [r2, #0]
 800823a:	600b      	str	r3, [r1, #0]
 800823c:	7812      	ldrb	r2, [r2, #0]
 800823e:	1e10      	subs	r0, r2, #0
 8008240:	bf18      	it	ne
 8008242:	2001      	movne	r0, #1
 8008244:	b002      	add	sp, #8
 8008246:	4770      	bx	lr
 8008248:	4610      	mov	r0, r2
 800824a:	e7fb      	b.n	8008244 <__ascii_mbtowc+0x16>
 800824c:	f06f 0001 	mvn.w	r0, #1
 8008250:	e7f8      	b.n	8008244 <__ascii_mbtowc+0x16>

08008252 <_realloc_r>:
 8008252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008256:	4680      	mov	r8, r0
 8008258:	4614      	mov	r4, r2
 800825a:	460e      	mov	r6, r1
 800825c:	b921      	cbnz	r1, 8008268 <_realloc_r+0x16>
 800825e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008262:	4611      	mov	r1, r2
 8008264:	f7fd bd1a 	b.w	8005c9c <_malloc_r>
 8008268:	b92a      	cbnz	r2, 8008276 <_realloc_r+0x24>
 800826a:	f7fd fca3 	bl	8005bb4 <_free_r>
 800826e:	4625      	mov	r5, r4
 8008270:	4628      	mov	r0, r5
 8008272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008276:	f000 f86d 	bl	8008354 <_malloc_usable_size_r>
 800827a:	4284      	cmp	r4, r0
 800827c:	4607      	mov	r7, r0
 800827e:	d802      	bhi.n	8008286 <_realloc_r+0x34>
 8008280:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008284:	d812      	bhi.n	80082ac <_realloc_r+0x5a>
 8008286:	4621      	mov	r1, r4
 8008288:	4640      	mov	r0, r8
 800828a:	f7fd fd07 	bl	8005c9c <_malloc_r>
 800828e:	4605      	mov	r5, r0
 8008290:	2800      	cmp	r0, #0
 8008292:	d0ed      	beq.n	8008270 <_realloc_r+0x1e>
 8008294:	42bc      	cmp	r4, r7
 8008296:	4622      	mov	r2, r4
 8008298:	4631      	mov	r1, r6
 800829a:	bf28      	it	cs
 800829c:	463a      	movcs	r2, r7
 800829e:	f7ff fc3b 	bl	8007b18 <memcpy>
 80082a2:	4631      	mov	r1, r6
 80082a4:	4640      	mov	r0, r8
 80082a6:	f7fd fc85 	bl	8005bb4 <_free_r>
 80082aa:	e7e1      	b.n	8008270 <_realloc_r+0x1e>
 80082ac:	4635      	mov	r5, r6
 80082ae:	e7df      	b.n	8008270 <_realloc_r+0x1e>

080082b0 <__ascii_wctomb>:
 80082b0:	b149      	cbz	r1, 80082c6 <__ascii_wctomb+0x16>
 80082b2:	2aff      	cmp	r2, #255	; 0xff
 80082b4:	bf85      	ittet	hi
 80082b6:	238a      	movhi	r3, #138	; 0x8a
 80082b8:	6003      	strhi	r3, [r0, #0]
 80082ba:	700a      	strbls	r2, [r1, #0]
 80082bc:	f04f 30ff 	movhi.w	r0, #4294967295
 80082c0:	bf98      	it	ls
 80082c2:	2001      	movls	r0, #1
 80082c4:	4770      	bx	lr
 80082c6:	4608      	mov	r0, r1
 80082c8:	4770      	bx	lr

080082ca <_raise_r>:
 80082ca:	291f      	cmp	r1, #31
 80082cc:	b538      	push	{r3, r4, r5, lr}
 80082ce:	4604      	mov	r4, r0
 80082d0:	460d      	mov	r5, r1
 80082d2:	d904      	bls.n	80082de <_raise_r+0x14>
 80082d4:	2316      	movs	r3, #22
 80082d6:	6003      	str	r3, [r0, #0]
 80082d8:	f04f 30ff 	mov.w	r0, #4294967295
 80082dc:	bd38      	pop	{r3, r4, r5, pc}
 80082de:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80082e0:	b112      	cbz	r2, 80082e8 <_raise_r+0x1e>
 80082e2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80082e6:	b94b      	cbnz	r3, 80082fc <_raise_r+0x32>
 80082e8:	4620      	mov	r0, r4
 80082ea:	f000 f831 	bl	8008350 <_getpid_r>
 80082ee:	462a      	mov	r2, r5
 80082f0:	4601      	mov	r1, r0
 80082f2:	4620      	mov	r0, r4
 80082f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082f8:	f000 b818 	b.w	800832c <_kill_r>
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d00a      	beq.n	8008316 <_raise_r+0x4c>
 8008300:	1c59      	adds	r1, r3, #1
 8008302:	d103      	bne.n	800830c <_raise_r+0x42>
 8008304:	2316      	movs	r3, #22
 8008306:	6003      	str	r3, [r0, #0]
 8008308:	2001      	movs	r0, #1
 800830a:	e7e7      	b.n	80082dc <_raise_r+0x12>
 800830c:	2400      	movs	r4, #0
 800830e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008312:	4628      	mov	r0, r5
 8008314:	4798      	blx	r3
 8008316:	2000      	movs	r0, #0
 8008318:	e7e0      	b.n	80082dc <_raise_r+0x12>
	...

0800831c <raise>:
 800831c:	4b02      	ldr	r3, [pc, #8]	; (8008328 <raise+0xc>)
 800831e:	4601      	mov	r1, r0
 8008320:	6818      	ldr	r0, [r3, #0]
 8008322:	f7ff bfd2 	b.w	80082ca <_raise_r>
 8008326:	bf00      	nop
 8008328:	20000064 	.word	0x20000064

0800832c <_kill_r>:
 800832c:	b538      	push	{r3, r4, r5, lr}
 800832e:	4d07      	ldr	r5, [pc, #28]	; (800834c <_kill_r+0x20>)
 8008330:	2300      	movs	r3, #0
 8008332:	4604      	mov	r4, r0
 8008334:	4608      	mov	r0, r1
 8008336:	4611      	mov	r1, r2
 8008338:	602b      	str	r3, [r5, #0]
 800833a:	f7f9 fd07 	bl	8001d4c <_kill>
 800833e:	1c43      	adds	r3, r0, #1
 8008340:	d102      	bne.n	8008348 <_kill_r+0x1c>
 8008342:	682b      	ldr	r3, [r5, #0]
 8008344:	b103      	cbz	r3, 8008348 <_kill_r+0x1c>
 8008346:	6023      	str	r3, [r4, #0]
 8008348:	bd38      	pop	{r3, r4, r5, pc}
 800834a:	bf00      	nop
 800834c:	200003b0 	.word	0x200003b0

08008350 <_getpid_r>:
 8008350:	f7f9 bcf4 	b.w	8001d3c <_getpid>

08008354 <_malloc_usable_size_r>:
 8008354:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008358:	1f18      	subs	r0, r3, #4
 800835a:	2b00      	cmp	r3, #0
 800835c:	bfbc      	itt	lt
 800835e:	580b      	ldrlt	r3, [r1, r0]
 8008360:	18c0      	addlt	r0, r0, r3
 8008362:	4770      	bx	lr

08008364 <_init>:
 8008364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008366:	bf00      	nop
 8008368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800836a:	bc08      	pop	{r3}
 800836c:	469e      	mov	lr, r3
 800836e:	4770      	bx	lr

08008370 <_fini>:
 8008370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008372:	bf00      	nop
 8008374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008376:	bc08      	pop	{r3}
 8008378:	469e      	mov	lr, r3
 800837a:	4770      	bx	lr
